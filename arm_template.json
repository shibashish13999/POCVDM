{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "eusdesgdatafactory"
        },
        "LS_ADLS_ESG_accountKey": {
            "type": "secureString",
            "metadata": "Secure string for 'accountKey' of 'LS_ADLS_ESG'"
        },
        "LS_AZSQLDB_ESG_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'LS_AZSQLDB_ESG'"
        },
        "LS_ESG_SQLSERVER_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'LS_ESG_SQLSERVER'"
        },
        "SCD_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'SCD'"
        },
        "RioTintoDemo_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'RioTintoDemo'"
        },
        "DeltaLoad_accessToken": {
            "type": "secureString",
            "metadata": "Secure string for 'accessToken' of 'DeltaLoad'"
        },
        "LS_ENBRDG_accountKey": {
            "type": "secureString",
            "metadata": "Secure string for 'accountKey' of 'LS_ENBRDG'"
        },
        "AzureSqlDatabase1_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
        },
        "LS_TALKWALKER_password": {
            "type": "secureString",
            "metadata": "Secure string for 'password' of 'LS_TALKWALKER'"
        },
        "LS_ADLS_ESG_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://eusdesgadls01.dfs.core.windows.net"
        },
        "RestService1_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "http://api.worldweatheronline.com"
        },
        "LS_ENBRDG_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://esudenbridgeadls01.dfs.core.windows.net"
        },
        "LS_TALKWALKER_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "http://api.talkwalker.com"
        },
        "LS_TALKWALKER_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "esguser01"
        },
        "TG_ESG_SMART_FETCH_DATAPIPELINE_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/97ecac89-4e79-4d22-a067-00cda909fbd8/resourceGroups/EUS-RGD-ESG01/providers/Microsoft.Storage/storageAccounts/eusdesgadls01"
        },
        "TG_SMART_FETCH_NEGATIVESEARCH_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/97ecac89-4e79-4d22-a067-00cda909fbd8/resourceGroups/EUS-RGD-ESG01/providers/Microsoft.Storage/storageAccounts/eusdesgadls01"
        },
        "TG_SMARTFETCH_REGULATORY_URL_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/97ecac89-4e79-4d22-a067-00cda909fbd8/resourceGroups/EUS-RGD-ESG01/providers/Microsoft.Storage/storageAccounts/eusdesgadls01"
        },
        "TG-SMARTFETCH_NEGATIVE_URL_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/97ecac89-4e79-4d22-a067-00cda909fbd8/resourceGroups/EUS-RGD-ESG01/providers/Microsoft.Storage/storageAccounts/eusdesgadls01"
        },
        "TG_NegativeURL_OECDWATCH_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/97ecac89-4e79-4d22-a067-00cda909fbd8/resourceGroups/EUS-RGD-ESG01/providers/Microsoft.Storage/storageAccounts/eusdesgadls01"
        },
        "TG-SMARTFETCH_NEGATIVE_URL_UnGlobalCompact_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/97ecac89-4e79-4d22-a067-00cda909fbd8/resourceGroups/EUS-RGD-ESG01/providers/Microsoft.Storage/storageAccounts/eusdesgadls01"
        },
        "TG-SMARTFETCH_NEGATIVE_URL_Humanrights_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/97ecac89-4e79-4d22-a067-00cda909fbd8/resourceGroups/EUS-RGD-ESG01/providers/Microsoft.Storage/storageAccounts/eusdesgadls01"
        },
        "TG_TW_EXTRACT_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/97ecac89-4e79-4d22-a067-00cda909fbd8/resourceGroups/EUS-RGD-ESG01/providers/Microsoft.Storage/storageAccounts/eusdesgadls01"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/LS_ADLS_ESG')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This linked service is used for ESG data movement",
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('LS_ADLS_ESG_properties_typeProperties_url')]",
                    "accountKey": {
                        "type": "SecureString",
                        "value": "[parameters('LS_ADLS_ESG_accountKey')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_AZSQLDB_ESG')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[parameters('LS_AZSQLDB_ESG_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_ESG_SQLSERVER')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[parameters('LS_ESG_SQLSERVER_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SCD')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "connectionString": "[parameters('SCD_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/RioTintoDemo')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[parameters('RioTintoDemo_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestService1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('RestService1_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/DeltaLoad')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This notebook is used for delta loading weather data into different tables",
                "annotations": [],
                "type": "AzureDatabricks",
                "typeProperties": {
                    "domain": "https://adb-4039191290063785.5.azuredatabricks.net",
                    "accessToken": {
                        "type": "SecureString",
                        "value": "[parameters('DeltaLoad_accessToken')]"
                    },
                    "newClusterNodeType": "Standard_DS3_v2",
                    "newClusterNumOfWorker": "1",
                    "newClusterSparkEnvVars": {
                        "PYSPARK_PYTHON": "/databricks/python3/bin/python3"
                    },
                    "newClusterVersion": "7.3.x-scala2.12"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_ENBRDG')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('LS_ENBRDG_properties_typeProperties_url')]",
                    "accountKey": {
                        "type": "SecureString",
                        "value": "[parameters('LS_ENBRDG_accountKey')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/LS_TALKWALKER')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('LS_TALKWALKER_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Basic",
                    "userName": "[parameters('LS_TALKWALKER_properties_typeProperties_userName')]",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('LS_TALKWALKER_password')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG_ESG_SMART_FETCH_DATAPIPELINE')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This  Event Based trigger will be initiated once the files arrives into ADLS",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ESG_DATA_LOAD_POSITIVESEARCH",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/esgcrawlerdata/blobs/ESG_SmartFetch_PositiveSearch",
                    "blobPathEndsWith": ".csv",
                    "ignoreEmptyBlobs": false,
                    "scope": "[parameters('TG_ESG_SMART_FETCH_DATAPIPELINE_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/ESG_DATA_LOAD_POSITIVESEARCH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG_SMART_FETCH_NEGATIVESEARCH')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Trigger for negative search load",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ESG_DATA_LOAD_NEGATIVESEARCH",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/esgcrawlerdata/blobs/ESG_SmartFetch_NegativeSearch",
                    "blobPathEndsWith": ".csv",
                    "ignoreEmptyBlobs": false,
                    "scope": "[parameters('TG_SMART_FETCH_NEGATIVESEARCH_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/ESG_DATA_LOAD_NEGATIVESEARCH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG_SMARTFETCH_REGULATORY_URL')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ESG_DATALOAD_REGULATORY_URL",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/esgcrawlerdata/blobs/ESG_PositiveCustom_URL",
                    "blobPathEndsWith": ".csv",
                    "ignoreEmptyBlobs": false,
                    "scope": "[parameters('TG_SMARTFETCH_REGULATORY_URL_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/ESG_DATALOAD_REGULATORY_URL')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG-SMARTFETCH_NEGATIVE_URL')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ESG_DATA_LOAD_NEGATIVEURL",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/esgcrawlerdata/blobs/ESG_NegativeCustom_URL",
                    "blobPathEndsWith": ".csv",
                    "ignoreEmptyBlobs": false,
                    "scope": "[parameters('TG-SMARTFETCH_NEGATIVE_URL_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/ESG_DATA_LOAD_NEGATIVEURL')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG_NegativeURL_OECDWATCH')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ESG_DATA_LOAD_NEgativeURL_OECDWATCH",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/esgcrawlerdata/blobs/ESG_NegativeCustom_URL/OECDWatch",
                    "blobPathEndsWith": ".csv",
                    "ignoreEmptyBlobs": false,
                    "scope": "[parameters('TG_NegativeURL_OECDWATCH_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/ESG_DATA_LOAD_NEgativeURL_OECDWATCH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG-SMARTFETCH_NEGATIVE_URL_UnGlobalCompact')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ESG_DATA_LOAD_NegativeURL_UNGlobalcompact",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/esgcrawlerdata/blobs/ESG_NegativeCustom_URL/UNGlobalcompact",
                    "blobPathEndsWith": ".csv",
                    "ignoreEmptyBlobs": false,
                    "scope": "[parameters('TG-SMARTFETCH_NEGATIVE_URL_UnGlobalCompact_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/ESG_DATA_LOAD_NegativeURL_UNGlobalcompact')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG-SMARTFETCH_NEGATIVE_URL_Humanrights')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ESG_DATA_LOAD_NegativeURL_Humanrights",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/esgcrawlerdata/blobs/ESG_NegativeCustom_URL/Humanrights",
                    "blobPathEndsWith": ".csv",
                    "ignoreEmptyBlobs": false,
                    "scope": "[parameters('TG-SMARTFETCH_NEGATIVE_URL_Humanrights_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/ESG_DATA_LOAD_NegativeURL_Humanrights')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG_TALKWALKER_API')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This trigger will initiate the API ",
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "Histogram Engagment Pipeline",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    },
                    {
                        "pipelineReference": {
                            "referenceName": "Histogram Published Pipeline",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    },
                    {
                        "pipelineReference": {
                            "referenceName": "Histogram Theme Cloud Pipeline",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    },
                    {
                        "pipelineReference": {
                            "referenceName": "Talkwalker Search Results API Pipeline",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    },
                    {
                        "pipelineReference": {
                            "referenceName": "API_PIPELINE",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2021-02-26T10:26:00Z",
                        "timeZone": "UTC",
                        "schedule": {
                            "minutes": [
                                0
                            ],
                            "hours": [
                                10
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/Histogram Engagment Pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/Histogram Published Pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/Histogram Theme Cloud Pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/Talkwalker Search Results API Pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/API_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TG_TW_EXTRACT')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This is a event based which runs once the file arrives in ADLS.",
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "TW_Extract_DataLoad",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/talkwalker/blobs/AutomatedExtract",
                    "blobPathEndsWith": ".csv",
                    "ignoreEmptyBlobs": true,
                    "scope": "[parameters('TG_TW_EXTRACT_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/TW_Extract_DataLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ESG_SOCAILMEDIA')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_SmartFetch_PositiveSearch/esg_socialmedia_data",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Company Name",
                        "type": "String"
                    },
                    {
                        "name": "Report Id",
                        "type": "String"
                    },
                    {
                        "name": "Keyword",
                        "type": "String"
                    },
                    {
                        "name": "Search Type",
                        "type": "String"
                    },
                    {
                        "name": "API Engine",
                        "type": "String"
                    },
                    {
                        "name": "URL",
                        "type": "String"
                    },
                    {
                        "name": "Article",
                        "type": "String"
                    },
                    {
                        "name": "Authors",
                        "type": "String"
                    },
                    {
                        "name": "Published Date",
                        "type": "String"
                    },
                    {
                        "name": "Modified Date",
                        "type": "String"
                    },
                    {
                        "name": "Title Page",
                        "type": "String"
                    },
                    {
                        "name": "Publication Name",
                        "type": "String"
                    },
                    {
                        "name": "Headlines",
                        "type": "String"
                    },
                    {
                        "name": "URL_Keywords",
                        "type": "String"
                    },
                    {
                        "name": "Summary",
                        "type": "String"
                    },
                    {
                        "name": "Source DomainDescription",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ESG_WEBSEARCH')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_SmartFetch_PositiveSearch/esg_websearch_data",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Company Name",
                        "type": "String"
                    },
                    {
                        "name": "Report Id",
                        "type": "String"
                    },
                    {
                        "name": "Keyword",
                        "type": "String"
                    },
                    {
                        "name": "Search Type",
                        "type": "String"
                    },
                    {
                        "name": "API Engine",
                        "type": "String"
                    },
                    {
                        "name": "URL",
                        "type": "String"
                    },
                    {
                        "name": "Article",
                        "type": "String"
                    },
                    {
                        "name": "Authors",
                        "type": "String"
                    },
                    {
                        "name": "Published Date",
                        "type": "String"
                    },
                    {
                        "name": "Modified Date",
                        "type": "String"
                    },
                    {
                        "name": "Title Page",
                        "type": "String"
                    },
                    {
                        "name": "Publication Name",
                        "type": "String"
                    },
                    {
                        "name": "Headlines",
                        "type": "String"
                    },
                    {
                        "name": "URL_Keywords",
                        "type": "String"
                    },
                    {
                        "name": "Summary",
                        "type": "String"
                    },
                    {
                        "name": "Source DomainDescription",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_SOCILA_MEDIA')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Social_Search_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Keyword",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Search_Type",
                        "type": "nvarchar"
                    },
                    {
                        "name": "API_Engine",
                        "type": "nvarchar"
                    },
                    {
                        "name": "URL",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Article",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Authors",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Published_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Modified_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Title_Page",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Publication_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Headlines",
                        "type": "nvarchar"
                    },
                    {
                        "name": "URL_Keywords",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Summary",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Source_Domain_Description",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "uniqueidentifier"
                    },
                    {
                        "name": "CreatedDateTime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "ModifiedDateTime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "Company_Name",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_SOCIALMEDIA"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQl_WEB_SEARCH')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Web_Search_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Keyword",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Search_Type",
                        "type": "nvarchar"
                    },
                    {
                        "name": "API_Engine",
                        "type": "nvarchar"
                    },
                    {
                        "name": "URL",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Article",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Authors",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Published_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Modified_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Title_Page",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Publication_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Headlines",
                        "type": "nvarchar"
                    },
                    {
                        "name": "URL_Keywords",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Summary",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Source_Domain_Description",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Description",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Source_Domain",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "uniqueidentifier"
                    },
                    {
                        "name": "CreatedDateTime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "ModifiedDateTime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "Company_Name",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_WEBSEARCH"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Keyword_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Keyword",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Topic_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_MASTER_KEYWORDS"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/STG_ESG_WEBSEARCH')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Company_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "uniqueidentifier"
                    },
                    {
                        "name": "Keyword",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Search_Type",
                        "type": "nvarchar"
                    },
                    {
                        "name": "API_Engine",
                        "type": "nvarchar"
                    },
                    {
                        "name": "URL",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Article",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Authors",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Published_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Modified_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Title_Page",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Publication_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Headlines",
                        "type": "nvarchar"
                    },
                    {
                        "name": "URL_Keywords",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Summary",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Source_Domain_Description",
                        "type": "nvarchar"
                    },
                    {
                        "name": "CreatedDateTime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "STG_ESG_WEBSEARCH"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Industry_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Industry_Type",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Sector_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_MASTER_INDUSTRY"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FileName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Testdata",
                        "fileSystem": "test"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Topic_id",
                        "type": "String"
                    },
                    {
                        "name": "Topic",
                        "type": "String"
                    },
                    {
                        "name": "Theme_id",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/testfilesize')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FileName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Topic.csv",
                        "folderPath": "Testdata",
                        "fileSystem": "test"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Topic_id",
                        "type": "String"
                    },
                    {
                        "name": "Topic",
                        "type": "String"
                    },
                    {
                        "name": "Theme_id",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/testfilesize1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FileName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "test.csv",
                        "folderPath": "Testdata",
                        "fileSystem": "test"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/masterload')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Keywords.csv",
                        "folderPath": "Testdata",
                        "fileSystem": "test"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Keyword_id",
                        "type": "String"
                    },
                    {
                        "name": "Keyword",
                        "type": "String"
                    },
                    {
                        "name": "Topic_id",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Verification_01102018-30092019.csv",
                        "fileSystem": "test"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "'\\n'",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "verification_nid",
                        "type": "String"
                    },
                    {
                        "name": "verification_type",
                        "type": "String"
                    },
                    {
                        "name": "critical_control",
                        "type": "String"
                    },
                    {
                        "name": "verifier",
                        "type": "String"
                    },
                    {
                        "name": "verifier_id",
                        "type": "String"
                    },
                    {
                        "name": "critical_risk",
                        "type": "String"
                    },
                    {
                        "name": "site",
                        "type": "String"
                    },
                    {
                        "name": "site_level_1",
                        "type": "String"
                    },
                    {
                        "name": "site_level_2",
                        "type": "String"
                    },
                    {
                        "name": "site_level_3",
                        "type": "String"
                    },
                    {
                        "name": "verifiers_employee_status",
                        "type": "String"
                    },
                    {
                        "name": "verification_date",
                        "type": "String"
                    },
                    {
                        "name": "verification_date_by_day",
                        "type": "String"
                    },
                    {
                        "name": "verification_last_updated_date",
                        "type": "String"
                    },
                    {
                        "name": "verification_section",
                        "type": "String"
                    },
                    {
                        "name": "task",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_id",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_text",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_comments",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_compliance",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_non_compliance",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_na",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RioTintoDemo",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Verification_Dec_Test"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RioTintoDemo')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_NEGATIVE_SEARCH')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Negative_Search_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Company_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Keyword",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Search_Type",
                        "type": "nvarchar"
                    },
                    {
                        "name": "API_Engine",
                        "type": "nvarchar"
                    },
                    {
                        "name": "URL",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Article",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Authors",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Published_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Modified_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Title_Page",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Publication_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Headlines",
                        "type": "nvarchar"
                    },
                    {
                        "name": "URL_Keywords",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Summary",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Source_Domain_Description",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Description",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Source_Domain",
                        "type": "nvarchar"
                    },
                    {
                        "name": "CreatedDateTime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "question_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Report_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_NEGATIVE_SEARCH"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ESG_NEGATIVESEARCH')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This Dataset is the source file for negative search load.",
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_SmartFetch_NegativeSeacrh",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Company Name",
                        "type": "String"
                    },
                    {
                        "name": "Report Id",
                        "type": "String"
                    },
                    {
                        "name": "Keyword",
                        "type": "String"
                    },
                    {
                        "name": "Search Type",
                        "type": "String"
                    },
                    {
                        "name": "API Engine",
                        "type": "String"
                    },
                    {
                        "name": "URL",
                        "type": "String"
                    },
                    {
                        "name": "Article",
                        "type": "String"
                    },
                    {
                        "name": "Authors",
                        "type": "String"
                    },
                    {
                        "name": "Published Date",
                        "type": "String"
                    },
                    {
                        "name": "Modified Date",
                        "type": "String"
                    },
                    {
                        "name": "Title Page",
                        "type": "String"
                    },
                    {
                        "name": "Publication Name",
                        "type": "String"
                    },
                    {
                        "name": "Headlines",
                        "type": "String"
                    },
                    {
                        "name": "URL_Keywords",
                        "type": "String"
                    },
                    {
                        "name": "Summary",
                        "type": "String"
                    },
                    {
                        "name": "Source DomainDescription",
                        "type": "String"
                    },
                    {
                        "name": "question_id",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ESG_NEGATIVEURL_OECDWatch')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_NegativeCustom_URL/OECDWatch",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Report_Id",
                        "type": "String"
                    },
                    {
                        "name": "Company_Name",
                        "type": "String"
                    },
                    {
                        "name": "Company Exist",
                        "type": "String"
                    },
                    {
                        "name": "Case_Title",
                        "type": "String"
                    },
                    {
                        "name": "Case_Date",
                        "type": "String"
                    },
                    {
                        "name": "Case_Issue",
                        "type": "String"
                    },
                    {
                        "name": "Case_Summary",
                        "type": "String"
                    },
                    {
                        "name": "Case_Link",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_UnGlobalcompact')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "unglobalcompact_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Delist_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Delist_Link",
                        "type": "nvarchar"
                    },
                    {
                        "name": "company_exist",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Company_Name",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_NEGATIVE_SCREEN_UNGLOBALCOMPACT"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ESG_NEGATIVEURl_BankTrack')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_NegativeCustom_URL/BankTrack",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_NEGATIVEURL_UNGlobalcompact')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_NegativeCustom_URL/UNGlobalcompact",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Report_Id",
                        "type": "String"
                    },
                    {
                        "name": "Company_Name",
                        "type": "String"
                    },
                    {
                        "name": "Company Exist",
                        "type": "String"
                    },
                    {
                        "name": "Delist Date",
                        "type": "String"
                    },
                    {
                        "name": "Delist Link",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_ESG_NEGATIVEURL_Humanrights')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_NegativeCustom_URL/Humanrights",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_BankTrack')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "banktrack_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Last_update",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Summary",
                        "type": "nvarchar"
                    },
                    {
                        "name": "weblink",
                        "type": "nvarchar"
                    },
                    {
                        "name": "company_exist",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Company_Name",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_NEGATIVE_SCREEN_BANKTRACK"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_Humanrights')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "humanrights_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Date_of_story",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Summary",
                        "type": "nvarchar"
                    },
                    {
                        "name": "weblink",
                        "type": "nvarchar"
                    },
                    {
                        "name": "company_exist",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Company_Name",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_NEGATIVE_SCREEN_HUMANRIGHTS"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_OECDWatch')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "oecdwatch_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Date_of_complaint_filed",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Summary",
                        "type": "nvarchar"
                    },
                    {
                        "name": "weblink",
                        "type": "nvarchar"
                    },
                    {
                        "name": "company_exist",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Company_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Case_Issue",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_NEGATIVE_SCREEN_OECDWATCH"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_CASEDETAILS')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Case_details_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Case_Number",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Defendants_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Description",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Offence_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Total_Fine",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Breaches_involved",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Location",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Address",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Local_Authority",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Industry",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Main_Activity",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Type_of_Location",
                        "type": "nvarchar"
                    },
                    {
                        "name": "HSE_Details",
                        "type": "nvarchar"
                    },
                    {
                        "name": "HSE_Group",
                        "type": "nvarchar"
                    },
                    {
                        "name": "HSE_Area",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Total_Costs_Awarded_to_HSE",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Region",
                        "type": "nvarchar"
                    },
                    {
                        "name": "HSE_Directorate",
                        "type": "nvarchar"
                    },
                    {
                        "name": "HSE_Division",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_CUSTOM_URL_HSE_CASE_DETAILS"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_CASE')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Case_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Case_Number",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Defendants_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Offence_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Local_Authority",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Main_Activity",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Category",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Custom_URL",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_CUSTOM_URL_HSE_CASE"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DS_Case')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_PositiveCustom_URL/HSE/Case",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Prop_0",
                        "type": "String"
                    },
                    {
                        "name": "category",
                        "type": "String"
                    },
                    {
                        "name": "Report_ID",
                        "type": "String"
                    },
                    {
                        "name": "Custom_URL",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DS_CaseDetails')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_PositiveCustom_URL/HSE/CaseDetails",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_AZ_SQL_BREACHES')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Breach_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Case_Number",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Defendants_Name",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Hearing_Date",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Result",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Fine",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Act_or_Regulation",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Report_id",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_CUSTOM_URL_HSE_BREACH"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DS_Beaches')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ESG_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "ESG_PositiveCustom_URL/HSE/Breaches",
                        "fileSystem": "esgcrawlerdata"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/GenericDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Folder": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "SCD"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": {
                            "value": "@dataset().Folder",
                            "type": "Expression"
                        },
                        "fileSystem": "demo"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DimEmp')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "EmpID",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "surrogatekey",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Region",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Status",
                        "type": "nvarchar"
                    },
                    {
                        "name": "EmpFunction",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Level",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Role",
                        "type": "nvarchar"
                    },
                    {
                        "name": "StartDate",
                        "type": "date"
                    },
                    {
                        "name": "EndDate",
                        "type": "date"
                    },
                    {
                        "name": "iscurrent",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "processtime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    }
                ],
                "typeProperties": {
                    "tableName": "[[dbo].[DimEmp]"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SqlDimension')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Keyword_id",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Key",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Active",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "ActiveStartTime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "ActiveEndTime",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "keywords",
                        "type": "nvarchar"
                    },
                    {
                        "name": "KeywordType",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ESG_MASTER_KEYWORDS_TEST"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/KEYWORDS_SCD')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Sector",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Industry",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Theme",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Topic",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Keywords",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "TEMP_V_ESG_FINAL_TEST"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/EmployeeFiles')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SCD",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "mycontainer"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "EmpID",
                        "type": "String"
                    },
                    {
                        "name": "Region",
                        "type": "String"
                    },
                    {
                        "name": "Status",
                        "type": "String"
                    },
                    {
                        "name": "Function",
                        "type": "String"
                    },
                    {
                        "name": "Level",
                        "type": "String"
                    },
                    {
                        "name": "Role",
                        "type": "String"
                    },
                    {
                        "name": "StartDate",
                        "type": "String"
                    },
                    {
                        "name": "EndDate",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/SCD')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RipTinto')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "Verification_01102018-30092019",
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Verification_01102018-30092019.xlsx",
                        "fileSystem": "test"
                    },
                    "firstRowAsHeader": true
                },
                "schema": [
                    {
                        "name": "verification_nid",
                        "type": "String"
                    },
                    {
                        "name": "verification_type",
                        "type": "String"
                    },
                    {
                        "name": "critical_control",
                        "type": "String"
                    },
                    {
                        "name": "verifier",
                        "type": "String"
                    },
                    {
                        "name": "verifier_id",
                        "type": "String"
                    },
                    {
                        "name": "critical_risk",
                        "type": "String"
                    },
                    {
                        "name": "site",
                        "type": "String"
                    },
                    {
                        "name": "site_level_1",
                        "type": "String"
                    },
                    {
                        "name": "site_level_2",
                        "type": "String"
                    },
                    {
                        "name": "site_level_3",
                        "type": "String"
                    },
                    {
                        "name": "verifiers_employee_status",
                        "type": "String"
                    },
                    {
                        "name": "verification_date",
                        "type": "String"
                    },
                    {
                        "name": "verification_date_by_day",
                        "type": "String"
                    },
                    {
                        "name": "verification_last_updated_date",
                        "type": "String"
                    },
                    {
                        "name": "verification_section",
                        "type": "String"
                    },
                    {
                        "name": "task",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_id",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_text",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_comments",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_compliance",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_non_compliance",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_na",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Weatherdata')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "weather.csv",
                        "fileSystem": "test"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "action_plan_nid",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_text",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_text",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_type",
                        "type": "String"
                    },
                    {
                        "name": "verification_section",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_comments",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_date_raised",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_completed_date",
                        "type": "String"
                    },
                    {
                        "name": "work_area",
                        "type": "String"
                    },
                    {
                        "name": "checklist_nid",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_status",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_end_date",
                        "type": "String"
                    },
                    {
                        "name": "critical_control",
                        "type": "String"
                    },
                    {
                        "name": "site",
                        "type": "String"
                    },
                    {
                        "name": "verification_date",
                        "type": "String"
                    },
                    {
                        "name": "physical_location_id",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_id",
                        "type": "String"
                    },
                    {
                        "name": "verification_nid",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Json1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Weather_Dataset"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": "weatherdata"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RestService1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "relativeurl": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Weather_Dataset"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().relativeurl",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RestService1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Weatherjson')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Weather_Dataset"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "weatherdata.json",
                        "fileSystem": "test"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/JSONOutput')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": "test"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "action_plan_nid",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_text",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_text",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_type",
                        "type": "String"
                    },
                    {
                        "name": "verification_section",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_comments",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_date_raised",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_completed_date",
                        "type": "String"
                    },
                    {
                        "name": "work_area",
                        "type": "String"
                    },
                    {
                        "name": "checklist_nid",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_status",
                        "type": "String"
                    },
                    {
                        "name": "action_plan_end_date",
                        "type": "String"
                    },
                    {
                        "name": "critical_control",
                        "type": "String"
                    },
                    {
                        "name": "site",
                        "type": "String"
                    },
                    {
                        "name": "verification_date",
                        "type": "String"
                    },
                    {
                        "name": "physical_location_id",
                        "type": "String"
                    },
                    {
                        "name": "verification_question_id",
                        "type": "String"
                    },
                    {
                        "name": "verification_nid",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Weather_Table')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RioTintoDemo",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Weather_Dataset"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "ID",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "City",
                        "type": "varchar"
                    },
                    {
                        "name": "Observation_date",
                        "type": "varchar"
                    },
                    {
                        "name": "sunrise",
                        "type": "varchar"
                    },
                    {
                        "name": "sunset",
                        "type": "varchar"
                    },
                    {
                        "name": "moonrise",
                        "type": "varchar"
                    },
                    {
                        "name": "moonset",
                        "type": "varchar"
                    },
                    {
                        "name": "moon_phase",
                        "type": "varchar"
                    },
                    {
                        "name": "moon_illumination",
                        "type": "varchar"
                    },
                    {
                        "name": "maxtempC",
                        "type": "varchar"
                    },
                    {
                        "name": "maxtempF",
                        "type": "varchar"
                    },
                    {
                        "name": "mintempC",
                        "type": "varchar"
                    },
                    {
                        "name": "mintempF",
                        "type": "varchar"
                    },
                    {
                        "name": "avgtempC",
                        "type": "varchar"
                    },
                    {
                        "name": "avgtempF",
                        "type": "varchar"
                    },
                    {
                        "name": "totalSnow_cm",
                        "type": "varchar"
                    },
                    {
                        "name": "sunHour",
                        "type": "decimal",
                        "precision": 18,
                        "scale": 0
                    },
                    {
                        "name": "uvIndex",
                        "type": "varchar"
                    },
                    {
                        "name": "time",
                        "type": "nvarchar"
                    },
                    {
                        "name": "tempC",
                        "type": "varchar"
                    },
                    {
                        "name": "tempF",
                        "type": "varchar"
                    },
                    {
                        "name": "windspeedMiles",
                        "type": "varchar"
                    },
                    {
                        "name": "windspeedKmph",
                        "type": "varchar"
                    },
                    {
                        "name": "winddirDegree",
                        "type": "varchar"
                    },
                    {
                        "name": "winddir16Point",
                        "type": "varchar"
                    },
                    {
                        "name": "weatherCode",
                        "type": "varchar"
                    },
                    {
                        "name": "weatherDesc",
                        "type": "varchar"
                    },
                    {
                        "name": "precipMM",
                        "type": "varchar"
                    },
                    {
                        "name": "precipInches",
                        "type": "varchar"
                    },
                    {
                        "name": "humidity",
                        "type": "varchar"
                    },
                    {
                        "name": "visibility",
                        "type": "varchar"
                    },
                    {
                        "name": "visibilityMiles",
                        "type": "varchar"
                    },
                    {
                        "name": "pressure",
                        "type": "varchar"
                    },
                    {
                        "name": "pressureInches",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "cloudcover",
                        "type": "varchar"
                    },
                    {
                        "name": "HeatIndexC",
                        "type": "varchar"
                    },
                    {
                        "name": "HeatIndexF",
                        "type": "varchar"
                    },
                    {
                        "name": "DewPointC",
                        "type": "varchar"
                    },
                    {
                        "name": "DewPointF",
                        "type": "varchar"
                    },
                    {
                        "name": "WindChillC",
                        "type": "varchar"
                    },
                    {
                        "name": "WindChillF",
                        "type": "varchar"
                    },
                    {
                        "name": "WindGustMiles",
                        "type": "varchar"
                    },
                    {
                        "name": "WindGustKmph",
                        "type": "varchar"
                    },
                    {
                        "name": "FeelsLikeC",
                        "type": "varchar"
                    },
                    {
                        "name": "FeelsLikeF",
                        "type": "varchar"
                    },
                    {
                        "name": "INT_observation_Date",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "REF_Weather"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RioTintoDemo')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_WEATHER_LOCATION')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RioTintoDemo",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Weather_ID",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Lat",
                        "type": "nvarchar"
                    },
                    {
                        "name": "Long",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Weather_Location"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RioTintoDemo')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/weathertesttable')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RioTintoDemo",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Weather_Dataset"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "ID",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Query",
                        "type": "varchar"
                    },
                    {
                        "name": "Observation_date",
                        "type": "varchar"
                    },
                    {
                        "name": "sunrise",
                        "type": "varchar"
                    },
                    {
                        "name": "sunset",
                        "type": "varchar"
                    },
                    {
                        "name": "moonrise",
                        "type": "varchar"
                    },
                    {
                        "name": "moonset",
                        "type": "varchar"
                    },
                    {
                        "name": "moon_phase",
                        "type": "varchar"
                    },
                    {
                        "name": "moon_illumination",
                        "type": "varchar"
                    },
                    {
                        "name": "maxtempC",
                        "type": "varchar"
                    },
                    {
                        "name": "maxtempF",
                        "type": "varchar"
                    },
                    {
                        "name": "mintempC",
                        "type": "varchar"
                    },
                    {
                        "name": "mintempF",
                        "type": "varchar"
                    },
                    {
                        "name": "avgtempC",
                        "type": "varchar"
                    },
                    {
                        "name": "avgtempF",
                        "type": "varchar"
                    },
                    {
                        "name": "totalSnow_cm",
                        "type": "varchar"
                    },
                    {
                        "name": "sunHour",
                        "type": "decimal",
                        "precision": 18,
                        "scale": 0
                    },
                    {
                        "name": "uvIndex",
                        "type": "varchar"
                    },
                    {
                        "name": "time",
                        "type": "nvarchar"
                    },
                    {
                        "name": "tempC",
                        "type": "varchar"
                    },
                    {
                        "name": "tempF",
                        "type": "varchar"
                    },
                    {
                        "name": "windspeedMiles",
                        "type": "varchar"
                    },
                    {
                        "name": "windspeedKmph",
                        "type": "varchar"
                    },
                    {
                        "name": "winddirDegree",
                        "type": "varchar"
                    },
                    {
                        "name": "winddir16Point",
                        "type": "varchar"
                    },
                    {
                        "name": "weatherCode",
                        "type": "varchar"
                    },
                    {
                        "name": "weatherDesc",
                        "type": "varchar"
                    },
                    {
                        "name": "precipMM",
                        "type": "varchar"
                    },
                    {
                        "name": "precipInches",
                        "type": "varchar"
                    },
                    {
                        "name": "humidity",
                        "type": "varchar"
                    },
                    {
                        "name": "visibility",
                        "type": "varchar"
                    },
                    {
                        "name": "visibilityMiles",
                        "type": "varchar"
                    },
                    {
                        "name": "pressure",
                        "type": "varchar"
                    },
                    {
                        "name": "pressureInches",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "cloudcover",
                        "type": "varchar"
                    },
                    {
                        "name": "HeatIndexC",
                        "type": "varchar"
                    },
                    {
                        "name": "HeatIndexF",
                        "type": "varchar"
                    },
                    {
                        "name": "DewPointC",
                        "type": "varchar"
                    },
                    {
                        "name": "DewPointF",
                        "type": "varchar"
                    },
                    {
                        "name": "WindChillC",
                        "type": "varchar"
                    },
                    {
                        "name": "WindChillF",
                        "type": "varchar"
                    },
                    {
                        "name": "WindGustMiles",
                        "type": "varchar"
                    },
                    {
                        "name": "WindGustKmph",
                        "type": "varchar"
                    },
                    {
                        "name": "FeelsLikeC",
                        "type": "varchar"
                    },
                    {
                        "name": "FeelsLikeF",
                        "type": "varchar"
                    },
                    {
                        "name": "LoadDate",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "REF_Weather_NEW"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RioTintoDemo')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/weathertest')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": "weatherdata"
                    }
                },
                "schema": {
                    "type": "object",
                    "properties": {
                        "data": {
                            "type": "object",
                            "properties": {
                                "request": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string"
                                            },
                                            "query": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "current_condition": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "observation_time": {
                                                "type": "string"
                                            },
                                            "temp_C": {
                                                "type": "string"
                                            },
                                            "temp_F": {
                                                "type": "string"
                                            },
                                            "weatherCode": {
                                                "type": "string"
                                            },
                                            "weatherIconUrl": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "value": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            },
                                            "weatherDesc": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "value": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            },
                                            "windspeedMiles": {
                                                "type": "string"
                                            },
                                            "windspeedKmph": {
                                                "type": "string"
                                            },
                                            "winddirDegree": {
                                                "type": "string"
                                            },
                                            "winddir16Point": {
                                                "type": "string"
                                            },
                                            "precipMM": {
                                                "type": "string"
                                            },
                                            "precipInches": {
                                                "type": "string"
                                            },
                                            "humidity": {
                                                "type": "string"
                                            },
                                            "visibility": {
                                                "type": "string"
                                            },
                                            "visibilityMiles": {
                                                "type": "string"
                                            },
                                            "pressure": {
                                                "type": "string"
                                            },
                                            "pressureInches": {
                                                "type": "string"
                                            },
                                            "cloudcover": {
                                                "type": "string"
                                            },
                                            "FeelsLikeC": {
                                                "type": "string"
                                            },
                                            "FeelsLikeF": {
                                                "type": "string"
                                            },
                                            "uvIndex": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "weather": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "date": {
                                                "type": "string"
                                            },
                                            "astronomy": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "sunrise": {
                                                            "type": "string"
                                                        },
                                                        "sunset": {
                                                            "type": "string"
                                                        },
                                                        "moonrise": {
                                                            "type": "string"
                                                        },
                                                        "moonset": {
                                                            "type": "string"
                                                        },
                                                        "moon_phase": {
                                                            "type": "string"
                                                        },
                                                        "moon_illumination": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            },
                                            "maxtempC": {
                                                "type": "string"
                                            },
                                            "maxtempF": {
                                                "type": "string"
                                            },
                                            "mintempC": {
                                                "type": "string"
                                            },
                                            "mintempF": {
                                                "type": "string"
                                            },
                                            "avgtempC": {
                                                "type": "string"
                                            },
                                            "avgtempF": {
                                                "type": "string"
                                            },
                                            "totalSnow_cm": {
                                                "type": "string"
                                            },
                                            "sunHour": {
                                                "type": "string"
                                            },
                                            "uvIndex": {
                                                "type": "string"
                                            },
                                            "hourly": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "time": {
                                                            "type": "string"
                                                        },
                                                        "tempC": {
                                                            "type": "string"
                                                        },
                                                        "tempF": {
                                                            "type": "string"
                                                        },
                                                        "windspeedMiles": {
                                                            "type": "string"
                                                        },
                                                        "windspeedKmph": {
                                                            "type": "string"
                                                        },
                                                        "winddirDegree": {
                                                            "type": "string"
                                                        },
                                                        "winddir16Point": {
                                                            "type": "string"
                                                        },
                                                        "weatherCode": {
                                                            "type": "string"
                                                        },
                                                        "weatherIconUrl": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "value": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "weatherDesc": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "value": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "precipMM": {
                                                            "type": "string"
                                                        },
                                                        "precipInches": {
                                                            "type": "string"
                                                        },
                                                        "humidity": {
                                                            "type": "string"
                                                        },
                                                        "visibility": {
                                                            "type": "string"
                                                        },
                                                        "visibilityMiles": {
                                                            "type": "string"
                                                        },
                                                        "pressure": {
                                                            "type": "string"
                                                        },
                                                        "pressureInches": {
                                                            "type": "string"
                                                        },
                                                        "cloudcover": {
                                                            "type": "string"
                                                        },
                                                        "HeatIndexC": {
                                                            "type": "string"
                                                        },
                                                        "HeatIndexF": {
                                                            "type": "string"
                                                        },
                                                        "DewPointC": {
                                                            "type": "string"
                                                        },
                                                        "DewPointF": {
                                                            "type": "string"
                                                        },
                                                        "WindChillC": {
                                                            "type": "string"
                                                        },
                                                        "WindChillF": {
                                                            "type": "string"
                                                        },
                                                        "WindGustMiles": {
                                                            "type": "string"
                                                        },
                                                        "WindGustKmph": {
                                                            "type": "string"
                                                        },
                                                        "FeelsLikeC": {
                                                            "type": "string"
                                                        },
                                                        "FeelsLikeF": {
                                                            "type": "string"
                                                        },
                                                        "chanceofrain": {
                                                            "type": "string"
                                                        },
                                                        "chanceofremdry": {
                                                            "type": "string"
                                                        },
                                                        "chanceofwindy": {
                                                            "type": "string"
                                                        },
                                                        "chanceofovercast": {
                                                            "type": "string"
                                                        },
                                                        "chanceofsunshine": {
                                                            "type": "string"
                                                        },
                                                        "chanceoffrost": {
                                                            "type": "string"
                                                        },
                                                        "chanceofhightemp": {
                                                            "type": "string"
                                                        },
                                                        "chanceoffog": {
                                                            "type": "string"
                                                        },
                                                        "chanceofsnow": {
                                                            "type": "string"
                                                        },
                                                        "chanceofthunder": {
                                                            "type": "string"
                                                        },
                                                        "uvIndex": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "ClimateAverages": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "month": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "index": {
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "avgMinTemp": {
                                                            "type": "string"
                                                        },
                                                        "avgMinTemp_F": {
                                                            "type": "string"
                                                        },
                                                        "avgMaxTemp": {
                                                            "type": "string"
                                                        },
                                                        "avgMaxTemp_F": {
                                                            "type": "string"
                                                        },
                                                        "absMinTemp": {
                                                            "type": "string"
                                                        },
                                                        "absMinTemp_F": {
                                                            "type": "string"
                                                        },
                                                        "absMaxTemp": {
                                                            "type": "string"
                                                        },
                                                        "absMaxTemp_F": {
                                                            "type": "string"
                                                        },
                                                        "avgTemp": {
                                                            "type": "string"
                                                        },
                                                        "avgTemp_F": {
                                                            "type": "string"
                                                        },
                                                        "maxWindSpeed_kmph": {
                                                            "type": "string"
                                                        },
                                                        "maxWindSpeed_mph": {
                                                            "type": "string"
                                                        },
                                                        "maxWindSpeed_knots": {
                                                            "type": "string"
                                                        },
                                                        "maxWindSpeed_ms": {
                                                            "type": "string"
                                                        },
                                                        "avgWindSpeed_kmph": {
                                                            "type": "string"
                                                        },
                                                        "avgWindSpeed_mph": {
                                                            "type": "string"
                                                        },
                                                        "avgWindSpeed_knots": {
                                                            "type": "string"
                                                        },
                                                        "avgWindSpeed_ms": {
                                                            "type": "string"
                                                        },
                                                        "avgWindGust_kmph": {
                                                            "type": "string"
                                                        },
                                                        "avgWindGust_mph": {
                                                            "type": "string"
                                                        },
                                                        "avgWindGust_knots": {
                                                            "type": "string"
                                                        },
                                                        "avgWindGust_ms": {
                                                            "type": "string"
                                                        },
                                                        "avgDailyRainfall": {
                                                            "type": "string"
                                                        },
                                                        "avgDailyRainfall_inch": {
                                                            "type": "string"
                                                        },
                                                        "avgMonthlyRainfall": {
                                                            "type": "string"
                                                        },
                                                        "avgMonthlyRainfall_inch": {
                                                            "type": "string"
                                                        },
                                                        "avgHumidity": {
                                                            "type": "string"
                                                        },
                                                        "avgCloud": {
                                                            "type": "string"
                                                        },
                                                        "avgVis_km": {
                                                            "type": "string"
                                                        },
                                                        "avgVis_miles": {
                                                            "type": "string"
                                                        },
                                                        "avgPressure_mb": {
                                                            "type": "string"
                                                        },
                                                        "avgPressure_inch": {
                                                            "type": "string"
                                                        },
                                                        "avgDryDays": {
                                                            "type": "string"
                                                        },
                                                        "avgRainDays": {
                                                            "type": "string"
                                                        },
                                                        "avgSnowDays": {
                                                            "type": "string"
                                                        },
                                                        "avgFogDays": {
                                                            "type": "string"
                                                        },
                                                        "avgThunderDays": {
                                                            "type": "string"
                                                        },
                                                        "avgUVIndex": {
                                                            "type": "string"
                                                        },
                                                        "avgSunHour": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TestTemplate')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "Sheet1",
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Question_rewind.xlsx",
                        "fileSystem": "test"
                    },
                    "firstRowAsHeader": true
                },
                "schema": [
                    {
                        "name": "QuestionsId",
                        "type": "String"
                    },
                    {
                        "name": "Title",
                        "type": "String"
                    },
                    {
                        "name": "Description",
                        "type": "String"
                    },
                    {
                        "name": "IsActive",
                        "type": "String"
                    },
                    {
                        "name": "Order",
                        "type": "String"
                    },
                    {
                        "name": "AnswerTypeId",
                        "type": "String"
                    },
                    {
                        "name": "ChoiceListId",
                        "type": "String"
                    },
                    {
                        "name": "Level",
                        "type": "String"
                    },
                    {
                        "name": "QuestionScore",
                        "type": "String"
                    },
                    {
                        "name": "KPIQuestion",
                        "type": "String"
                    },
                    {
                        "name": "ConditionalMapping",
                        "type": "String"
                    },
                    {
                        "name": "QuestionType",
                        "type": "String"
                    },
                    {
                        "name": "SubCategoryId",
                        "type": "String"
                    },
                    {
                        "name": "AuditorAnswerTypeId",
                        "type": "String"
                    },
                    {
                        "name": "AuditorChoiceListId",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Loadtemplte')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "AnswerType",
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "AnswerType.xlsx",
                        "fileSystem": "test"
                    },
                    "firstRowAsHeader": false
                },
                "schema": [
                    {
                        "name": "AnswerTypeId",
                        "type": "String"
                    },
                    {
                        "name": "AnswerTypeName",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/FacilityTemplate')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "Facility",
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "FacilityTemplate.xlsx",
                        "fileSystem": "test"
                    },
                    "firstRowAsHeader": true
                },
                "schema": [
                    {
                        "name": "FacilityId",
                        "type": "String"
                    },
                    {
                        "name": "AuditType",
                        "type": "String"
                    },
                    {
                        "name": "Company Name",
                        "type": "String"
                    },
                    {
                        "name": "Site Name",
                        "type": "String"
                    },
                    {
                        "name": "Parent Company Name",
                        "type": "String"
                    },
                    {
                        "name": "Street Address",
                        "type": "String"
                    },
                    {
                        "name": "City",
                        "type": "String"
                    },
                    {
                        "name": "State",
                        "type": "String"
                    },
                    {
                        "name": "Country",
                        "type": "String"
                    },
                    {
                        "name": "Postal Code",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ENBRIDGE_SMARTFETCH_DATA')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "index",
                        "type": "varchar"
                    },
                    {
                        "name": "url",
                        "type": "varchar"
                    },
                    {
                        "name": "published",
                        "type": "varchar"
                    },
                    {
                        "name": "title",
                        "type": "varchar"
                    },
                    {
                        "name": "content",
                        "type": "varchar"
                    },
                    {
                        "name": "root_url",
                        "type": "varchar"
                    },
                    {
                        "name": "lang",
                        "type": "varchar"
                    },
                    {
                        "name": "source_type",
                        "type": "varchar"
                    },
                    {
                        "name": "post_type",
                        "type": "varchar"
                    },
                    {
                        "name": "project",
                        "type": "varchar"
                    },
                    {
                        "name": "facebook_shares",
                        "type": "varchar"
                    },
                    {
                        "name": "facebook_likes",
                        "type": "varchar"
                    },
                    {
                        "name": "twitter_retweets",
                        "type": "varchar"
                    },
                    {
                        "name": "twitter_shares",
                        "type": "varchar"
                    },
                    {
                        "name": "facebook_followers",
                        "type": "varchar"
                    },
                    {
                        "name": "twitter_followers",
                        "type": "varchar"
                    },
                    {
                        "name": "continent",
                        "type": "varchar"
                    },
                    {
                        "name": "country",
                        "type": "varchar"
                    },
                    {
                        "name": "country_code",
                        "type": "varchar"
                    },
                    {
                        "name": "region",
                        "type": "varchar"
                    },
                    {
                        "name": "city",
                        "type": "varchar"
                    },
                    {
                        "name": "longitude",
                        "type": "varchar"
                    },
                    {
                        "name": "latitude",
                        "type": "varchar"
                    },
                    {
                        "name": "author_id",
                        "type": "varchar"
                    },
                    {
                        "name": "author_name",
                        "type": "varchar"
                    },
                    {
                        "name": "engagement",
                        "type": "varchar"
                    },
                    {
                        "name": "reach",
                        "type": "varchar"
                    },
                    {
                        "name": "search_date",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ENBRIDGE_SMARTFETCH_DATA"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SmartFetch')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Raw/Smart Fetch",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_TALKWALKER')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Extracted_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Indexed_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Published_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Search_Indexed_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Title_Snippet",
                        "type": "varchar"
                    },
                    {
                        "name": "Content_Snippet",
                        "type": "varchar"
                    },
                    {
                        "name": "Title",
                        "type": "varchar"
                    },
                    {
                        "name": "Content",
                        "type": "varchar"
                    },
                    {
                        "name": "Root_URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Domain_URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Host_URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Parent_URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Language",
                        "type": "varchar"
                    },
                    {
                        "name": "Porn_Level",
                        "type": "varchar"
                    },
                    {
                        "name": "Fluency_Level",
                        "type": "varchar"
                    },
                    {
                        "name": "Spam_Level",
                        "type": "varchar"
                    },
                    {
                        "name": "Sentiment",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_Type",
                        "type": "varchar"
                    },
                    {
                        "name": "Post_Type",
                        "type": "varchar"
                    },
                    {
                        "name": "Cluster_ID",
                        "type": "varchar"
                    },
                    {
                        "name": "Meta_Cluster_ID",
                        "type": "varchar"
                    },
                    {
                        "name": "Tags_Internal",
                        "type": "varchar"
                    },
                    {
                        "name": "Tags_Marking",
                        "type": "varchar"
                    },
                    {
                        "name": "Tags_Customer",
                        "type": "varchar"
                    },
                    {
                        "name": "Entity_URLS",
                        "type": "varchar"
                    },
                    {
                        "name": "Images_URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Images_Width",
                        "type": "varchar"
                    },
                    {
                        "name": "Images_Height",
                        "type": "varchar"
                    },
                    {
                        "name": "Images_Legend",
                        "type": "varchar"
                    },
                    {
                        "name": "Videos_URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Videos_Width",
                        "type": "varchar"
                    },
                    {
                        "name": "Videos_Height",
                        "type": "varchar"
                    },
                    {
                        "name": "Videos_Legend",
                        "type": "varchar"
                    },
                    {
                        "name": "Pagemonitoring_Sitemon_Site_ID",
                        "type": "varchar"
                    },
                    {
                        "name": "Matched_Profile",
                        "type": "varchar"
                    },
                    {
                        "name": "Facebook_Shares",
                        "type": "varchar"
                    },
                    {
                        "name": "Facebook_Likes",
                        "type": "varchar"
                    },
                    {
                        "name": "Twitter_Retweets",
                        "type": "varchar"
                    },
                    {
                        "name": "URL_Views",
                        "type": "varchar"
                    },
                    {
                        "name": "Pinterest_Likes",
                        "type": "varchar"
                    },
                    {
                        "name": "Pinterest_Pins",
                        "type": "varchar"
                    },
                    {
                        "name": "Pinterest_Repins",
                        "type": "varchar"
                    },
                    {
                        "name": "Youtube_Views",
                        "type": "varchar"
                    },
                    {
                        "name": "Youtube_Likes",
                        "type": "varchar"
                    },
                    {
                        "name": "Youtube_Dislikes",
                        "type": "varchar"
                    },
                    {
                        "name": "Instagram_Likes",
                        "type": "varchar"
                    },
                    {
                        "name": "Twitter_Shares",
                        "type": "varchar"
                    },
                    {
                        "name": "Number_Comments",
                        "type": "varchar"
                    },
                    {
                        "name": "Alexa_Pageviews",
                        "type": "varchar"
                    },
                    {
                        "name": "Facebook_Followers",
                        "type": "varchar"
                    },
                    {
                        "name": "Twitter_Followers",
                        "type": "varchar"
                    },
                    {
                        "name": "Instagram_Followers",
                        "type": "varchar"
                    },
                    {
                        "name": "Pinterest_Followers",
                        "type": "varchar"
                    },
                    {
                        "name": "Article_Continent",
                        "type": "varchar"
                    },
                    {
                        "name": "Article_Country",
                        "type": "varchar"
                    },
                    {
                        "name": "Article_Country_Code",
                        "type": "varchar"
                    },
                    {
                        "name": "Article_Region",
                        "type": "varchar"
                    },
                    {
                        "name": "Article_City",
                        "type": "varchar"
                    },
                    {
                        "name": "Article_Longitude",
                        "type": "varchar"
                    },
                    {
                        "name": "Article_Latitude",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_ID",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Type",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Birthdate_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Birthdate_Resolution",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Gender",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Image_URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Short_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Continent",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Country",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Country_Code",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Region",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_City",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Longitude",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Latitude",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_Continent",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_Country",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_Country_Code",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_Region",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_City",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_Longitude",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_Latitude",
                        "type": "varchar"
                    },
                    {
                        "name": "Engagement",
                        "type": "varchar"
                    },
                    {
                        "name": "Reach",
                        "type": "varchar"
                    },
                    {
                        "name": "Provider",
                        "type": "varchar"
                    },
                    {
                        "name": "Generator_Type",
                        "type": "varchar"
                    },
                    {
                        "name": "Alexa_Unique_Visitors",
                        "type": "varchar"
                    },
                    {
                        "name": "Twitter_Likes",
                        "type": "varchar"
                    },
                    {
                        "name": "Author_Description",
                        "type": "varchar"
                    },
                    {
                        "name": "Linkedin_Shares",
                        "type": "varchar"
                    },
                    {
                        "name": "Source_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Word_Count",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Rating",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ENBRIDGE_TALKWALKER_DUMP"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dataflow2')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_WEBSEARCH",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "STG_ESG_WEBSEARCH",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "DerivedColumn1"
                        }
                    ],
                    "script": "source(output(\n\t\t{Company Name} as string,\n\t\t{Report Id} as string,\n\t\tKeyword as string,\n\t\t{Search Type} as string,\n\t\t{API Engine} as string,\n\t\tURL as string,\n\t\tArticle as string,\n\t\tAuthors as string,\n\t\t{Published Date} as string,\n\t\t{Modified Date} as string,\n\t\t{Title Page} as string,\n\t\t{Publication Name} as string,\n\t\tHeadlines as string,\n\t\tURL_Keywords as string,\n\t\tSummary as string,\n\t\t{Source DomainDescription} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_Smart_Fetch_Data/esg_websearch_data/*.csv']) ~> source1\nsource1 derive(CreatedDateTime = currentUTC()) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tCompany_Name as string,\n\t\tReport_id as string,\n\t\tKeyword as string,\n\t\tSearch_Type as string,\n\t\tAPI_Engine as string,\n\t\tURL as string,\n\t\tArticle as string,\n\t\tAuthors as string,\n\t\tPublished_Date as string,\n\t\tModified_Date as string,\n\t\tTitle_Page as string,\n\t\tPublication_Name as string,\n\t\tHeadlines as string,\n\t\tURL_Keywords as string,\n\t\tSummary as string,\n\t\tSource_Domain_Description as string,\n\t\tCreatedDateTime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCompany_Name = {Company Name},\n\t\tReport_id = {Report Id},\n\t\tKeyword,\n\t\tSearch_Type = {Search Type},\n\t\tAPI_Engine = {API Engine},\n\t\tURL,\n\t\tArticle,\n\t\tAuthors,\n\t\tPublished_Date = {Published Date},\n\t\tModified_Date = {Modified Date},\n\t\tTitle_Page = {Title Page},\n\t\tPublication_Name = {Publication Name},\n\t\tHeadlines,\n\t\tURL_Keywords,\n\t\tSummary,\n\t\tSource_Domain_Description = {Source DomainDescription},\n\t\tCreatedDateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ESG_WEBSEARCH')]",
                "[concat(variables('factoryId'), '/datasets/STG_ESG_WEBSEARCH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_POSITIVESEARCH_PIPELINE')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ESG_DATA_FLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_WEBSEARCH",
                                "type": "DatasetReference"
                            },
                            "name": "WebSearch"
                        },
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_SOCAILMEDIA",
                                "type": "DatasetReference"
                            },
                            "name": "SocialMedia"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_SOCILA_MEDIA",
                                "type": "DatasetReference"
                            },
                            "name": "SocialMediaSink"
                        },
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQl_WEB_SEARCH",
                                "type": "DatasetReference"
                            },
                            "name": "WebsearchSink"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "ColumnTransformationWebSearch"
                        },
                        {
                            "name": "ColumnTransformationSocialMedia"
                        },
                        {
                            "name": "RemoveColumnSocialMedia",
                            "description": "Autogenerated by data preview actions"
                        },
                        {
                            "name": "RemoveColumnWebSearch"
                        }
                    ],
                    "script": "source(output(\n\t\t{Company Name} as string,\n\t\t{Report Id} as string,\n\t\tKeyword as string,\n\t\t{Search Type} as string,\n\t\t{API Engine} as string,\n\t\tURL as string,\n\t\tArticle as string,\n\t\tAuthors as string,\n\t\t{Published Date} as string,\n\t\t{Modified Date} as string,\n\t\t{Title Page} as string,\n\t\t{Publication Name} as string,\n\t\tHeadlines as string,\n\t\tURL_Keywords as string,\n\t\tSummary as string,\n\t\t{Source DomainDescription} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_SmartFetch_PositiveSearch/esg_websearch_data','Archive_Data/Archive_WebSearch'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_SmartFetch_PositiveSearch/esg_websearch_data/*.csv']) ~> WebSearch\nsource(output(\n\t\t{Company Name} as string,\n\t\t{Report Id} as string,\n\t\tKeyword as string,\n\t\t{Search Type} as string,\n\t\t{API Engine} as string,\n\t\tURL as string,\n\t\tArticle as string,\n\t\tAuthors as string,\n\t\t{Published Date} as string,\n\t\t{Modified Date} as string,\n\t\t{Title Page} as string,\n\t\t{Publication Name} as string,\n\t\tHeadlines as string,\n\t\tURL_Keywords as string,\n\t\tSummary as string,\n\t\t{Source DomainDescription} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_SmartFetch_PositiveSearch/esg_socialmedia_data','Archive_Data/Archive_SocialMedia'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_SmartFetch_PositiveSearch/esg_socialmedia_data/*.csv']) ~> SocialMedia\nWebSearch derive(CreatedDateTime = currentUTC(),\n\t\t{Published Date} = toString(toTimestamp({Published Date},'yyyy-MM-dd HH:mm:SS'),'dd-MM-yyyy HH:mm:SS'),\n\t\t{Modified Date} = toString(toTimestamp({Modified Date},'yyyy-MM-dd HH:mm:SS'),'dd-MM-yyyy HH:mm:SS')) ~> ColumnTransformationWebSearch\nSocialMedia derive(CreatedDateTime = currentUTC(),\n\t\t{Published Date} = toString(toTimestamp({Published Date},'yyyy-MM-dd HH:mm:SS'),'dd-MM-yyyy HH:mm:SS'),\n\t\t{Modified Date} = toString(toTimestamp({Modified Date},'yyyy-MM-dd HH:mm:SS'),'dd-MM-yyyy HH:mm:SS')) ~> ColumnTransformationSocialMedia\nColumnTransformationSocialMedia select(mapColumn(\n\t\t{Company Name},\n\t\t{Report Id},\n\t\tKeyword,\n\t\t{Search Type},\n\t\t{API Engine},\n\t\tURL,\n\t\tArticle,\n\t\tAuthors,\n\t\t{Published Date},\n\t\t{Modified Date},\n\t\t{Title Page},\n\t\t{Publication Name},\n\t\tHeadlines,\n\t\tURL_Keywords,\n\t\tSummary,\n\t\t{Source DomainDescription},\n\t\tCreatedDateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumnSocialMedia\nColumnTransformationWebSearch select(mapColumn(\n\t\t{Company Name},\n\t\t{Report Id},\n\t\tKeyword,\n\t\t{Search Type},\n\t\t{API Engine},\n\t\tURL,\n\t\tArticle,\n\t\tAuthors,\n\t\t{Published Date},\n\t\t{Modified Date},\n\t\t{Title Page},\n\t\t{Publication Name},\n\t\tHeadlines,\n\t\tURL_Keywords,\n\t\tSummary,\n\t\t{Source DomainDescription},\n\t\tCreatedDateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumnWebSearch\nRemoveColumnSocialMedia sink(input(\n\t\tSocial_Search_id as integer,\n\t\tKeyword as string,\n\t\tSearch_Type as string,\n\t\tAPI_Engine as string,\n\t\tURL as string,\n\t\tArticle as string,\n\t\tAuthors as string,\n\t\tPublished_Date as string,\n\t\tModified_Date as string,\n\t\tTitle_Page as string,\n\t\tPublication_Name as string,\n\t\tHeadlines as string,\n\t\tURL_Keywords as string,\n\t\tSummary as string,\n\t\tSource_Domain_Description as string,\n\t\tReport_id as string,\n\t\tCreatedDateTime as timestamp,\n\t\tModifiedDateTime as timestamp,\n\t\tCompany_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tKeyword,\n\t\tSearch_Type = {Search Type},\n\t\tAPI_Engine = {API Engine},\n\t\tURL,\n\t\tArticle,\n\t\tAuthors,\n\t\tPublished_Date = {Published Date},\n\t\tModified_Date = {Modified Date},\n\t\tTitle_Page = {Title Page},\n\t\tPublication_Name = {Publication Name},\n\t\tHeadlines,\n\t\tURL_Keywords,\n\t\tSummary,\n\t\tSource_Domain_Description = {Source DomainDescription},\n\t\tReport_id = {Report Id},\n\t\tCreatedDateTime,\n\t\tCompany_Name = {Company Name}\n\t),\n\tdateFormat:'dd-MM-yyyy',\n\ttimestampFormat:'dd-MM-yyyy',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SocialMediaSink\nRemoveColumnWebSearch sink(input(\n\t\tWeb_Search_id as integer,\n\t\tKeyword as string,\n\t\tSearch_Type as string,\n\t\tAPI_Engine as string,\n\t\tURL as string,\n\t\tArticle as string,\n\t\tAuthors as string,\n\t\tPublished_Date as string,\n\t\tModified_Date as string,\n\t\tTitle_Page as string,\n\t\tPublication_Name as string,\n\t\tHeadlines as string,\n\t\tURL_Keywords as string,\n\t\tSummary as string,\n\t\tSource_Domain_Description as string,\n\t\tDescription as string,\n\t\tSource_Domain as string,\n\t\tReport_id as string,\n\t\tCreatedDateTime as timestamp,\n\t\tModifiedDateTime as timestamp,\n\t\tCompany_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tKeyword,\n\t\tSearch_Type = {Search Type},\n\t\tAPI_Engine = {API Engine},\n\t\tURL,\n\t\tArticle,\n\t\tAuthors,\n\t\tPublished_Date = {Published Date},\n\t\tModified_Date = {Modified Date},\n\t\tTitle_Page = {Title Page},\n\t\tPublication_Name = {Publication Name},\n\t\tHeadlines,\n\t\tURL_Keywords,\n\t\tSummary,\n\t\tSource_Domain_Description = {Source DomainDescription},\n\t\tReport_id = {Report Id},\n\t\tCreatedDateTime,\n\t\tCompany_Name = {Company Name}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WebsearchSink"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ESG_WEBSEARCH')]",
                "[concat(variables('factoryId'), '/datasets/DS_ESG_SOCAILMEDIA')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_SOCILA_MEDIA')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQl_WEB_SEARCH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_NEGATIVESEARCH_PIPELINE')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ESG_DATA_FLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_NEGATIVESEARCH",
                                "type": "DatasetReference"
                            },
                            "name": "Negativesearch"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_NEGATIVE_SEARCH",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "ColumnTransformation"
                        },
                        {
                            "name": "RemoveColumn"
                        }
                    ],
                    "script": "source(output(\n\t\t{Company Name} as string,\n\t\t{Report Id} as integer,\n\t\tKeyword as string,\n\t\t{Search Type} as string,\n\t\t{API Engine} as string,\n\t\tURL as string,\n\t\tArticle as string,\n\t\tAuthors as string,\n\t\t{Published Date} as string,\n\t\t{Modified Date} as string,\n\t\t{Title Page} as string,\n\t\t{Publication Name} as string,\n\t\tHeadlines as string,\n\t\tURL_Keywords as string,\n\t\tSummary as string,\n\t\t{Source Domain} as string,\n\t\tDescription as string,\n\t\tquestion_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_SmartFetch_NegativeSearch','Archive_Data/Archive_Negativesearch'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_SmartFetch_NegativeSearch/*.csv']) ~> Negativesearch\nNegativesearch derive(CreateDateTime = currentUTC()) ~> ColumnTransformation\nColumnTransformation select(mapColumn(\n\t\t{Company Name},\n\t\t{Report Id},\n\t\tKeyword,\n\t\t{Search Type},\n\t\t{API Engine},\n\t\tURL,\n\t\tArticle,\n\t\tAuthors,\n\t\t{Published Date},\n\t\t{Modified Date},\n\t\t{Title Page},\n\t\t{Publication Name},\n\t\tHeadlines,\n\t\tURL_Keywords,\n\t\tSummary,\n\t\t{Source Domain},\n\t\tDescription,\n\t\tquestion_id,\n\t\tCreateDateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumn\nRemoveColumn sink(input(\n\t\tNegative_Search_id as integer,\n\t\tCompany_Name as string,\n\t\tKeyword as string,\n\t\tSearch_Type as string,\n\t\tAPI_Engine as string,\n\t\tURL as string,\n\t\tArticle as string,\n\t\tAuthors as string,\n\t\tPublished_Date as string,\n\t\tModified_Date as string,\n\t\tTitle_Page as string,\n\t\tPublication_Name as string,\n\t\tHeadlines as string,\n\t\tURL_Keywords as string,\n\t\tSummary as string,\n\t\tSource_Domain_Description as string,\n\t\tDescription as string,\n\t\tSource_Domain as string,\n\t\tCreatedDateTime as timestamp,\n\t\tquestion_id as integer,\n\t\tReport_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCompany_Name = {Company Name},\n\t\tKeyword,\n\t\tSearch_Type = {Search Type},\n\t\tAPI_Engine = {API Engine},\n\t\tURL,\n\t\tArticle,\n\t\tAuthors,\n\t\tPublished_Date = {Published Date},\n\t\tModified_Date = {Modified Date},\n\t\tTitle_Page = {Title Page},\n\t\tPublication_Name = {Publication Name},\n\t\tHeadlines,\n\t\tURL_Keywords,\n\t\tSummary,\n\t\tSource_Domain_Description = {Source Domain},\n\t\tDescription,\n\t\tSource_Domain = {Source Domain},\n\t\tCreatedDateTime = CreateDateTime,\n\t\tquestion_id,\n\t\tReport_id = {Report Id}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ESG_NEGATIVESEARCH')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_NEGATIVE_SEARCH')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_NEGATIVESCREENING_URL_PIPELINE')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ESG_DATA_FLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_NEGATIVEURL_UNGlobalcompact",
                                "type": "DatasetReference"
                            },
                            "name": "UNGlobalcompact"
                        },
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_NEGATIVEURL_OECDWatch",
                                "type": "DatasetReference"
                            },
                            "name": "OECDWatch"
                        },
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_NEGATIVEURL_Humanrights",
                                "type": "DatasetReference"
                            },
                            "name": "Humanrights"
                        },
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_NEGATIVEURl_BankTrack",
                                "type": "DatasetReference"
                            },
                            "name": "Banktrack"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_UnGlobalcompact",
                                "type": "DatasetReference"
                            },
                            "name": "UNGlobalSink"
                        },
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_OECDWatch",
                                "type": "DatasetReference"
                            },
                            "name": "OECDSink"
                        },
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_Humanrights",
                                "type": "DatasetReference"
                            },
                            "name": "HumanrightsSink"
                        },
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_BankTrack",
                                "type": "DatasetReference"
                            },
                            "name": "BanktrackSink"
                        }
                    ],
                    "transformations": [],
                    "script": "source(output(\n\t\tReport_Id as integer,\n\t\tCompany_Name as string,\n\t\t{Company Exist} as string,\n\t\t{Delist Date} as string,\n\t\t{Delist Link} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_NegativeCustom_URL/UNGlobalcompact/','Archive_Data/Archive_Negative_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_NegativeCustom_URL/UNGlobalcompact/*.csv']) ~> UNGlobalcompact\nsource(output(\n\t\tReport_Id as integer,\n\t\tCompany_Name as string,\n\t\t{Company Exist} as string,\n\t\tCase_Title as string,\n\t\tCase_Date as string,\n\t\tCase_Issue as string,\n\t\tCase_Summary as string,\n\t\tCase_Link as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_NegativeCustom_URL/OECDWatch','Archive_Data/Archive_Negative_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_NegativeCustom_URL/OECDWatch/*.csv']) ~> OECDWatch\nsource(output(\n\t\tReport_Id as integer,\n\t\tCompany_Name as string,\n\t\t{Company Exist} as string,\n\t\tStory_Date as string,\n\t\tStory_Summary as string,\n\t\tStory_Link as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_NegativeCustom_URL/Humanrights','Archive_Data/Archive_Negative_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_NegativeCustom_URL/Humanrights/*.csv']) ~> Humanrights\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_NegativeCustom_URL/BankTrack','Archive_Data/Archive_Negative_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_NegativeCustom_URL/BankTrack/*.csv']) ~> Banktrack\nUNGlobalcompact sink(input(\n\t\tunglobalcompact_id as integer,\n\t\tDelist_Date as string,\n\t\tDelist_Link as string,\n\t\tcompany_exist as string,\n\t\tReport_id as integer,\n\t\tCompany_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDelist_Date = {Delist Date},\n\t\tDelist_Link = {Delist Link},\n\t\tcompany_exist = {Company Exist},\n\t\tReport_id = Report_Id,\n\t\tCompany_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UNGlobalSink\nOECDWatch sink(input(\n\t\toecdwatch_id as integer,\n\t\tDate_of_complaint_filed as string,\n\t\tSummary as string,\n\t\tweblink as string,\n\t\tcompany_exist as string,\n\t\tReport_id as integer,\n\t\tCompany_Name as string,\n\t\tCase_Issue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDate_of_complaint_filed = Case_Date,\n\t\tSummary = Case_Summary,\n\t\tweblink = Case_Link,\n\t\tcompany_exist = {Company Exist},\n\t\tReport_id = Report_Id,\n\t\tCompany_Name,\n\t\tCase_Issue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> OECDSink\nHumanrights sink(input(\n\t\thumanrights_id as integer,\n\t\tDate_of_story as string,\n\t\tSummary as string,\n\t\tweblink as string,\n\t\tcompany_exist as string,\n\t\tReport_id as integer,\n\t\tCompany_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDate_of_story = Story_Date,\n\t\tSummary = Story_Summary,\n\t\tweblink = Story_Link,\n\t\tcompany_exist = {Company Exist},\n\t\tReport_id = Report_Id,\n\t\tCompany_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> HumanrightsSink\nBanktrack sink(input(\n\t\tbanktrack_id as integer,\n\t\tLast_update as string,\n\t\tSummary as string,\n\t\tweblink as string,\n\t\tcompany_exist as string,\n\t\tReport_id as integer,\n\t\tCompany_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> BanktrackSink"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_NEGATIVEURL_UNGlobalcompact')]",
                "[concat(variables('factoryId'), '/datasets/DS_ESG_NEGATIVEURL_OECDWatch')]",
                "[concat(variables('factoryId'), '/datasets/DS_ESG_NEGATIVEURL_Humanrights')]",
                "[concat(variables('factoryId'), '/datasets/DS_ESG_NEGATIVEURl_BankTrack')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_UnGlobalcompact')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_OECDWatch')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_Humanrights')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_BankTrack')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_REGULATORY_URLS')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ESG_DATA_FLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ESG_DS_Beaches",
                                "type": "DatasetReference"
                            },
                            "name": "Breaches"
                        },
                        {
                            "dataset": {
                                "referenceName": "ESG_DS_Case",
                                "type": "DatasetReference"
                            },
                            "name": "Case"
                        },
                        {
                            "dataset": {
                                "referenceName": "ESG_DS_CaseDetails",
                                "type": "DatasetReference"
                            },
                            "name": "CaseDetails"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_BREACHES",
                                "type": "DatasetReference"
                            },
                            "name": "BREACHSINK"
                        },
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_CASE",
                                "type": "DatasetReference"
                            },
                            "name": "CASESINK"
                        },
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_CASEDETAILS",
                                "type": "DatasetReference"
                            },
                            "name": "CASEDETAILSSINK"
                        }
                    ],
                    "transformations": [],
                    "script": "source(output(\n\t\t{Case/Breach} as string,\n\t\t{Defendant's Name} as string,\n\t\t{Hearing Date} as string,\n\t\tResult as string,\n\t\t{Fine £} as string,\n\t\t{Act or Regulation} as string,\n\t\tReport_ID as integer,\n\t\tCustom_URL as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_PositiveCustom_URL/HSE/Breaches','Archive_Data/Archive_Regulatory_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_PositiveCustom_URL/HSE/Breaches/*.csv']) ~> Breaches\nsource(output(\n\t\t{Case Number} as integer,\n\t\t{Defendant's Name} as string,\n\t\t{Offence Date} as string,\n\t\t{Local Authority} as string,\n\t\t{Main Activity} as string,\n\t\tcategory as string,\n\t\tReport_ID as integer,\n\t\tCustom_URL as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_PositiveCustom_URL/HSE/Case','Archive_Data/Archive_Regulatory_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_PositiveCustom_URL/HSE/Case/*.csv']) ~> Case\nsource(output(\n\t\tcase as string,\n\t\tDefendant as string,\n\t\tDescription as string,\n\t\t{Offence Date} as string,\n\t\t{Total Fine} as string,\n\t\t{Breaches involved in this Case} as string,\n\t\t{Location of Offence} as string,\n\t\tAddress as string,\n\t\t{Local Authority} as string,\n\t\tIndustry as string,\n\t\t{Main Activity} as string,\n\t\t{Type of Location} as string,\n\t\t{HSE Details} as string,\n\t\t{HSE Group} as string,\n\t\t{HSE Area} as string,\n\t\t{Total Costs Awarded to HSE} as string,\n\t\tRegion as string,\n\t\t{HSE Directorate} as string,\n\t\t{HSE Division} as string,\n\t\tReport_ID as integer,\n\t\tCustom_URL as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_PositiveCustom_URL/HSE/CaseDetails','Archive_Data/Archive_Regulatory_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_PositiveCustom_URL/HSE/CaseDetails/*.csv']) ~> CaseDetails\nBreaches sink(input(\n\t\tBreach_id as integer,\n\t\tCase_Number as string,\n\t\tDefendants_Name as string,\n\t\tHearing_Date as string,\n\t\tResult as string,\n\t\tFine as string,\n\t\tAct_or_Regulation as string,\n\t\tReport_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCase_Number = {Case/Breach},\n\t\tDefendants_Name = {Defendant's Name},\n\t\tHearing_Date = {Hearing Date},\n\t\tResult,\n\t\tFine = {Fine £},\n\t\tAct_or_Regulation = {Act or Regulation},\n\t\tReport_id = Report_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> BREACHSINK\nCase sink(input(\n\t\tCase_id as integer,\n\t\tCase_Number as string,\n\t\tDefendants_Name as string,\n\t\tOffence_Date as string,\n\t\tLocal_Authority as string,\n\t\tMain_Activity as string,\n\t\tCategory as string,\n\t\tCustom_URL as string,\n\t\tReport_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCase_Number = {Case Number},\n\t\tDefendants_Name = {Defendant's Name},\n\t\tOffence_Date = {Offence Date},\n\t\tLocal_Authority = {Local Authority},\n\t\tMain_Activity = {Main Activity},\n\t\tCategory = category,\n\t\tCustom_URL,\n\t\tReport_id = Report_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> CASESINK\nCaseDetails sink(input(\n\t\tCase_details_id as integer,\n\t\tCase_Number as string,\n\t\tDefendants_Name as string,\n\t\tDescription as string,\n\t\tOffence_Date as string,\n\t\tTotal_Fine as string,\n\t\tBreaches_involved as string,\n\t\tLocation as string,\n\t\tAddress as string,\n\t\tLocal_Authority as string,\n\t\tIndustry as string,\n\t\tMain_Activity as string,\n\t\tType_of_Location as string,\n\t\tHSE_Details as string,\n\t\tHSE_Group as string,\n\t\tHSE_Area as string,\n\t\tTotal_Costs_Awarded_to_HSE as string,\n\t\tRegion as string,\n\t\tHSE_Directorate as string,\n\t\tHSE_Division as string,\n\t\tReport_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCase_Number = case,\n\t\tDefendants_Name = Defendant,\n\t\tDescription,\n\t\tOffence_Date = {Offence Date},\n\t\tTotal_Fine = {Total Fine},\n\t\tBreaches_involved = {Breaches involved in this Case},\n\t\tLocation = {Location of Offence},\n\t\tAddress,\n\t\tLocal_Authority = {Local Authority},\n\t\tIndustry,\n\t\tMain_Activity = {Main Activity},\n\t\tType_of_Location = {Type of Location},\n\t\tHSE_Details = {HSE Details},\n\t\tHSE_Group = {HSE Group},\n\t\tHSE_Area = {HSE Area},\n\t\tTotal_Costs_Awarded_to_HSE = {Total Costs Awarded to HSE},\n\t\tRegion,\n\t\tHSE_Directorate = {HSE Directorate},\n\t\tHSE_Division = {HSE Division},\n\t\tReport_id = Report_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> CASEDETAILSSINK"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ESG_DS_Beaches')]",
                "[concat(variables('factoryId'), '/datasets/ESG_DS_Case')]",
                "[concat(variables('factoryId'), '/datasets/ESG_DS_CaseDetails')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_BREACHES')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_CASE')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_CASEDETAILS')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/GenericSCDType2')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "GenericSCD"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "KEYWORDS_SCD",
                                "type": "DatasetReference"
                            },
                            "name": "GenericInput"
                        },
                        {
                            "dataset": {
                                "referenceName": "SqlDimension",
                                "type": "DatasetReference"
                            },
                            "name": "ExistingDimensionTable"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "SqlDimension",
                                "type": "DatasetReference"
                            },
                            "name": "DimensionTableSink"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "NewAndUpdatedRows"
                        },
                        {
                            "name": "AddHashInput"
                        },
                        {
                            "name": "AddHashExisting"
                        },
                        {
                            "name": "GetMaxSurrogateKey"
                        },
                        {
                            "name": "AddKey"
                        },
                        {
                            "name": "JoinWithMaxSurrogateKey"
                        },
                        {
                            "name": "AddDimensionColumns"
                        },
                        {
                            "name": "FilterForUpdatedValues"
                        },
                        {
                            "name": "UpdateObsolete"
                        },
                        {
                            "name": "DropUnwantedColsInput"
                        },
                        {
                            "name": "UnionAllData"
                        },
                        {
                            "name": "MarkAsUpdate"
                        },
                        {
                            "name": "DropUnwantedColumns"
                        },
                        {
                            "name": "MarkAsInsert"
                        },
                        {
                            "name": "FilterForActive"
                        },
                        {
                            "name": "ModifyColumns1",
                            "description": "Autogenerated by data preview actions"
                        },
                        {
                            "name": "SurrogateKey1"
                        },
                        {
                            "name": "ModifyColumns2",
                            "description": "Autogenerated by data preview actions"
                        }
                    ],
                    "script": "parameters{\n\tPrimaryKey as string ('Key'),\n\tColumns as string ('KeywordType,Keywords')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select distinct keywords from TEMP_V_ESG_FINAL_TEST',\n\tformat: 'query') ~> GenericInput\nsource(output(\n\t\tKeyword_id as integer,\n\t\tKey as integer,\n\t\tActive as integer,\n\t\tActiveStartTime as timestamp,\n\t\tActiveEndTime as timestamp,\n\t\tkeywords as string,\n\t\tKeywordType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingDimensionTable\nAddHashInput, AddHashExisting exists(AddHashInput@id_hash == AddHashExisting@id_hash\n\t&& AddHashInput@columns_hash == AddHashExisting@columns_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewAndUpdatedRows\nGenericInput derive(id_hash = md5(byName($PrimaryKey)),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashInput\nFilterForActive derive(id_hash = md5(byNames(split($PrimaryKey,','))),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashExisting\nAddHashExisting aggregate(MaxSurrogateKey = max(toInteger(byName('Key')))) ~> GetMaxSurrogateKey\nNewAndUpdatedRows keyGenerate(output(Key as long),\n\tstartAt: 1L) ~> AddKey\nModifyColumns1, GetMaxSurrogateKey join(Key == MaxSurrogateKey || true(),\n\tjoinType:'cross',\n\tbroadcast: 'right')~> JoinWithMaxSurrogateKey\nJoinWithMaxSurrogateKey derive(Key = Key + MaxSurrogateKey,\n\t\tActive = 1,\n\t\tActiveStartTime = currentUTC(),\n\t\tActiveEndTime = toTimestamp(toString(null()))) ~> AddDimensionColumns\nAddHashExisting, NewAndUpdatedRows exists(AddHashExisting@id_hash == AddHashInput@id_hash,\n\tnegate:false,\n\tbroadcast: 'auto')~> FilterForUpdatedValues\nFilterForUpdatedValues derive(Active = 0,\n\t\tActiveEndTime = currentUTC()) ~> UpdateObsolete\nAddDimensionColumns select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColsInput\nMarkAsInsert, DropUnwantedColumns union(byName: true)~> UnionAllData\nUpdateObsolete alterRow(updateIf(true())) ~> MarkAsUpdate\nMarkAsUpdate select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColumns\nDropUnwantedColsInput alterRow(insertIf(true())) ~> MarkAsInsert\nExistingDimensionTable filter(toInteger(byName('Active')) == 1) ~> FilterForActive\nAddKey derive(Key = toInteger(Key)) ~> ModifyColumns1\nUnionAllData keyGenerate(output(Keyword_id as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 derive(Keyword_id = toInteger(Keyword_id)) ~> ModifyColumns2\nModifyColumns2 sink(input(\n\t\tKeyword_id as integer,\n\t\tKey as integer,\n\t\tActive as integer,\n\t\tActiveStartTime as timestamp,\n\t\tActiveEndTime as timestamp,\n\t\tkeywords as string,\n\t\tKeywordType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:[($PrimaryKey)],\n\tformat: 'table',\n\tmapColumn(\n\t\tKeyword_id,\n\t\tKey,\n\t\tActive,\n\t\tActiveStartTime,\n\t\tActiveEndTime,\n\t\tkeywords,\n\t\tKeywordType\n\t),\n\tdateFormat:'MM/dd/yyyy',\n\ttimestampFormat:'MM/dd/yyyy',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DimensionTableSink"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/KEYWORDS_SCD')]",
                "[concat(variables('factoryId'), '/datasets/SqlDimension')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_NEGATIVESCREENING_URL_UNGlobalCompact')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ESG_DATA_FLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_NEGATIVEURL_UNGlobalcompact",
                                "type": "DatasetReference"
                            },
                            "name": "UNGlobalcompact"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_UnGlobalcompact",
                                "type": "DatasetReference"
                            },
                            "name": "UNGlobalSink"
                        }
                    ],
                    "transformations": [],
                    "script": "source(output(\n\t\tReport_Id as integer,\n\t\tCompany_Name as string,\n\t\t{Company Exist} as string,\n\t\t{Delist Date} as string,\n\t\t{Delist Link} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_NegativeCustom_URL/UNGlobalcompact/','Archive_Data/Archive_Negative_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_NegativeCustom_URL/UNGlobalcompact/*.csv']) ~> UNGlobalcompact\nUNGlobalcompact sink(input(\n\t\tunglobalcompact_id as integer,\n\t\tDelist_Date as string,\n\t\tDelist_Link as string,\n\t\tcompany_exist as string,\n\t\tReport_id as integer,\n\t\tCompany_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDelist_Date = {Delist Date},\n\t\tDelist_Link = {Delist Link},\n\t\tcompany_exist = {Company Exist},\n\t\tReport_id = Report_Id,\n\t\tCompany_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> UNGlobalSink"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_NEGATIVEURL_UNGlobalcompact')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_UnGlobalcompact')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_NEGATIVESCREENING_URL_OECDWatch')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ESG_DATA_FLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_NEGATIVEURL_OECDWatch",
                                "type": "DatasetReference"
                            },
                            "name": "OECDWatch"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_OECDWatch",
                                "type": "DatasetReference"
                            },
                            "name": "OECDSink"
                        }
                    ],
                    "transformations": [],
                    "script": "source(output(\n\t\tReport_Id as integer,\n\t\tCompany_Name as string,\n\t\t{Company Exist} as string,\n\t\tCase_Title as string,\n\t\tCase_Date as string,\n\t\tCase_Issue as string,\n\t\tCase_Summary as string,\n\t\tCase_Link as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_NegativeCustom_URL/OECDWatch','Archive_Data/Archive_Negative_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_NegativeCustom_URL/OECDWatch/*.csv']) ~> OECDWatch\nOECDWatch sink(input(\n\t\toecdwatch_id as integer,\n\t\tDate_of_complaint_filed as string,\n\t\tSummary as string,\n\t\tweblink as string,\n\t\tcompany_exist as string,\n\t\tReport_id as integer,\n\t\tCompany_Name as string,\n\t\tCase_Issue as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDate_of_complaint_filed = Case_Date,\n\t\tSummary = Case_Summary,\n\t\tweblink = Case_Link,\n\t\tcompany_exist = {Company Exist},\n\t\tReport_id = Report_Id,\n\t\tCompany_Name,\n\t\tCase_Issue\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> OECDSink"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ESG_NEGATIVEURL_OECDWatch')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_OECDWatch')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_NEGATIVESCREENING_URL_Humanrights')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ESG_DATA_FLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_ESG_NEGATIVEURL_Humanrights",
                                "type": "DatasetReference"
                            },
                            "name": "Humanrights"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ESG_AZ_SQL_Humanrights",
                                "type": "DatasetReference"
                            },
                            "name": "HumanrightsSink"
                        }
                    ],
                    "transformations": [],
                    "script": "source(output(\n\t\tReport_Id as integer,\n\t\tCompany_Name as string,\n\t\t{Company Exist} as string,\n\t\tStory_Date as string,\n\t\tStory_Summary as string,\n\t\tStory_Link as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['ESG_NegativeCustom_URL/Humanrights','Archive_Data/Archive_Negative_URL'],\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['ESG_NegativeCustom_URL/Humanrights/*.csv']) ~> Humanrights\nHumanrights sink(input(\n\t\thumanrights_id as integer,\n\t\tDate_of_story as string,\n\t\tSummary as string,\n\t\tweblink as string,\n\t\tcompany_exist as string,\n\t\tReport_id as integer,\n\t\tCompany_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tDate_of_story = Story_Date,\n\t\tSummary = Story_Summary,\n\t\tweblink = Story_Link,\n\t\tcompany_exist = {Company Exist},\n\t\tReport_id = Report_Id,\n\t\tCompany_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> HumanrightsSink"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_ESG_NEGATIVEURL_Humanrights')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQL_Humanrights')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dataflow3')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "RipTinto",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AzureSqlTable3",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [],
                    "script": "source(output(\n\t\tverification_nid as string,\n\t\tverification_type as string,\n\t\tcritical_control as string,\n\t\tverifier as string,\n\t\tverifier_id as string,\n\t\tcritical_risk as string,\n\t\tsite as string,\n\t\tsite_level_1 as string,\n\t\tsite_level_2 as string,\n\t\tsite_level_3 as string,\n\t\tverifiers_employee_status as string,\n\t\tverification_date as string,\n\t\tverification_date_by_day as string,\n\t\tverification_last_updated_date as string,\n\t\tverification_section as string,\n\t\ttask as string,\n\t\tverification_question_id as string,\n\t\tverification_question_text as string,\n\t\tverification_question_comments as string,\n\t\tverification_question_compliance as string,\n\t\tverification_question_non_compliance as string,\n\t\tverification_question_na as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['Verification_01102018-30092019.xlsx']) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tverification_nid,\n\t\tverification_type,\n\t\tcritical_control,\n\t\tcritical_risk,\n\t\tsite,\n\t\tsite_level_1,\n\t\tsite_level_2,\n\t\tsite_level_3,\n\t\tverifier,\n\t\tverifier_id,\n\t\tverifiers_employee_status,\n\t\tverification_date,\n\t\tverification_date_by_day,\n\t\tverification_last_updated_date,\n\t\tverification_section,\n\t\ttask,\n\t\tverification_question_id,\n\t\tverification_question_text,\n\t\tverification_question_comments,\n\t\tverification_question_compliance,\n\t\tverification_question_non_compliance,\n\t\tverification_question_na\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RipTinto')]",
                "[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dataflow4')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "weathertest",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "weathertesttable",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Flatten1"
                        },
                        {
                            "name": "Flatten2"
                        },
                        {
                            "name": "Flatten3"
                        },
                        {
                            "name": "Flatten4"
                        },
                        {
                            "name": "Flatten5"
                        },
                        {
                            "name": "Flatten6"
                        },
                        {
                            "name": "Flatten7"
                        },
                        {
                            "name": "DerivedColumn1"
                        }
                    ],
                    "script": "source(output(\n\t\tdata as (request as (type as string, query as string)[], current_condition as (observation_time as string, temp_C as string, temp_F as string, weatherCode as string, weatherIconUrl as (value as string)[], weatherDesc as (value as string)[], windspeedMiles as string, windspeedKmph as string, winddirDegree as string, winddir16Point as string, precipMM as string, precipInches as string, humidity as string, visibility as string, visibilityMiles as string, pressure as string, pressureInches as string, cloudcover as string, FeelsLikeC as string, FeelsLikeF as string, uvIndex as string)[], weather as (date as string, astronomy as (sunrise as string, sunset as string, moonrise as string, moonset as string, moon_phase as string, moon_illumination as string)[], maxtempC as string, maxtempF as string, mintempC as string, mintempF as string, avgtempC as string, avgtempF as string, totalSnow_cm as string, sunHour as string, uvIndex as string, hourly as (time as string, tempC as string, tempF as string, windspeedMiles as string, windspeedKmph as string, winddirDegree as string, winddir16Point as string, weatherCode as string, weatherIconUrl as (value as string)[], weatherDesc as (value as string)[], precipMM as string, precipInches as string, humidity as string, visibility as string, visibilityMiles as string, pressure as string, pressureInches as string, cloudcover as string, HeatIndexC as string, HeatIndexF as string, DewPointC as string, DewPointF as string, WindChillC as string, WindChillF as string, WindGustMiles as string, WindGustKmph as string, FeelsLikeC as string, FeelsLikeF as string, chanceofrain as string, chanceofremdry as string, chanceofwindy as string, chanceofovercast as string, chanceofsunshine as string, chanceoffrost as string, chanceofhightemp as string, chanceoffog as string, chanceofsnow as string, chanceofthunder as string, uvIndex as string)[])[], ClimateAverages as (month as (index as string, name as string, avgMinTemp as string, avgMinTemp_F as string, avgMaxTemp as string, avgMaxTemp_F as string, absMinTemp as string, absMinTemp_F as string, absMaxTemp as string, absMaxTemp_F as string, avgTemp as string, avgTemp_F as string, maxWindSpeed_kmph as string, maxWindSpeed_mph as string, maxWindSpeed_knots as string, maxWindSpeed_ms as string, avgWindSpeed_kmph as string, avgWindSpeed_mph as string, avgWindSpeed_knots as string, avgWindSpeed_ms as string, avgWindGust_kmph as string, avgWindGust_mph as string, avgWindGust_knots as string, avgWindGust_ms as string, avgDailyRainfall as string, avgDailyRainfall_inch as string, avgMonthlyRainfall as string, avgMonthlyRainfall_inch as string, avgHumidity as string, avgCloud as string, avgVis_km as string, avgVis_miles as string, avgPressure_mb as string, avgPressure_inch as string, avgDryDays as string, avgRainDays as string, avgSnowDays as string, avgFogDays as string, avgThunderDays as string, avgUVIndex as string, avgSunHour as string)[])[])\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:['*.json']) ~> source1\nsource1 foldDown(unroll(data.request),\n\tmapColumn(\n\t\ttype = data.request.type,\n\t\tquery = data.request.query,\n\t\tcurrent_condition = data.current_condition,\n\t\tweather = data.weather,\n\t\tClimateAverages = data.ClimateAverages\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 foldDown(unroll(current_condition),\n\tmapColumn(\n\t\ttype,\n\t\tquery,\n\t\tobservation_time = current_condition.observation_time,\n\t\ttemp_C = current_condition.temp_C,\n\t\ttemp_F = current_condition.temp_F,\n\t\tweatherCode = current_condition.weatherCode,\n\t\tweatherIconUrl = current_condition.weatherIconUrl,\n\t\tweatherDesc = current_condition.weatherDesc,\n\t\twindspeedMiles = current_condition.windspeedMiles,\n\t\twindspeedKmph = current_condition.windspeedKmph,\n\t\twinddirDegree = current_condition.winddirDegree,\n\t\twinddir16Point = current_condition.winddir16Point,\n\t\tprecipMM = current_condition.precipMM,\n\t\tprecipInches = current_condition.precipInches,\n\t\thumidity = current_condition.humidity,\n\t\tvisibility = current_condition.visibility,\n\t\tvisibilityMiles = current_condition.visibilityMiles,\n\t\tpressure = current_condition.pressure,\n\t\tpressureInches = current_condition.pressureInches,\n\t\tcloudcover = current_condition.cloudcover,\n\t\tFeelsLikeC = current_condition.FeelsLikeC,\n\t\tFeelsLikeF = current_condition.FeelsLikeF,\n\t\tuvIndex = current_condition.uvIndex,\n\t\tweather,\n\t\tClimateAverages\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten2\nFlatten2 foldDown(unroll(weatherIconUrl),\n\tmapColumn(\n\t\ttype,\n\t\tquery,\n\t\tobservation_time,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tweatherCode,\n\t\tvalue = weatherIconUrl.value,\n\t\tweatherDesc,\n\t\twindspeedMiles,\n\t\twindspeedKmph,\n\t\twinddirDegree,\n\t\twinddir16Point,\n\t\tprecipMM,\n\t\tprecipInches,\n\t\thumidity,\n\t\tvisibility,\n\t\tvisibilityMiles,\n\t\tpressure,\n\t\tpressureInches,\n\t\tcloudcover,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tuvIndex,\n\t\tweather,\n\t\tClimateAverages\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten3\nFlatten3 foldDown(unroll(weather.astronomy),\n\tmapColumn(\n\t\ttype,\n\t\tquery,\n\t\tobservation_time,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tweatherCode,\n\t\tvalue,\n\t\tweatherDesc,\n\t\twindspeedMiles,\n\t\twindspeedKmph,\n\t\twinddirDegree,\n\t\twinddir16Point,\n\t\tprecipMM,\n\t\tprecipInches,\n\t\thumidity,\n\t\tvisibility,\n\t\tvisibilityMiles,\n\t\tpressure,\n\t\tpressureInches,\n\t\tcloudcover,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tuvIndex,\n\t\tdate = weather.date,\n\t\tsunrise = weather.astronomy.sunrise,\n\t\tsunset = weather.astronomy.sunset,\n\t\tmoonrise = weather.astronomy.moonrise,\n\t\tmoonset = weather.astronomy.moonset,\n\t\tmoon_phase = weather.astronomy.moon_phase,\n\t\tmoon_illumination = weather.astronomy.moon_illumination,\n\t\tmaxtempC = weather.maxtempC,\n\t\tmaxtempF = weather.maxtempF,\n\t\tmintempC = weather.mintempC,\n\t\tmintempF = weather.mintempF,\n\t\tavgtempC = weather.avgtempC,\n\t\tavgtempF = weather.avgtempF,\n\t\ttotalSnow_cm = weather.totalSnow_cm,\n\t\tsunHour = weather.sunHour,\n\t\thourly = weather.hourly,\n\t\tClimateAverages\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten4\nFlatten4 foldDown(unroll(hourly.weatherIconUrl),\n\tmapColumn(\n\t\ttype,\n\t\tquery,\n\t\tobservation_time,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tweatherCode,\n\t\tvalue,\n\t\tweatherDesc,\n\t\twindspeedMiles,\n\t\twindspeedKmph,\n\t\twinddirDegree,\n\t\twinddir16Point,\n\t\tprecipMM,\n\t\tprecipInches,\n\t\thumidity,\n\t\tvisibility,\n\t\tvisibilityMiles,\n\t\tpressure,\n\t\tpressureInches,\n\t\tcloudcover,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tuvIndex,\n\t\tdate,\n\t\tsunrise,\n\t\tsunset,\n\t\tmoonrise,\n\t\tmoonset,\n\t\tmoon_phase,\n\t\tmoon_illumination,\n\t\tmaxtempC,\n\t\tmaxtempF,\n\t\tmintempC,\n\t\tmintempF,\n\t\tavgtempC,\n\t\tavgtempF,\n\t\ttotalSnow_cm,\n\t\tsunHour,\n\t\ttime = hourly.time,\n\t\ttempC = hourly.tempC,\n\t\ttempF = hourly.tempF,\n\t\tHeatIndexC = hourly.HeatIndexC,\n\t\tHeatIndexF = hourly.HeatIndexF,\n\t\tDewPointC = hourly.DewPointC,\n\t\tDewPointF = hourly.DewPointF,\n\t\tWindChillC = hourly.WindChillC,\n\t\tWindChillF = hourly.WindChillF,\n\t\tWindGustMiles = hourly.WindGustMiles,\n\t\tWindGustKmph = hourly.WindGustKmph,\n\t\tchanceofrain = hourly.chanceofrain,\n\t\tchanceofremdry = hourly.chanceofremdry,\n\t\tchanceofwindy = hourly.chanceofwindy,\n\t\tchanceofovercast = hourly.chanceofovercast,\n\t\tchanceofsunshine = hourly.chanceofsunshine,\n\t\tchanceoffrost = hourly.chanceoffrost,\n\t\tchanceofhightemp = hourly.chanceofhightemp,\n\t\tchanceoffog = hourly.chanceoffog,\n\t\tchanceofsnow = hourly.chanceofsnow,\n\t\tchanceofthunder = hourly.chanceofthunder,\n\t\tClimateAverages\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten5\nFlatten5 foldDown(unroll(weatherDesc),\n\tmapColumn(\n\t\ttype,\n\t\tquery,\n\t\tobservation_time,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tweatherCode,\n\t\tvalue = weatherDesc.value,\n\t\twindspeedMiles,\n\t\twindspeedKmph,\n\t\twinddirDegree,\n\t\twinddir16Point,\n\t\tprecipMM,\n\t\tprecipInches,\n\t\thumidity,\n\t\tvisibility,\n\t\tvisibilityMiles,\n\t\tpressure,\n\t\tpressureInches,\n\t\tcloudcover,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tuvIndex,\n\t\tdate,\n\t\tsunrise,\n\t\tsunset,\n\t\tmoonrise,\n\t\tmoonset,\n\t\tmoon_phase,\n\t\tmoon_illumination,\n\t\tmaxtempC,\n\t\tmaxtempF,\n\t\tmintempC,\n\t\tmintempF,\n\t\tavgtempC,\n\t\tavgtempF,\n\t\ttotalSnow_cm,\n\t\tsunHour,\n\t\ttime,\n\t\ttempC,\n\t\ttempF,\n\t\tHeatIndexC,\n\t\tHeatIndexF,\n\t\tDewPointC,\n\t\tDewPointF,\n\t\tWindChillC,\n\t\tWindChillF,\n\t\tWindGustMiles,\n\t\tWindGustKmph,\n\t\tchanceofrain,\n\t\tchanceofremdry,\n\t\tchanceofwindy,\n\t\tchanceofovercast,\n\t\tchanceofsunshine,\n\t\tchanceoffrost,\n\t\tchanceofhightemp,\n\t\tchanceoffog,\n\t\tchanceofsnow,\n\t\tchanceofthunder,\n\t\tClimateAverages\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten6\nFlatten6 foldDown(unroll(ClimateAverages),\n\tmapColumn(\n\t\ttype,\n\t\tquery,\n\t\tobservation_time,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tweatherCode,\n\t\tvalue,\n\t\twindspeedMiles,\n\t\twindspeedKmph,\n\t\twinddirDegree,\n\t\twinddir16Point,\n\t\tprecipMM,\n\t\tprecipInches,\n\t\thumidity,\n\t\tvisibility,\n\t\tvisibilityMiles,\n\t\tpressure,\n\t\tpressureInches,\n\t\tcloudcover,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tuvIndex,\n\t\tdate,\n\t\tsunrise,\n\t\tsunset,\n\t\tmoonrise,\n\t\tmoonset,\n\t\tmoon_phase,\n\t\tmoon_illumination,\n\t\tmaxtempC,\n\t\tmaxtempF,\n\t\tmintempC,\n\t\tmintempF,\n\t\tavgtempC,\n\t\tavgtempF,\n\t\ttotalSnow_cm,\n\t\tsunHour,\n\t\ttime,\n\t\ttempC,\n\t\ttempF,\n\t\tHeatIndexC,\n\t\tHeatIndexF,\n\t\tDewPointC,\n\t\tDewPointF,\n\t\tWindChillC,\n\t\tWindChillF,\n\t\tWindGustMiles,\n\t\tWindGustKmph,\n\t\tchanceofrain,\n\t\tchanceofremdry,\n\t\tchanceofwindy,\n\t\tchanceofovercast,\n\t\tchanceofsunshine,\n\t\tchanceoffrost,\n\t\tchanceofhightemp,\n\t\tchanceoffog,\n\t\tchanceofsnow,\n\t\tchanceofthunder,\n\t\tmonth = ClimateAverages.month\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten7\nFlatten7 derive(date = toString(date),\n\t\tquery = toString(query),\n\t\tpressureInches = toInteger(pressureInches),\n\t\tloaddate = currentDate(),\n\t\tsunHour = toDecimal(sunHour)) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tID as integer,\n\t\tQuery as string,\n\t\tObservation_date as string,\n\t\tsunrise as string,\n\t\tsunset as string,\n\t\tmoonrise as string,\n\t\tmoonset as string,\n\t\tmoon_phase as string,\n\t\tmoon_illumination as string,\n\t\tmaxtempC as string,\n\t\tmaxtempF as string,\n\t\tmintempC as string,\n\t\tmintempF as string,\n\t\tavgtempC as string,\n\t\tavgtempF as string,\n\t\ttotalSnow_cm as string,\n\t\tsunHour as decimal(18,0),\n\t\tuvIndex as string,\n\t\ttime as string,\n\t\ttempC as string,\n\t\ttempF as string,\n\t\twindspeedMiles as string,\n\t\twindspeedKmph as string,\n\t\twinddirDegree as string,\n\t\twinddir16Point as string,\n\t\tweatherCode as string,\n\t\tweatherDesc as string,\n\t\tprecipMM as string,\n\t\tprecipInches as string,\n\t\thumidity as string,\n\t\tvisibility as string,\n\t\tvisibilityMiles as string,\n\t\tpressure as string,\n\t\tpressureInches as integer,\n\t\tcloudcover as string,\n\t\tHeatIndexC as string,\n\t\tHeatIndexF as string,\n\t\tDewPointC as string,\n\t\tDewPointF as string,\n\t\tWindChillC as string,\n\t\tWindChillF as string,\n\t\tWindGustMiles as string,\n\t\tWindGustKmph as string,\n\t\tFeelsLikeC as string,\n\t\tFeelsLikeF as string,\n\t\tLoadDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tQuery = query,\n\t\tObservation_date = date,\n\t\tsunrise,\n\t\tsunset,\n\t\tmoonrise,\n\t\tmoonset,\n\t\tmoon_phase,\n\t\tmoon_illumination,\n\t\tmaxtempC,\n\t\tmaxtempF,\n\t\tmintempC,\n\t\tmintempF,\n\t\tavgtempC,\n\t\tavgtempF,\n\t\ttotalSnow_cm,\n\t\tsunHour,\n\t\tuvIndex,\n\t\ttime,\n\t\ttempC,\n\t\ttempF,\n\t\twindspeedMiles,\n\t\twindspeedKmph,\n\t\twinddirDegree,\n\t\twinddir16Point,\n\t\tweatherCode,\n\t\tweatherDesc = value,\n\t\tprecipMM,\n\t\tprecipInches,\n\t\thumidity,\n\t\tvisibility,\n\t\tvisibilityMiles,\n\t\tpressure,\n\t\tpressureInches,\n\t\tcloudcover,\n\t\tHeatIndexC,\n\t\tHeatIndexF,\n\t\tDewPointC,\n\t\tDewPointF,\n\t\tWindChillC,\n\t\tWindChillF,\n\t\tWindGustMiles,\n\t\tWindGustKmph,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tLoadDate = loaddate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/weathertest')]",
                "[concat(variables('factoryId'), '/datasets/weathertesttable')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SmartFetch')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "SmartFetch",
                                "type": "DatasetReference"
                            },
                            "name": "SmartFetch"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ENBRIDGE_SMARTFETCH_DATA",
                                "type": "DatasetReference"
                            },
                            "name": "Smartfetchdatatable"
                        }
                    ],
                    "transformations": [],
                    "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['*.csv']) ~> SmartFetch\nSmartFetch sink(input(\n\t\tindex as string,\n\t\turl as string,\n\t\tpublished as string,\n\t\ttitle as string,\n\t\tcontent as string,\n\t\troot_url as string,\n\t\tlang as string,\n\t\tsource_type as string,\n\t\tpost_type as string,\n\t\tproject as string,\n\t\tfacebook_shares as string,\n\t\tfacebook_likes as string,\n\t\ttwitter_retweets as string,\n\t\ttwitter_shares as string,\n\t\tfacebook_followers as string,\n\t\ttwitter_followers as string,\n\t\tcontinent as string,\n\t\tcountry as string,\n\t\tcountry_code as string,\n\t\tregion as string,\n\t\tcity as string,\n\t\tlongitude as string,\n\t\tlatitude as string,\n\t\tauthor_id as string,\n\t\tauthor_name as string,\n\t\tengagement as string,\n\t\treach as string,\n\t\tsearch_date as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Smartfetchdatatable"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/SmartFetch')]",
                "[concat(variables('factoryId'), '/datasets/ENBRIDGE_SMARTFETCH_DATA')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Talkwalker')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_TALKWALKER",
                                "type": "DatasetReference"
                            },
                            "name": "Talkwalker"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_TALKWALKER",
                                "type": "DatasetReference"
                            },
                            "name": "Enbridgetalkwalkerload"
                        }
                    ],
                    "transformations": [],
                    "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['*.csv']) ~> Talkwalker\nTalkwalker sink(input(\n\t\tExtracted_Date as string,\n\t\tURL as string,\n\t\tIndexed_Date as string,\n\t\tPublished_Date as string,\n\t\tSearch_Indexed_Date as string,\n\t\tTitle_Snippet as string,\n\t\tContent_Snippet as string,\n\t\tTitle as string,\n\t\tContent as string,\n\t\tRoot_URL as string,\n\t\tDomain_URL as string,\n\t\tHost_URL as string,\n\t\tParent_URL as string,\n\t\tLanguage as string,\n\t\tPorn_Level as string,\n\t\tFluency_Level as string,\n\t\tSpam_Level as string,\n\t\tSentiment as string,\n\t\tSource_Type as string,\n\t\tPost_Type as string,\n\t\tCluster_ID as string,\n\t\tMeta_Cluster_ID as string,\n\t\tTags_Internal as string,\n\t\tTags_Marking as string,\n\t\tTags_Customer as string,\n\t\tEntity_URLS as string,\n\t\tImages_URL as string,\n\t\tImages_Width as string,\n\t\tImages_Height as string,\n\t\tImages_Legend as string,\n\t\tVideos_URL as string,\n\t\tVideos_Width as string,\n\t\tVideos_Height as string,\n\t\tVideos_Legend as string,\n\t\tPagemonitoring_Sitemon_Site_ID as string,\n\t\tMatched_Profile as string,\n\t\tFacebook_Shares as string,\n\t\tFacebook_Likes as string,\n\t\tTwitter_Retweets as string,\n\t\tURL_Views as string,\n\t\tPinterest_Likes as string,\n\t\tPinterest_Pins as string,\n\t\tPinterest_Repins as string,\n\t\tYoutube_Views as string,\n\t\tYoutube_Likes as string,\n\t\tYoutube_Dislikes as string,\n\t\tInstagram_Likes as string,\n\t\tTwitter_Shares as string,\n\t\tNumber_Comments as string,\n\t\tAlexa_Pageviews as string,\n\t\tFacebook_Followers as string,\n\t\tTwitter_Followers as string,\n\t\tInstagram_Followers as string,\n\t\tPinterest_Followers as string,\n\t\tArticle_Continent as string,\n\t\tArticle_Country as string,\n\t\tArticle_Country_Code as string,\n\t\tArticle_Region as string,\n\t\tArticle_City as string,\n\t\tArticle_Longitude as string,\n\t\tArticle_Latitude as string,\n\t\tAuthor_ID as string,\n\t\tAuthor_Type as string,\n\t\tAuthor_Name as string,\n\t\tAuthor_Birthdate_Date as string,\n\t\tAuthor_Birthdate_Resolution as string,\n\t\tAuthor_Gender as string,\n\t\tAuthor_Image_URL as string,\n\t\tAuthor_Short_Name as string,\n\t\tAuthor_URL as string,\n\t\tAuthor_Continent as string,\n\t\tAuthor_Country as string,\n\t\tAuthor_Country_Code as string,\n\t\tAuthor_Region as string,\n\t\tAuthor_City as string,\n\t\tAuthor_Longitude as string,\n\t\tAuthor_Latitude as string,\n\t\tSource_Continent as string,\n\t\tSource_Country as string,\n\t\tSource_Country_Code as string,\n\t\tSource_Region as string,\n\t\tSource_City as string,\n\t\tSource_Longitude as string,\n\t\tSource_Latitude as string,\n\t\tEngagement as string,\n\t\tReach as string,\n\t\tProvider as string,\n\t\tGenerator_Type as string,\n\t\tAlexa_Unique_Visitors as string,\n\t\tTwitter_Likes as string,\n\t\tAuthor_Description as string,\n\t\tLinkedin_Shares as string,\n\t\tSource_Name as string,\n\t\tWord_Count as integer,\n\t\tRating as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> Enbridgetalkwalkerload"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_TALKWALKER')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_TALKWALKER')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Twitter_USER_INFO')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "TwitterUser_Info",
                                "type": "DatasetReference"
                            },
                            "name": "TwitterUserInfo"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_TWITTER_USERINFOLOAD",
                                "type": "DatasetReference"
                            },
                            "name": "EnbridgeTwitterUsersInfoload"
                        }
                    ],
                    "transformations": [],
                    "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TwitterUserInfo\nTwitterUserInfo sink(input(\n\t\tExtraction_Date as string,\n\t\tUser_Id as string,\n\t\tUser_Name as string,\n\t\tScreen_Name as string,\n\t\tLocation as string,\n\t\tURL as string,\n\t\tDescription as string,\n\t\tProtected as string,\n\t\tVerified as string,\n\t\tFollowers_Count as string,\n\t\tFriends_Count as string,\n\t\tListed_Count as string,\n\t\tFavourites_Count as string,\n\t\tStatus_Count as string,\n\t\tCreated_At as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EnbridgeTwitterUsersInfoload"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/TwitterUser_Info')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_TWITTER_USERINFOLOAD')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Twitter_FOLLOWERS_INFO')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_TWITTERFOLLOWERINFO",
                                "type": "DatasetReference"
                            },
                            "name": "TwitterFollowerInfo"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_TWITTERFOLLOWERSINFO",
                                "type": "DatasetReference"
                            },
                            "name": "EnbridgeTwitterFolowersInfoload"
                        }
                    ],
                    "transformations": [],
                    "script": "source(output(\n\t\tExtraction_Date as string,\n\t\tTarget_User_Name as string,\n\t\tFollower_Id_Str as string,\n\t\tScreen_Name as string,\n\t\tName as string,\n\t\tLocation as string,\n\t\tURL as string,\n\t\tDescription as string,\n\t\tProtected as string,\n\t\tVerified as string,\n\t\tFollowers_Count as string,\n\t\tFriends_Count as string,\n\t\tListed_Count as string,\n\t\tFavourites_Count as string,\n\t\tStatus_Count as string,\n\t\tCreated_At as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['Raw/Twitter/Follower_Info/*.csv']) ~> TwitterFollowerInfo\nTwitterFollowerInfo sink(input(\n\t\tExtraction_Date as string,\n\t\tTarget_User_Name as string,\n\t\tFollower_Id as string,\n\t\tScreen_Name as string,\n\t\tName as string,\n\t\tLocation as string,\n\t\tURL as string,\n\t\tDescription as string,\n\t\tProtected as string,\n\t\tVerified as string,\n\t\tFollowers_Count as string,\n\t\tFriends_Count as string,\n\t\tListed_Count as string,\n\t\tFavourites_Count as string,\n\t\tStatus_Count as string,\n\t\tCreated_At as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> EnbridgeTwitterFolowersInfoload"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_TWITTERFOLLOWERINFO')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_TWITTERFOLLOWERSINFO')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/KPI4_Processed_TW_Twitter_Data')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "PROCESSED_TW_TWITTER",
                                "type": "DatasetReference"
                            },
                            "name": "ProcessedTWTwitter"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DBKPI4Processed_TW_TWITTER_DATA",
                                "type": "DatasetReference"
                            },
                            "name": "KPI4ProcessedTWTwitterData"
                        }
                    ],
                    "transformations": [],
                    "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['*.csv']) ~> ProcessedTWTwitter\nProcessedTWTwitter sink(input(\n\t\tInsights_Date as string,\n\t\tURL as string,\n\t\tPublished_Date as string,\n\t\tContent as string,\n\t\tUser_Id as string,\n\t\tUser_Name as string,\n\t\tUser_Handle as string,\n\t\tOriginal_User_Id as string,\n\t\tOriginal_User_Name as string,\n\t\tOriginal_User_Handle as string,\n\t\tRetweet_User_Id as string,\n\t\tRetweet_User_Name as string,\n\t\tRetweet_User_Handle as string,\n\t\tCleaned_Tweet as string,\n\t\tRetweet_YN as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> KPI4ProcessedTWTwitterData"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/PROCESSED_TW_TWITTER')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DBKPI4Processed_TW_TWITTER_DATA')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/KPI4_Tagged_Account')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_TAGGEDACCOUNT",
                                "type": "DatasetReference"
                            },
                            "name": "TaggedAccount"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_KPI4_Tagged_Account",
                                "type": "DatasetReference"
                            },
                            "name": "KPI4TaggedAccount"
                        }
                    ],
                    "transformations": [],
                    "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['*.csv']) ~> TaggedAccount\nTaggedAccount sink(input(\n\t\tExtraction_Date as string,\n\t\tPublished_Date as string,\n\t\tInfluential_User_Handle as string,\n\t\tInfluential_User_Name as string,\n\t\tOriginal_User_Handle as string,\n\t\tRetweet_User_Handle as string,\n\t\tActual_Content as string,\n\t\tRetweet_YN as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> KPI4TaggedAccount"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_TAGGEDACCOUNT')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_KPI4_Tagged_Account')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PB_KPI1_Timeline_Twitter_user_FollowerInfo')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_Timeline",
                                "type": "DatasetReference"
                            },
                            "name": "Timeline"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_PB_KPI1_TIMELINE_TWITTER_USER",
                                "type": "DatasetReference"
                            },
                            "name": "PBKPI1TimelineUserFollower"
                        }
                    ],
                    "transformations": [],
                    "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['*.csv']) ~> Timeline\nTimeline sink(input(\n\t\tExtraction_Date as string,\n\t\tOnly_Date as string,\n\t\tOnly_Time as string,\n\t\tUser_Id as string,\n\t\tUser_Name as string,\n\t\tScreen_Name as string,\n\t\tLocation as string,\n\t\tURL as string,\n\t\tDescription as string,\n\t\tProtected as string,\n\t\tVerified as string,\n\t\tFollowers_Count as string,\n\t\tFriends_Count as string,\n\t\tListed_Count as string,\n\t\tFavourites_Count as string,\n\t\tStatus_Count as string,\n\t\tCreated_At as string,\n\t\tFollowers_of_Followers as string,\n\t\tInfluential_Followers as string,\n\t\tInfluential_List as string,\n\t\t{Total Influential Numbers} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> PBKPI1TimelineUserFollower"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_Timeline')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_PB_KPI1_TIMELINE_TWITTER_USER')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PB_KPI1_Timeline_Twitter_user_Fol_Relative_Difference')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_RELATIVEDIFFERENCE",
                                "type": "DatasetReference"
                            },
                            "name": "RelativeDifference"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_RELATIVEDIFFERENCE",
                                "type": "DatasetReference"
                            },
                            "name": "PBKPI1TimelineTwitterUserFolRelativeDifference"
                        }
                    ],
                    "transformations": [],
                    "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['*.csv']) ~> RelativeDifference\nRelativeDifference sink(input(\n\t\tExtraction_Date as string,\n\t\tOnly_Date as string,\n\t\tOnly_Time as string,\n\t\tUser_Id as string,\n\t\tUser_Name as string,\n\t\tScreen_Name as string,\n\t\tLocation as string,\n\t\tURL as string,\n\t\tDescription as string,\n\t\tProtected as string,\n\t\tVerified as string,\n\t\tRelative_Followers_Count as string,\n\t\tRelative_Friends_Count as string,\n\t\tRelative_Listed_Count as string,\n\t\tRelative_Favourites_Count as string,\n\t\tRelative_Status_Count as string,\n\t\tCreated_At as string,\n\t\tRelative_Followers_of_Followers as string,\n\t\tRelative_Influential_Followers as string,\n\t\tRelative_Influential_List as string,\n\t\tRelative_Total_Influential_Followers as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> PBKPI1TimelineTwitterUserFolRelativeDifference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_RELATIVEDIFFERENCE')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_RELATIVEDIFFERENCE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PB_KPI4_Tagged_Account_Ranking')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "ENBRIDGE_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_AGGREGATED_TAGGED_RANKING",
                                "type": "DatasetReference"
                            },
                            "name": "AggregateTaggedRanking"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_KP14TAGGEDACCTRANKING",
                                "type": "DatasetReference"
                            },
                            "name": "PBKPI4TaggedAccountRanking"
                        }
                    ],
                    "transformations": [],
                    "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> AggregateTaggedRanking\nAggregateTaggedRanking sink(input(\n\t\tExtraction_Date as timestamp,\n\t\tPublished_Date as date,\n\t\tInfluential_User_Handle as string,\n\t\tInfluential_User_Name as string,\n\t\tOriginal_User_Handle as string,\n\t\tTagged_Count as integer,\n\t\tTagged_Ranking as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> PBKPI4TaggedAccountRanking"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_AGGREGATED_TAGGED_RANKING')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_KP14TAGGEDACCTRANKING')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/QuestionTemplate')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "AuditPF_QuestionDataFlow"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "TestTemplate",
                                "type": "DatasetReference"
                            },
                            "name": "QuestionsInput"
                        },
                        {
                            "dataset": {
                                "referenceName": "Loadtemplte",
                                "type": "DatasetReference"
                            },
                            "name": "AnswerType"
                        },
                        {
                            "dataset": {
                                "referenceName": "Choice_List",
                                "type": "DatasetReference"
                            },
                            "name": "ChoiceListSupplier"
                        },
                        {
                            "dataset": {
                                "referenceName": "SUBCATEGORY",
                                "type": "DatasetReference"
                            },
                            "name": "Subcategory"
                        },
                        {
                            "dataset": {
                                "referenceName": "ChoicelistAuditor",
                                "type": "DatasetReference"
                            },
                            "name": "ChoiceListAuditor"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "QuestionOutput",
                                "type": "DatasetReference"
                            },
                            "name": "OutputData"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "GetSupplierrAnswerTypeID"
                        },
                        {
                            "name": "GetSupplierChoiceID"
                        },
                        {
                            "name": "GetSubcategoryID"
                        },
                        {
                            "name": "FiltereredData"
                        },
                        {
                            "name": "GetAuditorAnswerTypeID"
                        },
                        {
                            "name": "FilteredDatastep2"
                        },
                        {
                            "name": "GetAuditorChoiceID"
                        },
                        {
                            "name": "FilteredDatasetStep2"
                        }
                    ],
                    "script": "source(output(\n\t\tQuestionsId as string,\n\t\tTitle as string,\n\t\tDescription as string,\n\t\tIsActive as string,\n\t\tOrder as string,\n\t\tAnswerTypeId as string,\n\t\tChoiceListId as string,\n\t\tLevel as string,\n\t\tQuestionScore as string,\n\t\tKPIQuestion as string,\n\t\tConditionalMapping as string,\n\t\tQuestionType as string,\n\t\tSubCategoryId as string,\n\t\tAuditorAnswerTypeId as string,\n\t\tAuditorChoiceListId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['Question_rewind.xlsx']) ~> QuestionsInput\nsource(output(\n\t\tAnswerTypeId as string,\n\t\tAnswerTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['AnswerType.xlsx']) ~> AnswerType\nsource(output(\n\t\tChoiceId as string,\n\t\tChoiceListId as string,\n\t\tChoiceName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ChoiceListSupplier\nsource(output(\n\t\tSubCategoryId as string,\n\t\tSubCategoryName as string,\n\t\tCategoryId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Subcategory\nsource(output(\n\t\tChoiceId as string,\n\t\tChoiceListId as string,\n\t\tChoiceName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ChoiceListAuditor\nQuestionsInput, AnswerType lookup(QuestionsInput@AnswerTypeId == AnswerTypeName,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetSupplierrAnswerTypeID\nGetSupplierrAnswerTypeID, ChoiceListSupplier lookup(QuestionsInput@ChoiceListId == ChoiceName,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetSupplierChoiceID\nGetSupplierChoiceID, Subcategory lookup(QuestionsInput@SubCategoryId == SubCategoryName,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetSubcategoryID\nGetSubcategoryID select(mapColumn(\n\t\tQuestionsId,\n\t\tTitle,\n\t\tDescription,\n\t\tIsActive,\n\t\tOrder,\n\t\tLevel,\n\t\tQuestionScore,\n\t\tKPIQuestion,\n\t\tConditionalMapping,\n\t\tQuestionType,\n\t\tAuditorAnswerTypeId,\n\t\tAuditorChoiceListId,\n\t\tSupplierAnswerTypeId = AnswerType@AnswerTypeId,\n\t\tChoiceId,\n\t\tSupplierChoiceListId = ChoiceListSupplier@ChoiceListId,\n\t\tSubCategoryId = Subcategory@SubCategoryId,\n\t\tSubCategoryName,\n\t\tCategoryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FiltereredData\nFiltereredData, AnswerType lookup(AuditorAnswerTypeId == AnswerTypeName,\n\tmultiple: true,\n\tbroadcast: 'auto')~> GetAuditorAnswerTypeID\nGetAuditorAnswerTypeID select(mapColumn(\n\t\tQuestionsId,\n\t\tTitle,\n\t\tDescription,\n\t\tIsActive,\n\t\tOrder,\n\t\tLevel,\n\t\tQuestionScore,\n\t\tKPIQuestion,\n\t\tConditionalMapping,\n\t\tQuestionType,\n\t\tAuditorChoiceListId,\n\t\tSupplierAnswerTypeId,\n\t\tSupplierChoiceId = ChoiceId,\n\t\tSupplierChoiceListId,\n\t\tSubCategoryId,\n\t\tSubCategoryName,\n\t\tCategoryId,\n\t\tAuditorAnswerTypeId = AnswerTypeId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FilteredDatastep2\nFilteredDatastep2, ChoiceListAuditor lookup(AuditorChoiceListId == ChoiceName,\n\tmultiple: true,\n\tbroadcast: 'auto')~> GetAuditorChoiceID\nGetAuditorChoiceID select(mapColumn(\n\t\tQuestionsId,\n\t\tTitle,\n\t\tDescription,\n\t\tIsActive,\n\t\tOrder,\n\t\tLevel,\n\t\tQuestionScore,\n\t\tKPIQuestion,\n\t\tConditionalMapping,\n\t\tQuestionType,\n\t\tSupplierAnswerTypeId,\n\t\tSupplierChoiceId,\n\t\tSupplierChoiceListId,\n\t\tSubCategoryId,\n\t\tCategoryId,\n\t\tAuditorAnswerTypeId,\n\t\tAuditorChoiceId = ChoiceId,\n\t\tAuditorChoiceListId = ChoiceListId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FilteredDatasetStep2\nFilteredDatasetStep2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OutputData"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/TestTemplate')]",
                "[concat(variables('factoryId'), '/datasets/Loadtemplte')]",
                "[concat(variables('factoryId'), '/datasets/Choice_List')]",
                "[concat(variables('factoryId'), '/datasets/SUBCATEGORY')]",
                "[concat(variables('factoryId'), '/datasets/ChoicelistAuditor')]",
                "[concat(variables('factoryId'), '/datasets/QuestionOutput')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/WeatherAPI_jsonflattening')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "WeatherDataFlow"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Weatherjson",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "Weather_Table",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Flatten1"
                        },
                        {
                            "name": "Flatten2"
                        },
                        {
                            "name": "Flatten3"
                        },
                        {
                            "name": "Flatten4"
                        },
                        {
                            "name": "Flatten5"
                        },
                        {
                            "name": "Flatten6"
                        },
                        {
                            "name": "Flatten7"
                        },
                        {
                            "name": "Flatten8"
                        },
                        {
                            "name": "ModifyColumns1",
                            "description": "Autogenerated by data preview actions"
                        }
                    ],
                    "script": "source(output(\n\t\tdata as (ClimateAverages as (month as (absMaxTemp as double, absMaxTemp_F as double, absMinTemp as double, absMinTemp_F as double, avgCloud as double, avgDailyRainfall as double, avgDailyRainfall_inch as double, avgDryDays as short, avgFogDays as short, avgHumidity as double, avgMaxTemp as double, avgMaxTemp_F as double, avgMinTemp as double, avgMinTemp_F as double, avgMonthlyRainfall as double, avgMonthlyRainfall_inch as double, avgPressure_inch as double, avgPressure_mb as double, avgRainDays as short, avgSnowDays as boolean, avgSunHour as double, avgTemp as double, avgTemp_F as double, avgThunderDays as short, avgUVIndex as short, avgVis_km as double, avgVis_miles as double, avgWindGust_kmph as double, avgWindGust_knots as double, avgWindGust_mph as double, avgWindGust_ms as double, avgWindSpeed_kmph as double, avgWindSpeed_knots as double, avgWindSpeed_mph as double, avgWindSpeed_ms as double, index as short, maxWindSpeed_kmph as double, maxWindSpeed_knots as double, maxWindSpeed_mph as double, maxWindSpeed_ms as double, name as string)[])[], current_condition as (FeelsLikeC as short, FeelsLikeF as short, cloudcover as short, humidity as short, observation_time as string, precipInches as double, precipMM as double, pressure as short, pressureInches as short, temp_C as short, temp_F as short, uvIndex as boolean, visibility as short, visibilityMiles as short, weatherCode as short, weatherDesc as (value as string)[], weatherIconUrl as (value as string)[], winddir16Point as string, winddirDegree as short, windspeedKmph as short, windspeedMiles as short)[], request as (query as string, type as string)[], weather as (astronomy as (moon_illumination as short, moon_phase as string, moonrise as string, moonset as string, sunrise as string, sunset as string)[], avgtempC as short, avgtempF as short, date as date, hourly as (DewPointC as short, DewPointF as short, FeelsLikeC as short, FeelsLikeF as short, HeatIndexC as short, HeatIndexF as short, WindChillC as short, WindChillF as short, WindGustKmph as short, WindGustMiles as short, chanceoffog as boolean, chanceoffrost as boolean, chanceofhightemp as boolean, chanceofovercast as short, chanceofrain as short, chanceofremdry as short, chanceofsnow as boolean, chanceofsunshine as short, chanceofthunder as boolean, chanceofwindy as boolean, cloudcover as short, humidity as short, precipInches as double, precipMM as double, pressure as short, pressureInches as short, tempC as short, tempF as short, time as short, uvIndex as short, visibility as short, visibilityMiles as short, weatherCode as short, weatherDesc as (value as string)[], weatherIconUrl as (value as string)[], winddir16Point as string, winddirDegree as short, windspeedKmph as short, windspeedMiles as short)[], maxtempC as short, maxtempF as short, mintempC as short, mintempF as short, sunHour as double, totalSnow_cm as double, uvIndex as short)[])\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'singleDocument') ~> source1\nsource1 foldDown(unroll(data.ClimateAverages),\n\tmapColumn(\n\t\tmonth = data.ClimateAverages.month,\n\t\tcurrent_condition = data.current_condition,\n\t\trequest = data.request,\n\t\tweather = data.weather\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten1\nFlatten1 foldDown(unroll(month),\n\tmapColumn(\n\t\tabsMaxTemp = month.absMaxTemp,\n\t\tabsMaxTemp_F = month.absMaxTemp_F,\n\t\tabsMinTemp = month.absMinTemp,\n\t\tabsMinTemp_F = month.absMinTemp_F,\n\t\tavgCloud = month.avgCloud,\n\t\tavgDailyRainfall = month.avgDailyRainfall,\n\t\tavgDailyRainfall_inch = month.avgDailyRainfall_inch,\n\t\tavgDryDays = month.avgDryDays,\n\t\tavgFogDays = month.avgFogDays,\n\t\tavgHumidity = month.avgHumidity,\n\t\tavgMaxTemp = month.avgMaxTemp,\n\t\tavgMaxTemp_F = month.avgMaxTemp_F,\n\t\tavgMinTemp = month.avgMinTemp,\n\t\tavgMinTemp_F = month.avgMinTemp_F,\n\t\tavgMonthlyRainfall = month.avgMonthlyRainfall,\n\t\tavgMonthlyRainfall_inch = month.avgMonthlyRainfall_inch,\n\t\tavgPressure_inch = month.avgPressure_inch,\n\t\tavgPressure_mb = month.avgPressure_mb,\n\t\tavgRainDays = month.avgRainDays,\n\t\tavgSnowDays = month.avgSnowDays,\n\t\tavgSunHour = month.avgSunHour,\n\t\tavgTemp = month.avgTemp,\n\t\tavgTemp_F = month.avgTemp_F,\n\t\tavgThunderDays = month.avgThunderDays,\n\t\tavgUVIndex = month.avgUVIndex,\n\t\tavgVis_km = month.avgVis_km,\n\t\tavgVis_miles = month.avgVis_miles,\n\t\tavgWindGust_kmph = month.avgWindGust_kmph,\n\t\tavgWindGust_knots = month.avgWindGust_knots,\n\t\tavgWindGust_mph = month.avgWindGust_mph,\n\t\tavgWindGust_ms = month.avgWindGust_ms,\n\t\tavgWindSpeed_kmph = month.avgWindSpeed_kmph,\n\t\tavgWindSpeed_knots = month.avgWindSpeed_knots,\n\t\tavgWindSpeed_mph = month.avgWindSpeed_mph,\n\t\tavgWindSpeed_ms = month.avgWindSpeed_ms,\n\t\tindex = month.index,\n\t\tmaxWindSpeed_kmph = month.maxWindSpeed_kmph,\n\t\tmaxWindSpeed_knots = month.maxWindSpeed_knots,\n\t\tmaxWindSpeed_mph = month.maxWindSpeed_mph,\n\t\tmaxWindSpeed_ms = month.maxWindSpeed_ms,\n\t\tname = month.name,\n\t\tcurrent_condition,\n\t\trequest,\n\t\tweather\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten2\nFlatten2 foldDown(unroll(current_condition),\n\tmapColumn(\n\t\tabsMaxTemp,\n\t\tabsMaxTemp_F,\n\t\tabsMinTemp,\n\t\tabsMinTemp_F,\n\t\tavgCloud,\n\t\tavgDailyRainfall,\n\t\tavgDailyRainfall_inch,\n\t\tavgDryDays,\n\t\tavgFogDays,\n\t\tavgHumidity,\n\t\tavgMaxTemp,\n\t\tavgMaxTemp_F,\n\t\tavgMinTemp,\n\t\tavgMinTemp_F,\n\t\tavgMonthlyRainfall,\n\t\tavgMonthlyRainfall_inch,\n\t\tavgPressure_inch,\n\t\tavgPressure_mb,\n\t\tavgRainDays,\n\t\tavgSnowDays,\n\t\tavgSunHour,\n\t\tavgTemp,\n\t\tavgTemp_F,\n\t\tavgThunderDays,\n\t\tavgUVIndex,\n\t\tavgVis_km,\n\t\tavgVis_miles,\n\t\tavgWindGust_kmph,\n\t\tavgWindGust_knots,\n\t\tavgWindGust_mph,\n\t\tavgWindGust_ms,\n\t\tavgWindSpeed_kmph,\n\t\tavgWindSpeed_knots,\n\t\tavgWindSpeed_mph,\n\t\tavgWindSpeed_ms,\n\t\tindex,\n\t\tmaxWindSpeed_kmph,\n\t\tmaxWindSpeed_knots,\n\t\tmaxWindSpeed_mph,\n\t\tmaxWindSpeed_ms,\n\t\tname,\n\t\tFeelsLikeC = current_condition.FeelsLikeC,\n\t\tFeelsLikeF = current_condition.FeelsLikeF,\n\t\tcloudcover = current_condition.cloudcover,\n\t\thumidity = current_condition.humidity,\n\t\tobservation_time = current_condition.observation_time,\n\t\tprecipInches = current_condition.precipInches,\n\t\tprecipMM = current_condition.precipMM,\n\t\tpressure = current_condition.pressure,\n\t\tpressureInches = current_condition.pressureInches,\n\t\ttemp_C = current_condition.temp_C,\n\t\ttemp_F = current_condition.temp_F,\n\t\tuvIndex = current_condition.uvIndex,\n\t\tvisibility = current_condition.visibility,\n\t\tvisibilityMiles = current_condition.visibilityMiles,\n\t\tweatherCode = current_condition.weatherCode,\n\t\tweatherDesc = current_condition.weatherDesc,\n\t\tweatherIconUrl = current_condition.weatherIconUrl,\n\t\twinddir16Point = current_condition.winddir16Point,\n\t\twinddirDegree = current_condition.winddirDegree,\n\t\twindspeedKmph = current_condition.windspeedKmph,\n\t\twindspeedMiles = current_condition.windspeedMiles,\n\t\trequest,\n\t\tweather\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten3\nFlatten3 foldDown(unroll(weatherDesc),\n\tmapColumn(\n\t\tabsMaxTemp,\n\t\tabsMaxTemp_F,\n\t\tabsMinTemp,\n\t\tabsMinTemp_F,\n\t\tavgCloud,\n\t\tavgDailyRainfall,\n\t\tavgDailyRainfall_inch,\n\t\tavgDryDays,\n\t\tavgFogDays,\n\t\tavgHumidity,\n\t\tavgMaxTemp,\n\t\tavgMaxTemp_F,\n\t\tavgMinTemp,\n\t\tavgMinTemp_F,\n\t\tavgMonthlyRainfall,\n\t\tavgMonthlyRainfall_inch,\n\t\tavgPressure_inch,\n\t\tavgPressure_mb,\n\t\tavgRainDays,\n\t\tavgSnowDays,\n\t\tavgSunHour,\n\t\tavgTemp,\n\t\tavgTemp_F,\n\t\tavgThunderDays,\n\t\tavgUVIndex,\n\t\tavgVis_km,\n\t\tavgVis_miles,\n\t\tavgWindGust_kmph,\n\t\tavgWindGust_knots,\n\t\tavgWindGust_mph,\n\t\tavgWindGust_ms,\n\t\tavgWindSpeed_kmph,\n\t\tavgWindSpeed_knots,\n\t\tavgWindSpeed_mph,\n\t\tavgWindSpeed_ms,\n\t\tindex,\n\t\tmaxWindSpeed_kmph,\n\t\tmaxWindSpeed_knots,\n\t\tmaxWindSpeed_mph,\n\t\tmaxWindSpeed_ms,\n\t\tname,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tcloudcover,\n\t\thumidity,\n\t\tobservation_time,\n\t\tprecipInches,\n\t\tprecipMM,\n\t\tpressure,\n\t\tpressureInches,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tuvIndex,\n\t\tvisibility,\n\t\tvisibilityMiles,\n\t\tweatherCode,\n\t\tvalue = weatherDesc.value,\n\t\tweatherIconUrl,\n\t\twinddir16Point,\n\t\twinddirDegree,\n\t\twindspeedKmph,\n\t\twindspeedMiles,\n\t\trequest,\n\t\tweather\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten4\nFlatten4 foldDown(unroll(weather.astronomy),\n\tmapColumn(\n\t\tabsMaxTemp,\n\t\tabsMaxTemp_F,\n\t\tabsMinTemp,\n\t\tabsMinTemp_F,\n\t\tavgCloud,\n\t\tavgDailyRainfall,\n\t\tavgDailyRainfall_inch,\n\t\tavgDryDays,\n\t\tavgFogDays,\n\t\tavgHumidity,\n\t\tavgMaxTemp,\n\t\tavgMaxTemp_F,\n\t\tavgMinTemp,\n\t\tavgMinTemp_F,\n\t\tavgMonthlyRainfall,\n\t\tavgMonthlyRainfall_inch,\n\t\tavgPressure_inch,\n\t\tavgPressure_mb,\n\t\tavgRainDays,\n\t\tavgSnowDays,\n\t\tavgSunHour,\n\t\tavgTemp,\n\t\tavgTemp_F,\n\t\tavgThunderDays,\n\t\tavgUVIndex,\n\t\tavgVis_km,\n\t\tavgVis_miles,\n\t\tavgWindGust_kmph,\n\t\tavgWindGust_knots,\n\t\tavgWindGust_mph,\n\t\tavgWindGust_ms,\n\t\tavgWindSpeed_kmph,\n\t\tavgWindSpeed_knots,\n\t\tavgWindSpeed_mph,\n\t\tavgWindSpeed_ms,\n\t\tindex,\n\t\tmaxWindSpeed_kmph,\n\t\tmaxWindSpeed_knots,\n\t\tmaxWindSpeed_mph,\n\t\tmaxWindSpeed_ms,\n\t\tname,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tcloudcover,\n\t\thumidity,\n\t\tobservation_time,\n\t\tprecipInches,\n\t\tprecipMM,\n\t\tpressure,\n\t\tpressureInches,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tuvIndex,\n\t\tvisibility,\n\t\tvisibilityMiles,\n\t\tweatherCode,\n\t\tvalue,\n\t\tweatherIconUrl,\n\t\twinddir16Point,\n\t\twinddirDegree,\n\t\twindspeedKmph,\n\t\twindspeedMiles,\n\t\trequest,\n\t\tmoon_illumination = weather.astronomy.moon_illumination,\n\t\tmoon_phase = weather.astronomy.moon_phase,\n\t\tmoonrise = weather.astronomy.moonrise,\n\t\tmoonset = weather.astronomy.moonset,\n\t\tsunrise = weather.astronomy.sunrise,\n\t\tsunset = weather.astronomy.sunset,\n\t\tavgtempC = weather.avgtempC,\n\t\tavgtempF = weather.avgtempF,\n\t\tdate = weather.date,\n\t\thourly = weather.hourly,\n\t\tmaxtempC = weather.maxtempC,\n\t\tmaxtempF = weather.maxtempF,\n\t\tmintempC = weather.mintempC,\n\t\tmintempF = weather.mintempF,\n\t\tsunHour = weather.sunHour,\n\t\ttotalSnow_cm = weather.totalSnow_cm,\n\t\tuv = weather.uvIndex\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten5\nFlatten5 foldDown(unroll(hourly),\n\tmapColumn(\n\t\tabsMaxTemp,\n\t\tabsMaxTemp_F,\n\t\tabsMinTemp,\n\t\tabsMinTemp_F,\n\t\tavgCloud,\n\t\tavgDailyRainfall,\n\t\tavgDailyRainfall_inch,\n\t\tavgDryDays,\n\t\tavgFogDays,\n\t\tavgHumidity,\n\t\tavgMaxTemp,\n\t\tavgMaxTemp_F,\n\t\tavgMinTemp,\n\t\tavgMinTemp_F,\n\t\tavgMonthlyRainfall,\n\t\tavgMonthlyRainfall_inch,\n\t\tavgPressure_inch,\n\t\tavgPressure_mb,\n\t\tavgRainDays,\n\t\tavgSnowDays,\n\t\tavgSunHour,\n\t\tavgTemp,\n\t\tavgTemp_F,\n\t\tavgThunderDays,\n\t\tavgUVIndex,\n\t\tavgVis_km,\n\t\tavgVis_miles,\n\t\tavgWindGust_kmph,\n\t\tavgWindGust_knots,\n\t\tavgWindGust_mph,\n\t\tavgWindGust_ms,\n\t\tavgWindSpeed_kmph,\n\t\tavgWindSpeed_knots,\n\t\tavgWindSpeed_mph,\n\t\tavgWindSpeed_ms,\n\t\tindex,\n\t\tmaxWindSpeed_kmph,\n\t\tmaxWindSpeed_knots,\n\t\tmaxWindSpeed_mph,\n\t\tmaxWindSpeed_ms,\n\t\tname,\n\t\tFeelsLike_C = FeelsLikeC,\n\t\tFeelsLike_F = FeelsLikeF,\n\t\tCloudcover = cloudcover,\n\t\thumiditi = humidity,\n\t\tobservationtime = observation_time,\n\t\tprecip_Inches = precipInches,\n\t\tprecip_MM = precipMM,\n\t\tPressure = pressure,\n\t\tPressureInches = pressureInches,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tUvIndex = uvIndex,\n\t\tVisibility = visibility,\n\t\tVisibilityMiles = visibilityMiles,\n\t\tWeatherCode = weatherCode,\n\t\tvalue,\n\t\tWeatherIconUrl = weatherIconUrl,\n\t\tWinddir16Point = winddir16Point,\n\t\tWinddirDegree = winddirDegree,\n\t\tWindspeedKmph = windspeedKmph,\n\t\tWindspeedMiles = windspeedMiles,\n\t\trequest,\n\t\tmoon_illumination,\n\t\tmoon_phase,\n\t\tmoonrise,\n\t\tmoonset,\n\t\tsunrise,\n\t\tsunset,\n\t\tavgtempC,\n\t\tavgtempF,\n\t\tdate,\n\t\tDewPointC = hourly.DewPointC,\n\t\tDewPointF = hourly.DewPointF,\n\t\tFeelsLikeC = hourly.FeelsLikeC,\n\t\tFeelsLikeF = hourly.FeelsLikeF,\n\t\tHeatIndexC = hourly.HeatIndexC,\n\t\tHeatIndexF = hourly.HeatIndexF,\n\t\tWindChillC = hourly.WindChillC,\n\t\tWindChillF = hourly.WindChillF,\n\t\tWindGustKmph = hourly.WindGustKmph,\n\t\tWindGustMiles = hourly.WindGustMiles,\n\t\tchanceoffog = hourly.chanceoffog,\n\t\tchanceoffrost = hourly.chanceoffrost,\n\t\tchanceofhightemp = hourly.chanceofhightemp,\n\t\tchanceofovercast = hourly.chanceofovercast,\n\t\tchanceofrain = hourly.chanceofrain,\n\t\tchanceofremdry = hourly.chanceofremdry,\n\t\tchanceofsnow = hourly.chanceofsnow,\n\t\tchanceofsunshine = hourly.chanceofsunshine,\n\t\tchanceofthunder = hourly.chanceofthunder,\n\t\tchanceofwindy = hourly.chanceofwindy,\n\t\tcloudcover = hourly.cloudcover,\n\t\thumidity = hourly.humidity,\n\t\tprecipInches = hourly.precipInches,\n\t\tprecipMM = hourly.precipMM,\n\t\tpressure = hourly.pressure,\n\t\tpressureInches = hourly.pressureInches,\n\t\ttempC = hourly.tempC,\n\t\ttempF = hourly.tempF,\n\t\ttime = hourly.time,\n\t\tuvIndex = hourly.uvIndex,\n\t\tvisibility = hourly.visibility,\n\t\tvisibilityMiles = hourly.visibilityMiles,\n\t\tweatherCode = hourly.weatherCode,\n\t\tweatherDesc = hourly.weatherDesc,\n\t\tweatherIconUrl = hourly.weatherIconUrl,\n\t\twinddir16Point = hourly.winddir16Point,\n\t\twinddirDegree = hourly.winddirDegree,\n\t\twindspeedKmph = hourly.windspeedKmph,\n\t\twindspeedMiles = hourly.windspeedMiles,\n\t\tmaxtempC,\n\t\tmaxtempF,\n\t\tmintempC,\n\t\tmintempF,\n\t\tsunHour,\n\t\ttotalSnow_cm,\n\t\tuv\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten6\nFlatten6 foldDown(unroll(request),\n\tmapColumn(\n\t\tabsMaxTemp,\n\t\tabsMaxTemp_F,\n\t\tabsMinTemp,\n\t\tabsMinTemp_F,\n\t\tavgCloud,\n\t\tavgDailyRainfall,\n\t\tavgDailyRainfall_inch,\n\t\tavgDryDays,\n\t\tavgFogDays,\n\t\tavgHumidity,\n\t\tavgMaxTemp,\n\t\tavgMaxTemp_F,\n\t\tavgMinTemp,\n\t\tavgMinTemp_F,\n\t\tavgMonthlyRainfall,\n\t\tavgMonthlyRainfall_inch,\n\t\tavgPressure_inch,\n\t\tavgPressure_mb,\n\t\tavgRainDays,\n\t\tavgSnowDays,\n\t\tavgSunHour,\n\t\tavgTemp,\n\t\tavgTemp_F,\n\t\tavgThunderDays,\n\t\tavgUVIndex,\n\t\tavgVis_km,\n\t\tavgVis_miles,\n\t\tavgWindGust_kmph,\n\t\tavgWindGust_knots,\n\t\tavgWindGust_mph,\n\t\tavgWindGust_ms,\n\t\tavgWindSpeed_kmph,\n\t\tavgWindSpeed_knots,\n\t\tavgWindSpeed_mph,\n\t\tavgWindSpeed_ms,\n\t\tindex,\n\t\tmaxWindSpeed_kmph,\n\t\tmaxWindSpeed_knots,\n\t\tmaxWindSpeed_mph,\n\t\tmaxWindSpeed_ms,\n\t\tname,\n\t\tFeelsLike_C,\n\t\tFeelsLike_F,\n\t\tCloudcover = Flatten6@Cloudcover,\n\t\thumiditi,\n\t\tobservationtime,\n\t\tprecip_Inches,\n\t\tprecip_MM,\n\t\tPressure = Flatten6@Pressure,\n\t\tPressureInches = Flatten6@PressureInches,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tUvIndex = Flatten6@UvIndex,\n\t\tVisibility = Flatten6@Visibility,\n\t\tVisibilityMiles = Flatten6@VisibilityMiles,\n\t\tWeatherCode = Flatten6@WeatherCode,\n\t\tvalue,\n\t\tWeatherIconUrl = Flatten6@WeatherIconUrl,\n\t\tWinddir16Point = Flatten6@Winddir16Point,\n\t\tWinddirDegree = Flatten6@WinddirDegree,\n\t\tWindspeedKmph = Flatten6@WindspeedKmph,\n\t\tWindspeedMiles = Flatten6@WindspeedMiles,\n\t\tquery = request.query,\n\t\ttype = request.type,\n\t\tmoon_illumination,\n\t\tmoon_phase,\n\t\tmoonrise,\n\t\tmoonset,\n\t\tsunrise,\n\t\tsunset,\n\t\tavgtempC,\n\t\tavgtempF,\n\t\tdate,\n\t\tDewPointC,\n\t\tDewPointF,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tHeatIndexC,\n\t\tHeatIndexF,\n\t\tWindChillC,\n\t\tWindChillF,\n\t\tWindGustKmph,\n\t\tWindGustMiles,\n\t\tchanceoffog,\n\t\tchanceoffrost,\n\t\tchanceofhightemp,\n\t\tchanceofovercast,\n\t\tchanceofrain,\n\t\tchanceofremdry,\n\t\tchanceofsnow,\n\t\tchanceofsunshine,\n\t\tchanceofthunder,\n\t\tchanceofwindy,\n\t\tcloudcover = Flatten6@cloudcover,\n\t\thumidity,\n\t\tprecipInches,\n\t\tprecipMM,\n\t\tpressure = Flatten6@pressure,\n\t\tpressureInches = Flatten6@pressureInches,\n\t\ttempC,\n\t\ttempF,\n\t\ttime,\n\t\tuvIndex = Flatten6@uvIndex,\n\t\tvisibility = Flatten6@visibility,\n\t\tvisibilityMiles = Flatten6@visibilityMiles,\n\t\tweatherCode = Flatten6@weatherCode,\n\t\tweatherDesc,\n\t\tweatherIconUrl = Flatten6@weatherIconUrl,\n\t\twinddir16Point = Flatten6@winddir16Point,\n\t\twinddirDegree = Flatten6@winddirDegree,\n\t\twindspeedKmph = Flatten6@windspeedKmph,\n\t\twindspeedMiles = Flatten6@windspeedMiles,\n\t\tmaxtempC,\n\t\tmaxtempF,\n\t\tmintempC,\n\t\tmintempF,\n\t\tsunHour,\n\t\ttotalSnow_cm,\n\t\tuv\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten7\nFlatten7 foldDown(unroll(weatherDesc),\n\tmapColumn(\n\t\tabsMaxTemp,\n\t\tabsMaxTemp_F,\n\t\tabsMinTemp,\n\t\tabsMinTemp_F,\n\t\tavgCloud,\n\t\tavgDailyRainfall,\n\t\tavgDailyRainfall_inch,\n\t\tavgDryDays,\n\t\tavgFogDays,\n\t\tavgHumidity,\n\t\tavgMaxTemp,\n\t\tavgMaxTemp_F,\n\t\tavgMinTemp,\n\t\tavgMinTemp_F,\n\t\tavgMonthlyRainfall,\n\t\tavgMonthlyRainfall_inch,\n\t\tavgPressure_inch,\n\t\tavgPressure_mb,\n\t\tavgRainDays,\n\t\tavgSnowDays,\n\t\tavgSunHour,\n\t\tavgTemp,\n\t\tavgTemp_F,\n\t\tavgThunderDays,\n\t\tavgUVIndex,\n\t\tavgVis_km,\n\t\tavgVis_miles,\n\t\tavgWindGust_kmph,\n\t\tavgWindGust_knots,\n\t\tavgWindGust_mph,\n\t\tavgWindGust_ms,\n\t\tavgWindSpeed_kmph,\n\t\tavgWindSpeed_knots,\n\t\tavgWindSpeed_mph,\n\t\tavgWindSpeed_ms,\n\t\tindex,\n\t\tmaxWindSpeed_kmph,\n\t\tmaxWindSpeed_knots,\n\t\tmaxWindSpeed_mph,\n\t\tmaxWindSpeed_ms,\n\t\tname,\n\t\tFeelsLike_C,\n\t\tFeelsLike_F,\n\t\tCloudcover = Flatten7@Cloudcover,\n\t\thumiditi,\n\t\tobservationtime,\n\t\tprecip_Inches,\n\t\tprecip_MM,\n\t\tPressure = Flatten7@Pressure,\n\t\tPressureInches = Flatten7@PressureInches,\n\t\ttemp_C,\n\t\ttemp_F,\n\t\tUvIndex = Flatten7@UvIndex,\n\t\tVisibility = Flatten7@Visibility,\n\t\tVisibilityMiles = Flatten7@VisibilityMiles,\n\t\tWeatherCode = Flatten7@WeatherCode,\n\t\tvalue,\n\t\tWinddir16Point = Flatten7@Winddir16Point,\n\t\tWinddirDegree = Flatten7@WinddirDegree,\n\t\tWindspeedKmph = Flatten7@WindspeedKmph,\n\t\tWindspeedMiles = Flatten7@WindspeedMiles,\n\t\tquery,\n\t\ttype,\n\t\tmoon_illumination,\n\t\tmoon_phase,\n\t\tmoonrise,\n\t\tmoonset,\n\t\tsunrise,\n\t\tsunset,\n\t\tavgtempC,\n\t\tavgtempF,\n\t\tdate,\n\t\tDewPointC,\n\t\tDewPointF,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF,\n\t\tHeatIndexC,\n\t\tHeatIndexF,\n\t\tWindChillC,\n\t\tWindChillF,\n\t\tWindGustKmph,\n\t\tWindGustMiles,\n\t\tchanceoffog,\n\t\tchanceoffrost,\n\t\tchanceofhightemp,\n\t\tchanceofovercast,\n\t\tchanceofrain,\n\t\tchanceofremdry,\n\t\tchanceofsnow,\n\t\tchanceofsunshine,\n\t\tchanceofthunder,\n\t\tchanceofwindy,\n\t\tcloudcover = Flatten7@cloudcover,\n\t\thumidity,\n\t\tprecipInches,\n\t\tprecipMM,\n\t\tpressure = Flatten7@pressure,\n\t\tpressureInches = Flatten7@pressureInches,\n\t\ttempC,\n\t\ttempF,\n\t\ttime,\n\t\tuvIndex = Flatten7@uvIndex,\n\t\tvisibility = Flatten7@visibility,\n\t\tvisibilityMiles = Flatten7@visibilityMiles,\n\t\tweatherCode = Flatten7@weatherCode,\n\t\tValue = weatherDesc.value,\n\t\twinddir16Point = Flatten7@winddir16Point,\n\t\twinddirDegree = Flatten7@winddirDegree,\n\t\twindspeedKmph = Flatten7@windspeedKmph,\n\t\twindspeedMiles = Flatten7@windspeedMiles,\n\t\tmaxtempC,\n\t\tmaxtempF,\n\t\tmintempC,\n\t\tmintempF,\n\t\tsunHour,\n\t\ttotalSnow_cm,\n\t\tuv\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Flatten8\nFlatten8 derive(date = toString(date)) ~> ModifyColumns1\nModifyColumns1 sink(input(\n\t\tID as integer,\n\t\tCity as string,\n\t\tObservation_date as string,\n\t\tsunrise as string,\n\t\tsunset as string,\n\t\tmoonrise as string,\n\t\tmoonset as string,\n\t\tmoon_phase as string,\n\t\tmoon_illumination as string,\n\t\tmaxtempC as string,\n\t\tmaxtempF as string,\n\t\tmintempC as string,\n\t\tmintempF as string,\n\t\tavgtempC as string,\n\t\tavgtempF as string,\n\t\ttotalSnow_cm as string,\n\t\tsunHour as decimal(18,0),\n\t\tuvIndex as string,\n\t\ttime as string,\n\t\ttempC as string,\n\t\ttempF as string,\n\t\twindspeedMiles as string,\n\t\twindspeedKmph as string,\n\t\twinddirDegree as string,\n\t\twinddir16Point as string,\n\t\tweatherCode as string,\n\t\tweatherDesc as string,\n\t\tprecipMM as string,\n\t\tprecipInches as string,\n\t\thumidity as string,\n\t\tvisibility as string,\n\t\tvisibilityMiles as string,\n\t\tpressure as string,\n\t\tpressureInches as integer,\n\t\tcloudcover as string,\n\t\tHeatIndexC as string,\n\t\tHeatIndexF as string,\n\t\tDewPointC as string,\n\t\tDewPointF as string,\n\t\tWindChillC as string,\n\t\tWindChillF as string,\n\t\tWindGustMiles as string,\n\t\tWindGustKmph as string,\n\t\tFeelsLikeC as string,\n\t\tFeelsLikeF as string,\n\t\tINT_observation_Date as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCity = query,\n\t\tObservation_date = date,\n\t\tsunrise,\n\t\tsunset,\n\t\tmoonrise,\n\t\tmoonset,\n\t\tmoon_phase,\n\t\tmoon_illumination,\n\t\tmaxtempC,\n\t\tmaxtempF,\n\t\tmintempC,\n\t\tmintempF,\n\t\tavgtempC,\n\t\tavgtempF,\n\t\ttotalSnow_cm,\n\t\tsunHour,\n\t\tuvIndex = Flatten8@uvIndex,\n\t\ttime = observationtime,\n\t\ttempC,\n\t\ttempF,\n\t\twindspeedMiles = Flatten8@windspeedMiles,\n\t\twindspeedKmph = Flatten8@windspeedKmph,\n\t\twinddirDegree = Flatten8@winddirDegree,\n\t\twinddir16Point = Flatten8@winddir16Point,\n\t\tweatherCode = Flatten8@weatherCode,\n\t\tweatherDesc = Flatten8@Value,\n\t\tprecipMM,\n\t\tprecipInches,\n\t\thumidity,\n\t\tvisibility = Flatten8@visibility,\n\t\tvisibilityMiles = Flatten8@visibilityMiles,\n\t\tpressure = Flatten8@pressure,\n\t\tpressureInches = Flatten8@pressureInches,\n\t\tcloudcover = Flatten8@cloudcover,\n\t\tHeatIndexC,\n\t\tHeatIndexF,\n\t\tDewPointC,\n\t\tDewPointF,\n\t\tWindChillC,\n\t\tWindChillF,\n\t\tWindGustMiles,\n\t\tWindGustKmph,\n\t\tFeelsLikeC,\n\t\tFeelsLikeF\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Weatherjson')]",
                "[concat(variables('factoryId'), '/datasets/Weather_Table')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Talkwalker_API_DataFlow')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "TALKWALKER_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Talkwalkerflatten",
                                "type": "DatasetReference"
                            },
                            "name": "TalkwalkerInputSource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "DS_JSON_TALKWALKER",
                                "type": "DatasetReference"
                            },
                            "name": "JSONDATA"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "resultcontentdataflatten"
                        },
                        {
                            "name": "sourcetypeflatten"
                        },
                        {
                            "name": "posttypeflatten"
                        },
                        {
                            "name": "tokenstitleflattten"
                        },
                        {
                            "name": "tokenscontentflatten"
                        },
                        {
                            "name": "tagsinternalflatten"
                        },
                        {
                            "name": "entityurlflatten"
                        },
                        {
                            "name": "AddingLoaddate"
                        }
                    ],
                    "script": "source(output(\n\t\tstatus_code as string,\n\t\tstatus_message as string,\n\t\trequest as string,\n\t\tpagination as (next as string, total as string),\n\t\tresult_content as (data as (data as (url as string, indexed as string, search_indexed as string, published as string, title as string, content as string, title_snippet as string, content_snippet as string, root_url as string, domain_url as string, host_url as string, parent_url as string, lang as string, porn_level as string, fluency_level as string, spam_level as string, sentiment as string, source_type as string[], post_type as string[], tokens_title as string[], tokens_content as string[], tags_internal as string[], source_extended_attributes as (alexa_pageviews as string, alexa_unique_visitors as string), extra_author_attributes as (id as string, name as string, gender as string), extra_source_attributes as (world_data as (continent as string, country as string, region as string, city as string, longitude as double, latitude as double, country_code as string, resolution as string), id as string, name as string), engagement as string, reach as string, entity_url as (url as string, resolved_url as string)[], word_count as string))[])\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:['OutputJson/Talkwalker']) ~> TalkwalkerInputSource\nTalkwalkerInputSource foldDown(unroll(result_content.data),\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\tpagination,\n\t\tdata = result_content.data.data\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> resultcontentdataflatten\nresultcontentdataflatten foldDown(unroll(data.source_type),\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\tpagination,\n\t\turl = data.url,\n\t\tindexed = data.indexed,\n\t\tsearch_indexed = data.search_indexed,\n\t\tpublished = data.published,\n\t\ttitle = data.title,\n\t\tcontent = data.content,\n\t\ttitle_snippet = data.title_snippet,\n\t\tcontent_snippet = data.content_snippet,\n\t\troot_url = data.root_url,\n\t\tdomain_url = data.domain_url,\n\t\thost_url = data.host_url,\n\t\tparent_url = data.parent_url,\n\t\tlang = data.lang,\n\t\tporn_level = data.porn_level,\n\t\tfluency_level = data.fluency_level,\n\t\tspam_level = data.spam_level,\n\t\tsentiment = data.sentiment,\n\t\tsource_type = data.source_type,\n\t\tpost_type = data.post_type,\n\t\ttokens_title = data.tokens_title,\n\t\ttokens_content = data.tokens_content,\n\t\ttags_internal = data.tags_internal,\n\t\tsource_extended_attributes = data.source_extended_attributes,\n\t\textra_author_attributes = data.extra_author_attributes,\n\t\textra_source_attributes = data.extra_source_attributes,\n\t\tengagement = data.engagement,\n\t\treach = data.reach,\n\t\tentity_url = data.entity_url,\n\t\tword_count = data.word_count\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> sourcetypeflatten\nsourcetypeflatten foldDown(unroll(post_type),\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\tpagination,\n\t\turl,\n\t\tindexed,\n\t\tsearch_indexed,\n\t\tpublished,\n\t\ttitle,\n\t\tcontent,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\ttokens_title,\n\t\ttokens_content,\n\t\ttags_internal,\n\t\tsource_extended_attributes,\n\t\textra_author_attributes,\n\t\textra_source_attributes,\n\t\tengagement,\n\t\treach,\n\t\tentity_url,\n\t\tword_count\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> posttypeflatten\nposttypeflatten foldDown(unroll(tokens_title),\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\tpagination,\n\t\turl,\n\t\tindexed,\n\t\tsearch_indexed,\n\t\tpublished,\n\t\ttitle,\n\t\tcontent,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\ttokens_title,\n\t\ttokens_content,\n\t\ttags_internal,\n\t\tsource_extended_attributes,\n\t\textra_author_attributes,\n\t\textra_source_attributes,\n\t\tengagement,\n\t\treach,\n\t\tentity_url,\n\t\tword_count\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> tokenstitleflattten\ntokenstitleflattten foldDown(unroll(tokens_content),\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\tpagination,\n\t\turl,\n\t\tindexed,\n\t\tsearch_indexed,\n\t\tpublished,\n\t\ttitle,\n\t\tcontent,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\ttokens_title,\n\t\ttokens_content,\n\t\ttags_internal,\n\t\tsource_extended_attributes,\n\t\textra_author_attributes,\n\t\textra_source_attributes,\n\t\tengagement,\n\t\treach,\n\t\tentity_url,\n\t\tword_count\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> tokenscontentflatten\ntokenscontentflatten foldDown(unroll(tags_internal),\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\tpagination,\n\t\turl,\n\t\tindexed,\n\t\tsearch_indexed,\n\t\tpublished,\n\t\ttitle,\n\t\tcontent,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\ttokens_title,\n\t\ttokens_content,\n\t\ttags_internal,\n\t\tsource_extended_attributes,\n\t\textra_author_attributes,\n\t\textra_source_attributes,\n\t\tengagement,\n\t\treach,\n\t\tentity_url,\n\t\tword_count\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> tagsinternalflatten\ntagsinternalflatten foldDown(unroll(entity_url),\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\turl,\n\t\tindexed,\n\t\tsearch_indexed,\n\t\tpublished,\n\t\ttitle,\n\t\tcontent,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\ttokens_title,\n\t\ttokens_content,\n\t\ttags_internal,\n\t\tpage_views = source_extended_attributes,\n\t\tunique_visitors = source_extended_attributes,\n\t\textra_author_attributes_id = extra_author_attributes,\n\t\textra_author_attributes_name = extra_author_attributes,\n\t\textra_author_attributes_gender = extra_author_attributes,\n\t\textra_source_attributes_id = extra_source_attributes,\n\t\textra_source_attributes_name = extra_source_attributes,\n\t\textra_source_attributes_continent = extra_source_attributes,\n\t\textra_source_attributes_country = extra_source_attributes,\n\t\t{extra_source_attributes.region} = extra_source_attributes,\n\t\t{extra_source_attributes.city} = extra_source_attributes,\n\t\t{extra_source_attributes.longitude} = extra_source_attributes,\n\t\t{extra_source_attributes.latitude} = extra_source_attributes,\n\t\t{extra_source_attributes.country} = extra_source_attributes,\n\t\t{extra_source_attributes.resolution} = extra_source_attributes,\n\t\tengagement,\n\t\treach,\n\t\tentity_url = entity_url.url,\n\t\tresolved_url = entity_url.resolved_url,\n\t\tword_count\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> entityurlflatten\nentityurlflatten derive(LoadDate = currentDate()) ~> AddingLoaddate\nAddingLoaddate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\turl,\n\t\tindexed,\n\t\tsearch_indexed,\n\t\tpublished,\n\t\ttitle,\n\t\tcontent,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\ttokens_title,\n\t\ttokens_content,\n\t\ttags_internal,\n\t\tpage_views,\n\t\tunique_visitors,\n\t\textra_author_attributes_id,\n\t\textra_author_attributes_name,\n\t\textra_author_attributes_gender,\n\t\textra_source_attributes_id,\n\t\textra_source_attributes_name,\n\t\textra_source_attributes_continent,\n\t\textra_source_attributes_country,\n\t\tregion = {extra_source_attributes.region},\n\t\tcity = {extra_source_attributes.city},\n\t\tlongitude = {extra_source_attributes.longitude},\n\t\tlatitude = {extra_source_attributes.latitude},\n\t\tcountry = {extra_source_attributes.country},\n\t\tresolution = {extra_source_attributes.resolution},\n\t\tengagement,\n\t\treach,\n\t\tentity_url,\n\t\tresolved_url,\n\t\tword_count,\n\t\tLoadDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> JSONDATA"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Talkwalkerflatten')]",
                "[concat(variables('factoryId'), '/datasets/DS_JSON_TALKWALKER')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/UPSERT_DATALOAD')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "TALKWALKER_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQl_TALKWALKER_API",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_TALKWALKER_API_TEST",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow1"
                        }
                    ],
                    "script": "source(output(\n\t\tstatus_code as string,\n\t\tstatus_message as string,\n\t\trequest as string,\n\t\turl as string,\n\t\tindexed as string,\n\t\tsearch_indexed as string,\n\t\tpublished as string,\n\t\ttitle as string,\n\t\tcontent as string,\n\t\ttitle_snippet as string,\n\t\tcontent_snippet as string,\n\t\troot_url as string,\n\t\tdomain_url as string,\n\t\thost_url as string,\n\t\tparent_url as string,\n\t\tlang as string,\n\t\tporn_level as string,\n\t\tfluency_level as string,\n\t\tspam_level as string,\n\t\tsentiment as string,\n\t\tsource_type as string,\n\t\tpost_type as string,\n\t\ttokens_title as string,\n\t\ttokens_content as string,\n\t\ttags_internal as string,\n\t\tengagement as string,\n\t\treach as string,\n\t\tentity_url as string,\n\t\tresolved_url as string,\n\t\tword_count as string,\n\t\tLoadDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\twildcardPaths:['TalkwalkerAPI/Talkwalker-00001']) ~> source1\nsource1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['LoadDate'],\n\tformat: 'table',\n\tmapColumn(\n\t\tstatus_code,\n\t\tstatus_message,\n\t\trequest,\n\t\turl,\n\t\tindexed,\n\t\tsearch_indexed,\n\t\tpublished,\n\t\ttitle,\n\t\tcontent,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\ttokens_title,\n\t\ttokens_content,\n\t\ttags_internal,\n\t\tengagement,\n\t\treach,\n\t\tentity_url,\n\t\tresolved_url,\n\t\tword_count,\n\t\tLoadDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/AZ_SQl_TALKWALKER_API')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_TALKWALKER_API_TEST')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Histogram_Engagment_DataFlow')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "TALKWALKER_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_HISTOGRAM_ENGAGMENT",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_HISTOGRAM_ENGAGMENT",
                                "type": "DatasetReference"
                            },
                            "name": "HistogramEngagment"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Histogramresultdataflatten"
                        },
                        {
                            "name": "Histogramvalueflatten"
                        },
                        {
                            "name": "ValueFaltten"
                        },
                        {
                            "name": "AddingLoaddate"
                        }
                    ],
                    "script": "source(output(\n\t\trequest as string,\n\t\tresult_histogram as (data as (k as double, v as double[], val as (avg as double, count as integer, max as double, min as double, sum as double)[])[]),\n\t\tstatus_code as boolean,\n\t\tstatus_message as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:['OutputJson/HistogramEngagment']) ~> source1\nsource1 foldDown(unroll(result_histogram.data),\n\tmapColumn(\n\t\trequest,\n\t\tk = result_histogram.data.k,\n\t\tv = result_histogram.data.v,\n\t\tval = result_histogram.data.val,\n\t\tstatus_code,\n\t\tstatus_message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Histogramresultdataflatten\nHistogramresultdataflatten foldDown(unroll(v),\n\tmapColumn(\n\t\trequest,\n\t\tk,\n\t\tv,\n\t\tval,\n\t\tstatus_code,\n\t\tstatus_message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Histogramvalueflatten\nHistogramvalueflatten foldDown(unroll(val),\n\tmapColumn(\n\t\trequest,\n\t\tk,\n\t\tv,\n\t\tavg = val.avg,\n\t\tcount = val.count,\n\t\tmax = val.max,\n\t\tmin = val.min,\n\t\tsum = val.sum,\n\t\tstatus_code,\n\t\tstatus_message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ValueFaltten\nValueFaltten derive(Loaddate = currentDate()) ~> AddingLoaddate\nAddingLoaddate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\trequest,\n\t\tk,\n\t\tv,\n\t\tavg,\n\t\tcount,\n\t\tmax,\n\t\tmin,\n\t\tsum,\n\t\tstatus_code,\n\t\tstatus_message,\n\t\tLoaddate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> HistogramEngagment"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_HISTOGRAM_ENGAGMENT')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_HISTOGRAM_ENGAGMENT')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Histogram_Published_Dataflow')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "TALKWALKER_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_HISTOGRAM_PUBLISHED",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_HISTOGRAM_PUBLISHED",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "resulthistogramflatten"
                        },
                        {
                            "name": "resulthistogramvalueflatten"
                        },
                        {
                            "name": "headervalueflatten"
                        },
                        {
                            "name": "DerivedColumn1"
                        }
                    ],
                    "script": "source(output(\n\t\trequest as string,\n\t\tresult_histogram as (data as (t as long, v as double[])[], header as (v as string[])),\n\t\tstatus_code as boolean,\n\t\tstatus_message as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:['OutputJson/Histogram_Published']) ~> source1\nsource1 foldDown(unroll(result_histogram.data),\n\tmapColumn(\n\t\trequest,\n\t\tt = result_histogram.data.t,\n\t\tv = result_histogram.data.v,\n\t\theader = result_histogram.header,\n\t\tstatus_code,\n\t\tstatus_message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> resulthistogramflatten\nresulthistogramflatten foldDown(unroll(v),\n\tmapColumn(\n\t\trequest,\n\t\tt,\n\t\tv,\n\t\theader,\n\t\tstatus_code,\n\t\tstatus_message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> resulthistogramvalueflatten\nresulthistogramvalueflatten foldDown(unroll(header.v),\n\tmapColumn(\n\t\trequest,\n\t\tt,\n\t\tv,\n\t\t{Header.v} = header.v,\n\t\tstatus_code,\n\t\tstatus_message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> headervalueflatten\nheadervalueflatten derive(Loaddate = currentDate()) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\trequest,\n\t\ttime = t,\n\t\tvalue = v,\n\t\tHeader_value = {Header.v},\n\t\tstatus_code,\n\t\tstatus_message,\n\t\tLoaddate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_HISTOGRAM_PUBLISHED')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_HISTOGRAM_PUBLISHED')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Histogram_ThemeCloud')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "TALKWALKER_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_HISTOGRAM_THEME_CLOUD",
                                "type": "DatasetReference"
                            },
                            "name": "HistogramthemecloudInput"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_HISTOGRAM_THEMECLOUD",
                                "type": "DatasetReference"
                            },
                            "name": "HistogramThemecloudoutput"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "HistogramdataFlatten"
                        },
                        {
                            "name": "Valueflatten"
                        },
                        {
                            "name": "AddingLoaddate"
                        }
                    ],
                    "script": "source(output(\n\t\trequest as string,\n\t\tresult_histogram as (data as (ks as string, v as double[])[], total_hits as integer),\n\t\tstatus_code as boolean,\n\t\tstatus_message as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\twildcardPaths:['OutputJson/HistogramThemeCloud']) ~> HistogramthemecloudInput\nHistogramthemecloudInput foldDown(unroll(result_histogram.data),\n\tmapColumn(\n\t\trequest,\n\t\tks = result_histogram.data.ks,\n\t\tv = result_histogram.data.v,\n\t\ttotal_hits = result_histogram.total_hits,\n\t\tstatus_code,\n\t\tstatus_message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> HistogramdataFlatten\nHistogramdataFlatten foldDown(unroll(v),\n\tmapColumn(\n\t\trequest,\n\t\tks,\n\t\tv,\n\t\ttotal_hits,\n\t\tstatus_code,\n\t\tstatus_message\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Valueflatten\nValueflatten derive(Loaddate = currentDate()) ~> AddingLoaddate\nAddingLoaddate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\trequest,\n\t\tks,\n\t\tv,\n\t\ttotal_hits,\n\t\tstatus_code,\n\t\tstatus_message,\n\t\tLoaddate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> HistogramThemecloudoutput"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_HISTOGRAM_THEME_CLOUD')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_HISTOGRAM_THEMECLOUD')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/STG_TW_UI_Extract_DATALOAD')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "TALKWALKER_DATAFLOW/EXTRACT_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "DS_TW_UI_Extract",
                                "type": "DatasetReference"
                            },
                            "name": "DSTWUIExtractStaging"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_TW_UIEXTRACT",
                                "type": "DatasetReference"
                            },
                            "name": "SQLDBTWUIEXTRACT"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Addingdatecolumn"
                        }
                    ],
                    "script": "source(output(\n\t\turl as string,\n\t\tindexed as string,\n\t\tpublished as string,\n\t\tsearch_indexed as string,\n\t\ttitle_snippet as string,\n\t\tcontent_snippet as string,\n\t\ttitle as string,\n\t\tcontent as string,\n\t\troot_url as string,\n\t\tdomain_url as string,\n\t\thost_url as string,\n\t\tparent_url as string,\n\t\tlang as string,\n\t\tporn_level as string,\n\t\tfluency_level as string,\n\t\tspam_level as string,\n\t\tsentiment as string,\n\t\tsource_type as string,\n\t\tpost_type as string,\n\t\tcluster_id as string,\n\t\tmeta_cluster_id as string,\n\t\ttags_internal as string,\n\t\ttags_marking as string,\n\t\ttags_customer as string,\n\t\tentity_urls as string,\n\t\t{images.url} as string,\n\t\t{images.width} as string,\n\t\t{images.height} as string,\n\t\t{images.legend} as string,\n\t\t{videos.url} as string,\n\t\t{videos.width} as string,\n\t\t{videos.height} as string,\n\t\t{videos.legend} as string,\n\t\tpagemonitoring_sitemon_siteid as string,\n\t\tmatched_profile as string,\n\t\t{article_extended_attributes.facebook_shares} as string,\n\t\t{article_extended_attributes.facebook_likes} as string,\n\t\t{article_extended_attributes.twitter_retweets} as string,\n\t\t{article_extended_attributes.url_views} as string,\n\t\t{article_extended_attributes.pinterest_likes} as string,\n\t\t{article_extended_attributes.pinterest_pins} as string,\n\t\t{article_extended_attributes.pinterest_repins} as string,\n\t\t{article_extended_attributes.youtube_views} as string,\n\t\t{article_extended_attributes.youtube_likes} as string,\n\t\t{article_extended_attributes.youtube_dislikes} as string,\n\t\t{article_extended_attributes.instagram_likes} as string,\n\t\t{article_extended_attributes.twitter_shares} as string,\n\t\t{article_extended_attributes.num_comments} as string,\n\t\t{source_extended_attributes.alexa_pageviews} as string,\n\t\t{source_extended_attributes.facebook_followers} as string,\n\t\t{source_extended_attributes.twitter_followers} as string,\n\t\t{source_extended_attributes.instagram_followers} as string,\n\t\t{source_extended_attributes.pinterest_followers} as string,\n\t\t{extra_article_attributes.world_data.continent} as string,\n\t\t{extra_article_attributes.world_data.country} as string,\n\t\t{extra_article_attributes.world_data.country_code} as string,\n\t\t{extra_article_attributes.world_data.region} as string,\n\t\t{extra_article_attributes.world_data.city} as string,\n\t\t{extra_article_attributes.world_data.longitude} as string,\n\t\t{extra_article_attributes.world_data.latitude} as string,\n\t\t{extra_author_attributes.id} as string,\n\t\t{extra_author_attributes.type} as string,\n\t\t{extra_author_attributes.name} as string,\n\t\t{extra_author_attributes.birthdate.date} as string,\n\t\t{extra_author_attributes.birthdate.resolution} as string,\n\t\t{extra_author_attributes.gender} as string,\n\t\t{extra_author_attributes.image_url} as string,\n\t\t{extra_author_attributes.short_name} as string,\n\t\t{extra_author_attributes.url} as string,\n\t\t{extra_author_attributes.world_data.continent} as string,\n\t\t{extra_author_attributes.world_data.country} as string,\n\t\t{extra_author_attributes.world_data.country_code} as string,\n\t\t{extra_author_attributes.world_data.region} as string,\n\t\t{extra_author_attributes.world_data.city} as string,\n\t\t{extra_author_attributes.world_data.longitude} as string,\n\t\t{extra_author_attributes.world_data.latitude} as string,\n\t\t{extra_source_attributes.world_data.continent} as string,\n\t\t{extra_source_attributes.world_data.country} as string,\n\t\t{extra_source_attributes.world_data.country_code} as string,\n\t\t{extra_source_attributes.world_data.region} as string,\n\t\t{extra_source_attributes.world_data.city} as string,\n\t\t{extra_source_attributes.world_data.longitude} as string,\n\t\t{extra_source_attributes.world_data.latitude} as string,\n\t\tengagement as string,\n\t\treach as string,\n\t\tprovider as string,\n\t\t{generator.type} as string,\n\t\t{source_extended_attributes.alexa_unique_visitors} as string,\n\t\t{article_extended_attributes.twitter_likes} as string,\n\t\t{extra_author_attributes.description} as string,\n\t\t{article_extended_attributes.linkedin_shares} as string,\n\t\t{extra_source_attributes.name} as string,\n\t\tword_count as string,\n\t\trating as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:['AutomatedExtract/*.csv']) ~> DSTWUIExtractStaging\nDSTWUIExtractStaging derive(Loaddate = currentDate()) ~> Addingdatecolumn\nAddingdatecolumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\turl,\n\t\tindexed,\n\t\tpublished,\n\t\tsearch_indexed,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\ttitle,\n\t\tcontent,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\tcluster_id,\n\t\tmeta_cluster_id,\n\t\ttags_internal,\n\t\ttags_marking,\n\t\ttags_customer,\n\t\tentity_urls,\n\t\turl = {images.url},\n\t\twidth = {images.width},\n\t\theight = {images.height},\n\t\tlegend = {images.legend},\n\t\turl = {videos.url},\n\t\twidth = {videos.width},\n\t\theight = {videos.height},\n\t\tlegend = {videos.legend},\n\t\tpagemonitoring_sitemon_siteid,\n\t\tmatched_profile,\n\t\tfacebook_shares = {article_extended_attributes.facebook_shares},\n\t\tfacebook_likes = {article_extended_attributes.facebook_likes},\n\t\ttwitter_retweets = {article_extended_attributes.twitter_retweets},\n\t\turl_views = {article_extended_attributes.url_views},\n\t\tpinterest_likes = {article_extended_attributes.pinterest_likes},\n\t\tpinterest_pins = {article_extended_attributes.pinterest_pins},\n\t\tpinterest_repins = {article_extended_attributes.pinterest_repins},\n\t\tyoutube_views = {article_extended_attributes.youtube_views},\n\t\tyoutube_likes = {article_extended_attributes.youtube_likes},\n\t\tyoutube_dislikes = {article_extended_attributes.youtube_dislikes},\n\t\tinstagram_likes = {article_extended_attributes.instagram_likes},\n\t\ttwitter_shares = {article_extended_attributes.twitter_shares},\n\t\tnum_comments = {article_extended_attributes.num_comments},\n\t\talexa_pageviews = {source_extended_attributes.alexa_pageviews},\n\t\tfacebook_followers = {source_extended_attributes.facebook_followers},\n\t\ttwitter_followers = {source_extended_attributes.twitter_followers},\n\t\tinstagram_followers = {source_extended_attributes.instagram_followers},\n\t\tpinterest_followers = {source_extended_attributes.pinterest_followers},\n\t\tcontinent = {extra_article_attributes.world_data.continent},\n\t\tcountry = {extra_article_attributes.world_data.country},\n\t\tcountry_code = {extra_article_attributes.world_data.country_code},\n\t\tregion = {extra_article_attributes.world_data.region},\n\t\tcity = {extra_article_attributes.world_data.city},\n\t\tlongitude = {extra_article_attributes.world_data.longitude},\n\t\tlatitude = {extra_article_attributes.world_data.latitude},\n\t\tid = {extra_author_attributes.id},\n\t\ttype = {extra_author_attributes.type},\n\t\tname = {extra_author_attributes.name},\n\t\tdate = {extra_author_attributes.birthdate.date},\n\t\tresolution = {extra_author_attributes.birthdate.resolution},\n\t\tgender = {extra_author_attributes.gender},\n\t\timage_url = {extra_author_attributes.image_url},\n\t\tshort_name = {extra_author_attributes.short_name},\n\t\turl = {extra_author_attributes.url},\n\t\tcontinent = {extra_author_attributes.world_data.continent},\n\t\tcountry = {extra_author_attributes.world_data.country},\n\t\tcountry_code = {extra_author_attributes.world_data.country_code},\n\t\tregion = {extra_author_attributes.world_data.region},\n\t\tcity = {extra_author_attributes.world_data.city},\n\t\tlongitude = {extra_author_attributes.world_data.longitude},\n\t\tlatitude = {extra_author_attributes.world_data.latitude},\n\t\tcontinent = {extra_source_attributes.world_data.continent},\n\t\tcountry = {extra_source_attributes.world_data.country},\n\t\tcountry_code = {extra_source_attributes.world_data.country_code},\n\t\tregion = {extra_source_attributes.world_data.region},\n\t\tcity = {extra_source_attributes.world_data.city},\n\t\tlongitude = {extra_source_attributes.world_data.longitude},\n\t\tlatitude = {extra_source_attributes.world_data.latitude},\n\t\tengagement,\n\t\treach,\n\t\tprovider,\n\t\ttype = {generator.type},\n\t\talexa_unique_visitors = {source_extended_attributes.alexa_unique_visitors},\n\t\ttwitter_likes = {article_extended_attributes.twitter_likes},\n\t\tdescription = {extra_author_attributes.description},\n\t\tlinkedin_shares = {article_extended_attributes.linkedin_shares},\n\t\tname = {extra_source_attributes.name},\n\t\tword_count,\n\t\trating,\n\t\tLoaddate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SQLDBTWUIEXTRACT"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_TW_UI_Extract')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_TW_UIEXTRACT')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RAW_TW_UI_EXTRACT')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "folder": {
                    "name": "TALKWALKER_DATAFLOW/EXTRACT_DATAFLOW"
                },
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_TW_UIEXTRACT",
                                "type": "DatasetReference"
                            },
                            "name": "STGTWUIEXTRACT"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AZ_SQL_DB_RAW_TW_UI_Extract",
                                "type": "DatasetReference"
                            },
                            "name": "RAWTWUIEXTRACTLOAD"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "DeltaLoad"
                        }
                    ],
                    "script": "source(output(\n\t\turl as string,\n\t\tindexed as string,\n\t\tpublished as string,\n\t\tsearch_indexed as string,\n\t\ttitle_snippet as string,\n\t\tcontent_snippet as string,\n\t\ttitle as string,\n\t\tcontent as string,\n\t\troot_url as string,\n\t\tdomain_url as string,\n\t\thost_url as string,\n\t\tparent_url as string,\n\t\tlang as string,\n\t\tporn_level as string,\n\t\tfluency_level as string,\n\t\tspam_level as string,\n\t\tsentiment as string,\n\t\tsource_type as string,\n\t\tpost_type as string,\n\t\tcluster_id as string,\n\t\tmeta_cluster_id as string,\n\t\ttags_internal as string,\n\t\ttags_marking as string,\n\t\ttags_customer as string,\n\t\tentity_urls as string,\n\t\t{images.url} as string,\n\t\t{images.width} as string,\n\t\t{images.height} as string,\n\t\t{images.legend} as string,\n\t\t{videos.url} as string,\n\t\t{videos.width} as string,\n\t\t{videos.height} as string,\n\t\t{videos.legend} as string,\n\t\tpagemonitoring_sitemon_siteid as string,\n\t\tmatched_profile as string,\n\t\t{article_extended_attributes.facebook_shares} as string,\n\t\t{article_extended_attributes.facebook_likes} as string,\n\t\t{article_extended_attributes.twitter_retweets} as string,\n\t\t{article_extended_attributes.url_views} as string,\n\t\t{article_extended_attributes.pinterest_likes} as string,\n\t\t{article_extended_attributes.pinterest_pins} as string,\n\t\t{article_extended_attributes.pinterest_repins} as string,\n\t\t{article_extended_attributes.youtube_views} as string,\n\t\t{article_extended_attributes.youtube_likes} as string,\n\t\t{article_extended_attributes.youtube_dislikes} as string,\n\t\t{article_extended_attributes.instagram_likes} as string,\n\t\t{article_extended_attributes.twitter_shares} as string,\n\t\t{article_extended_attributes.num_comments} as string,\n\t\t{source_extended_attributes.alexa_pageviews} as string,\n\t\t{source_extended_attributes.facebook_followers} as string,\n\t\t{source_extended_attributes.twitter_followers} as string,\n\t\t{source_extended_attributes.instagram_followers} as string,\n\t\t{source_extended_attributes.pinterest_followers} as string,\n\t\t{extra_article_attributes.world_data.continent} as string,\n\t\t{extra_article_attributes.world_data.country} as string,\n\t\t{extra_article_attributes.world_data.country_code} as string,\n\t\t{extra_article_attributes.world_data.region} as string,\n\t\t{extra_article_attributes.world_data.city} as string,\n\t\t{extra_article_attributes.world_data.longitude} as string,\n\t\t{extra_article_attributes.world_data.latitude} as string,\n\t\t{extra_author_attributes.id} as string,\n\t\t{extra_author_attributes.type} as string,\n\t\t{extra_author_attributes.name} as string,\n\t\t{extra_author_attributes.birthdate.date} as string,\n\t\t{extra_author_attributes.birthdate.resolution} as string,\n\t\t{extra_author_attributes.gender} as string,\n\t\t{extra_author_attributes.image_url} as string,\n\t\t{extra_author_attributes.short_name} as string,\n\t\t{extra_author_attributes.url} as string,\n\t\t{extra_author_attributes.world_data.continent} as string,\n\t\t{extra_author_attributes.world_data.country} as string,\n\t\t{extra_author_attributes.world_data.country_code} as string,\n\t\t{extra_author_attributes.world_data.region} as string,\n\t\t{extra_author_attributes.world_data.city} as string,\n\t\t{extra_author_attributes.world_data.longitude} as string,\n\t\t{extra_author_attributes.world_data.latitude} as string,\n\t\t{extra_source_attributes.world_data.continent} as string,\n\t\t{extra_source_attributes.world_data.country} as string,\n\t\t{extra_source_attributes.world_data.country_code} as string,\n\t\t{extra_source_attributes.world_data.region} as string,\n\t\t{extra_source_attributes.world_data.city} as string,\n\t\t{extra_source_attributes.world_data.longitude} as string,\n\t\t{extra_source_attributes.world_data.latitude} as string,\n\t\tengagement as string,\n\t\treach as string,\n\t\tprovider as string,\n\t\t{generator.type} as string,\n\t\t{source_extended_attributes.alexa_unique_visitors} as string,\n\t\t{article_extended_attributes.twitter_likes} as string,\n\t\t{extra_author_attributes.description} as string,\n\t\t{article_extended_attributes.linkedin_shares} as string,\n\t\t{extra_source_attributes.name} as string,\n\t\tword_count as string,\n\t\trating as string,\n\t\tExtract_id as integer,\n\t\tLoaddate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> STGTWUIEXTRACT\nSTGTWUIEXTRACT alterRow(upsertIf(true())) ~> DeltaLoad\nDeltaLoad sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['url'],\n\tformat: 'table',\n\tmapColumn(\n\t\turl,\n\t\tindexed,\n\t\tpublished,\n\t\tsearch_indexed,\n\t\ttitle_snippet,\n\t\tcontent_snippet,\n\t\ttitle,\n\t\tcontent,\n\t\troot_url,\n\t\tdomain_url,\n\t\thost_url,\n\t\tparent_url,\n\t\tlang,\n\t\tporn_level,\n\t\tfluency_level,\n\t\tspam_level,\n\t\tsentiment,\n\t\tsource_type,\n\t\tpost_type,\n\t\tcluster_id,\n\t\tmeta_cluster_id,\n\t\ttags_internal,\n\t\ttags_marking,\n\t\ttags_customer,\n\t\tentity_urls,\n\t\turl = {images.url},\n\t\twidth = {images.width},\n\t\theight = {images.height},\n\t\tlegend = {images.legend},\n\t\turl = {videos.url},\n\t\twidth = {videos.width},\n\t\theight = {videos.height},\n\t\tlegend = {videos.legend},\n\t\tpagemonitoring_sitemon_siteid,\n\t\tmatched_profile,\n\t\tfacebook_shares = {article_extended_attributes.facebook_shares},\n\t\tfacebook_likes = {article_extended_attributes.facebook_likes},\n\t\ttwitter_retweets = {article_extended_attributes.twitter_retweets},\n\t\turl_views = {article_extended_attributes.url_views},\n\t\tpinterest_likes = {article_extended_attributes.pinterest_likes},\n\t\tpinterest_pins = {article_extended_attributes.pinterest_pins},\n\t\tpinterest_repins = {article_extended_attributes.pinterest_repins},\n\t\tyoutube_views = {article_extended_attributes.youtube_views},\n\t\tyoutube_likes = {article_extended_attributes.youtube_likes},\n\t\tyoutube_dislikes = {article_extended_attributes.youtube_dislikes},\n\t\tinstagram_likes = {article_extended_attributes.instagram_likes},\n\t\ttwitter_shares = {article_extended_attributes.twitter_shares},\n\t\tnum_comments = {article_extended_attributes.num_comments},\n\t\talexa_pageviews = {source_extended_attributes.alexa_pageviews},\n\t\tfacebook_followers = {source_extended_attributes.facebook_followers},\n\t\ttwitter_followers = {source_extended_attributes.twitter_followers},\n\t\tinstagram_followers = {source_extended_attributes.instagram_followers},\n\t\tpinterest_followers = {source_extended_attributes.pinterest_followers},\n\t\tcontinent = {extra_article_attributes.world_data.continent},\n\t\tcountry = {extra_article_attributes.world_data.country},\n\t\tcountry_code = {extra_article_attributes.world_data.country_code},\n\t\tregion = {extra_article_attributes.world_data.region},\n\t\tcity = {extra_article_attributes.world_data.city},\n\t\tlongitude = {extra_article_attributes.world_data.longitude},\n\t\tlatitude = {extra_article_attributes.world_data.latitude},\n\t\tid = {extra_author_attributes.id},\n\t\ttype = {extra_author_attributes.type},\n\t\tname = {extra_author_attributes.name},\n\t\tdate = {extra_author_attributes.birthdate.date},\n\t\tresolution = {extra_author_attributes.birthdate.resolution},\n\t\tgender = {extra_author_attributes.gender},\n\t\timage_url = {extra_author_attributes.image_url},\n\t\tshort_name = {extra_author_attributes.short_name},\n\t\turl = {extra_author_attributes.url},\n\t\tcontinent = {extra_author_attributes.world_data.continent},\n\t\tcountry = {extra_author_attributes.world_data.country},\n\t\tcountry_code = {extra_author_attributes.world_data.country_code},\n\t\tregion = {extra_author_attributes.world_data.region},\n\t\tcity = {extra_author_attributes.world_data.city},\n\t\tlongitude = {extra_author_attributes.world_data.longitude},\n\t\tlatitude = {extra_author_attributes.world_data.latitude},\n\t\tcontinent = {extra_source_attributes.world_data.continent},\n\t\tcountry = {extra_source_attributes.world_data.country},\n\t\tcountry_code = {extra_source_attributes.world_data.country_code},\n\t\tregion = {extra_source_attributes.world_data.region},\n\t\tcity = {extra_source_attributes.world_data.city},\n\t\tlongitude = {extra_source_attributes.world_data.longitude},\n\t\tlatitude = {extra_source_attributes.world_data.latitude},\n\t\tengagement,\n\t\treach,\n\t\tprovider,\n\t\ttype = {generator.type},\n\t\talexa_unique_visitors = {source_extended_attributes.alexa_unique_visitors},\n\t\ttwitter_likes = {article_extended_attributes.twitter_likes},\n\t\tdescription = {extra_author_attributes.description},\n\t\tlinkedin_shares = {article_extended_attributes.linkedin_shares},\n\t\tname = {extra_source_attributes.name},\n\t\tword_count,\n\t\trating,\n\t\tExtract_id,\n\t\tLoaddate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> RAWTWUIEXTRACTLOAD"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_TW_UIEXTRACT')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQL_DB_RAW_TW_UI_Extract')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Dataload_ESG')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline will load data into web search and social media table",
                "activities": [
                    {
                        "name": "ESGDATALOAD",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_POSITIVESEARCH_PIPELINE",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "WebSearch": {},
                                    "SocialMedia": {},
                                    "SocialMediaSink": {},
                                    "WebsearchSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "concurrency": 2,
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-22T10:54:55Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_POSITIVESEARCH_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/test data load')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESGDATALOAD",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_POSITIVESEARCH_PIPELINE",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "WebSearch": {},
                                    "SocialMedia": {},
                                    "SocialMediaSink": {},
                                    "WebsearchSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2020-10-30T06:41:48Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_POSITIVESEARCH_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Lookup1",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Execute Pipeline1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ESG_AZ_SQl_WEB_SEARCH",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "test data load",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Log_success_status_AC1",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[Usp_LogActivityStatus]",
                            "storedProcedureParameters": {
                                "ACName": {
                                    "value": "Log_success_status",
                                    "type": "String"
                                },
                                "CompanyName": {
                                    "value": "",
                                    "type": "String"
                                },
                                "ExecStatus": {
                                    "value": "",
                                    "type": "String"
                                },
                                "PipelineName": {
                                    "value": "",
                                    "type": "String"
                                },
                                "ReportId": {
                                    "value": "",
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AZSQLDB_ESG",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2020-09-25T08:01:50Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQl_WEB_SEARCH')]",
                "[concat(variables('factoryId'), '/pipelines/test data load')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline3')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "dataflow2",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "dataflow2",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2020-09-24T18:36:20Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/dataflow2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATALOAD_BACKUP')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Log_Success_Status",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[Usp_LogActivityStatus]",
                            "storedProcedureParameters": {
                                "ACName": {
                                    "value": "Log_Success",
                                    "type": "String"
                                },
                                "CompanyName": {
                                    "value": {
                                        "value": "@activity('Lookup1').output.firstRow.Company_Name",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ExecStatus": {
                                    "value": "Success",
                                    "type": "String"
                                },
                                "PipelineName": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ReportId": {
                                    "value": {
                                        "value": "@activity('Lookup1').output.firstRow.Report_Id",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AZSQLDB_ESG",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "Lookup1",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "ESGDATALOAD",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select * from ESG_WEBSEARCH ORDER BY CreatedDateTime DESC",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ESG_AZ_SQl_WEB_SEARCH",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "Log_failure_status",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "ESGDATALOAD",
                                "dependencyConditions": [
                                    "Failed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[Usp_LogActivityStatus]",
                            "storedProcedureParameters": {
                                "ACName": {
                                    "value": "Log_Failure",
                                    "type": "String"
                                },
                                "CompanyName": {
                                    "value": {
                                        "value": "@activity('ESGDATALOAD').output.firstRow.Company_Name",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ExecStatus": {
                                    "value": "Failure",
                                    "type": "String"
                                },
                                "PipelineName": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ReportId": {
                                    "value": {
                                        "value": "@activity('ESGDATALOAD').output.firstRow.Report_Id",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AZSQLDB_ESG",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "ESGDATALOAD",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_POSITIVESEARCH_PIPELINE",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "WebSearch": {},
                                    "SocialMedia": {},
                                    "SocialMediaSink": {},
                                    "WebsearchSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2020-10-30T06:41:48Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]",
                "[concat(variables('factoryId'), '/datasets/ESG_AZ_SQl_WEB_SEARCH')]",
                "[concat(variables('factoryId'), '/dataflows/ESG_POSITIVESEARCH_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/STG_ESG_DATA_LOAD')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline is for loading data to first staging table",
                "activities": [
                    {
                        "name": "Lookup1",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "dataflow2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select * from STG_ESG_WEBSEARCH ORDER BY CreatedDateTime DESC",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "STG_ESG_WEBSEARCH",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": true
                        }
                    },
                    {
                        "name": "Log_success_status_AC1",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[Usp_LogActivityStatus]",
                            "storedProcedureParameters": {
                                "ACName": {
                                    "value": "log",
                                    "type": "String"
                                },
                                "CompanyName": {
                                    "value": {
                                        "value": "@activity('Lookup1').output.firstRow.Company_Name",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ExecStatus": {
                                    "value": "suc",
                                    "type": "String"
                                },
                                "PipelineName": {
                                    "value": {
                                        "value": "@pipeline().Pipeline",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "ReportId": {
                                    "value": {
                                        "value": "@activity('Lookup1').output.firstRow.Report_Id",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "LS_AZSQLDB_ESG",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "dataflow2",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "dataflow2",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2020-09-29T13:17:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/STG_ESG_WEBSEARCH')]",
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]",
                "[concat(variables('factoryId'), '/dataflows/dataflow2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline4')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "verification_nid",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_nid",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_type",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_type",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "critical_control",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "critical_control",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "critical_risk",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "critical_risk",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "site",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "site",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "site_level_1",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "site_level_1",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "site_level_2",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "site_level_2",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "site_level_3",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "site_level_3",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verifier",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verifier",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verifier_id",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verifier_id",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verifiers_employee_status",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verifiers_employee_status",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_date",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_date",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_date_by_day",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_date_by_day",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_last_updated_date",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_last_updated_date",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_section",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_section",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "task",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "task",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_question_id",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_question_id",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_question_text",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_question_text",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_question_comments",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_question_comments",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_question_compliance",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_question_compliance",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_question_non_compliance",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_question_non_compliance",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "verification_question_na",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "verification_question_na",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "RipTinto",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "AzureSqlTable3",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "dataflow3",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "dataflow3",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2021-01-07T09:07:58Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RipTinto')]",
                "[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
                "[concat(variables('factoryId'), '/dataflows/dataflow3')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline5')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get Metadata1",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "DelimitedText1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileName": "@item()"
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobFSReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Metadata1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Metadata1').output.childItems[0]['name']",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Get Metadata2",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "testfilesize",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileName": "@item()"
                                            }
                                        },
                                        "fieldList": [
                                            "size"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobFSReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2021-02-18T06:35:33Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
                "[concat(variables('factoryId'), '/datasets/testfilesize')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline6')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "Keyword",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Keyword",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Topic_id",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Topic_id",
                                            "type": "Int32",
                                            "physicalType": "int"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "masterload",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "AzureSqlTable1",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2020-10-01T05:47:12Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/masterload')]",
                "[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/GenericSCDType2')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Using byNames to fully parameterize a Slowly Change Dimension Type 2 patter",
                "activities": [
                    {
                        "name": "GenericSCDType2",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "GenericSCDType2",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "PrimaryKey": "'Key'",
                                    "Columns": "'KeywordType,Keywords'"
                                },
                                "datasetParameters": {
                                    "GenericInput": {},
                                    "ExistingDimensionTable": {},
                                    "DimensionTableSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "GenericSCD"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-19T08:44:52Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/GenericSCDType2')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATA_LOAD_NEGATIVESEARCH')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESG_NEGATIVESEARCH_PIPELINE",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_NEGATIVESEARCH_PIPELINE",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "Negativesearch": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 16,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-22T11:01:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_NEGATIVESEARCH_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATALOAD_REGULATORY_URL')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESG_REGULATORY_URLS",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_REGULATORY_URLS",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "Breaches": {},
                                    "Case": {},
                                    "CaseDetails": {},
                                    "BREACHSINK": {},
                                    "CASESINK": {},
                                    "CASEDETAILSSINK": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-22T11:09:26Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_REGULATORY_URLS')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_SMART_FETCH_NEGATIVEURL')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESG_NEGATIVESCREENING_URL_PIPELINE",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_NEGATIVESCREENING_URL_PIPELINE",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "UNGlobalcompact": {},
                                    "OECDWatch": {},
                                    "Humanrights": {},
                                    "Banktrack": {},
                                    "UNGlobalSink": {},
                                    "OECDSink": {},
                                    "HumanrightsSink": {},
                                    "BanktrackSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 16,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-22T11:14:19Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_NEGATIVESCREENING_URL_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATA_LOAD_POSITIVESEARCH')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This pipeline will load data into web search and social media table",
                "activities": [
                    {
                        "name": "ESGDATALOAD",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_POSITIVESEARCH_PIPELINE",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "WebSearch": {},
                                    "SocialMedia": {},
                                    "SocialMediaSink": {},
                                    "WebsearchSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "concurrency": 2,
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-22T11:19:45Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_POSITIVESEARCH_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATA_LOAD_NEGATIVEURL')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESG_NEGATIVESCREENING_URL_PIPELINE",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_NEGATIVESCREENING_URL_PIPELINE",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "UNGlobalcompact": {},
                                    "OECDWatch": {},
                                    "Humanrights": {},
                                    "Banktrack": {},
                                    "UNGlobalSink": {},
                                    "OECDSink": {},
                                    "HumanrightsSink": {},
                                    "BanktrackSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 16,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-24T11:15:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_NEGATIVESCREENING_URL_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATA_LOAD_NEGATIVEURL_TEST')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESG_NEGATIVESCREENING_URL_PIPELINE",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_NEGATIVESCREENING_URL_PIPELINE",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "UNGlobalcompact": {},
                                    "OECDWatch": {},
                                    "Humanrights": {},
                                    "Banktrack": {},
                                    "UNGlobalSink": {},
                                    "OECDSink": {},
                                    "HumanrightsSink": {},
                                    "BanktrackSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 80,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-24T11:14:36Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_NEGATIVESCREENING_URL_PIPELINE')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATA_LOAD_NegativeURL_Humanrights')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESG_NEGATIVESCREENING_URL_Humanrights",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_NEGATIVESCREENING_URL_Humanrights",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "Humanrights": {},
                                    "HumanrightsSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-25T07:11:00Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_NEGATIVESCREENING_URL_Humanrights')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATA_LOAD_NegativeURL_UNGlobalcompact')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESG_NEGATIVESCREENING_URL_UNGlobalCompact",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_NEGATIVESCREENING_URL_UNGlobalCompact",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "UNGlobalcompact": {},
                                    "UNGlobalSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-25T07:11:00Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_NEGATIVESCREENING_URL_UNGlobalCompact')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ESG_DATA_LOAD_NEgativeURL_OECDWATCH')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ESG_NEGATIVESCREENING_URL_OECDWatch",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ESG_NEGATIVESCREENING_URL_OECDWatch",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "OECDWatch": {},
                                    "OECDSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ESG_DATALOADS"
                },
                "annotations": [],
                "lastPublishTime": "2020-11-25T07:11:00Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/ESG_NEGATIVESCREENING_URL_OECDWatch')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline7')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://www.worldweatheronline.com/developer/premium-api-explorer.aspx",
                            "method": "GET",
                            "headers": {
                                "Your API Key": "72e2b0302b614ca7a3b112252201611",
                                "Protocol": "HTTP",
                                "q": "London"
                            }
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2020-12-04T10:22:11Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline9')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "RioTinto",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "dataflow3",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2020-12-10T14:11:48Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/dataflow3')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/jsonflatteingpipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "jsonflattening",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "WeatherAPI_jsonflattening",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 16,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "Weather_DATALOAD"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-22T10:24:15Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/WeatherAPI_jsonflattening')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Weather_Data_load_Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.zipcode",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Set variable1",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "zipcode",
                                        "value": {
                                            "value": "@item()",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Web1_copy1",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Set variable1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('http://api.worldweatheronline.com/premium/v1/weather.ashx?key=72e2b0302b614ca7a3b112252201611&q=',item(),'&format=',variables('format'),'&num_of_days=',variables('days'))\n\n",
                                            "type": "Expression"
                                        },
                                        "method": "GET",
                                        "headers": {}
                                    }
                                },
                                {
                                    "name": "Copy data1_copy1",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Web1_copy1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET"
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "MergeFiles"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource1",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "relativeurl": "@variables('relativeurl')"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "Json1",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "parameters": {
                    "zipcode": {
                        "type": "array",
                        "defaultValue": [
                            "32004",
                            "32006"
                        ]
                    }
                },
                "variables": {
                    "zipcode": {
                        "type": "String"
                    },
                    "format": {
                        "type": "String",
                        "defaultValue": "JSON"
                    },
                    "days": {
                        "type": "String",
                        "defaultValue": "5"
                    }
                },
                "folder": {
                    "name": "Weather_DATALOAD"
                },
                "annotations": [],
                "lastPublishTime": "2021-01-16T18:39:45Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource1')]",
                "[concat(variables('factoryId'), '/datasets/Json1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Weather_Data_load_Pipeline_copy1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@array(activity('Lookup1').output.value)",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Longitude_variable",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Long",
                                        "value": {
                                            "value": "@item().Long",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Copying data from API",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Longitude_variable",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        },
                                        {
                                            "activity": "Latitude_variable",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "url": {
                                            "value": "@concat('http://api.worldweatheronline.com/premium/v1/weather.ashx?key=113129d0cb9c4b3a858175445211601&q=',item().Lat ,',',item().Long,'&format=',variables('format'),'&num_of_days=',variables('days'))\n\n",
                                            "type": "Expression"
                                        },
                                        "method": "GET",
                                        "headers": {}
                                    }
                                },
                                {
                                    "name": "Copy_to_ADLS",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Relative_URL",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET"
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "MergeFiles"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource1",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "relativeurl": {
                                                    "value": "@variables('relativeurl')",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "Json1",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                },
                                {
                                    "name": "Latitude_variable",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Lat",
                                        "value": {
                                            "value": "@item().Lat",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Relative_URL",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Copying data from API",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "relativeurl",
                                        "value": {
                                            "value": "@concat('premium/v1/weather.ashx?key=113129d0cb9c4b3a858175445211601&q=',item().Lat ,',',item().Long,'&format=',variables('format'),'&num_of_days=',variables('days'))\n\n",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Lookup1",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "select [lat],[long] from Weather_Location",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "DS_WEATHER_LOCATION",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "variables": {
                    "format": {
                        "type": "String",
                        "defaultValue": "JSON"
                    },
                    "days": {
                        "type": "String",
                        "defaultValue": "5"
                    },
                    "Lat": {
                        "type": "String"
                    },
                    "Long": {
                        "type": "String"
                    },
                    "relativeurl": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Weather_DATALOAD"
                },
                "annotations": [],
                "lastPublishTime": "2021-01-16T18:41:36Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_WEATHER_LOCATION')]",
                "[concat(variables('factoryId'), '/datasets/RestResource1')]",
                "[concat(variables('factoryId'), '/datasets/Json1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/jsonflatteingpipeline_copy1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "jsonflattening",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "WeatherAPI_jsonflattening",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 16,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "Weather_DATALOAD"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-22T10:24:15Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/WeatherAPI_jsonflattening')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DATAFLATTENING_DEMO')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "dataflow4",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "dataflow4",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2021-01-25T11:16:01Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/dataflow4')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/WeatherPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Weather_Data_load_Pipeline_copy1",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Execute Pipeline2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Pipeline1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "jsonflatteingpipeline_copy1",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Execute Pipeline3",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Pipeline2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "DeltaLoad",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "folder": {
                    "name": "Weather_DATALOAD"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-22T10:21:00Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/Weather_Data_load_Pipeline_copy1')]",
                "[concat(variables('factoryId'), '/pipelines/jsonflatteingpipeline_copy1')]",
                "[concat(variables('factoryId'), '/pipelines/DeltaLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RAW_SMARTFETCH_DATA')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "SmartFetch",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "SmartFetch",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "SmartFetch": {},
                                    "Smartfetchdatatable": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/SmartFetch')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RAW_TALKWALKER_DUMP')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Talkwalker",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Talkwalker",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "Talkwalker": {},
                                    "Enbridgetalkwalkerload": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Talkwalker')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TRANSFORMED_Processed_TW_Twitter')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "KPI4_Processed_TW_Twitter_Data",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "KPI4_Processed_TW_Twitter_Data",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "ProcessedTWTwitter": {},
                                    "KPI4ProcessedTWTwitterData": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/KPI4_Processed_TW_Twitter_Data')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RAW_TWITTER_USERINFO')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Twitter_USER_INFO",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Twitter_USER_INFO",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "TwitterUserInfo": {},
                                    "EnbridgeTwitterUsersInfoload": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Twitter_USER_INFO')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TRANSFORMED_KP14_TAGGEDACCOUNT')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "KPI4_Tagged_Account",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "KPI4_Tagged_Account",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "TaggedAccount": {},
                                    "KPI4TaggedAccount": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/KPI4_Tagged_Account')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RAW_TWITTER_FOLLOWER_INFO')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Twitter_FOLLOWERS_INFO",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Twitter_FOLLOWERS_INFO",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "TwitterFollowerInfo": {},
                                    "EnbridgeTwitterFolowersInfoload": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Twitter_FOLLOWERS_INFO')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/REPORTING_TIMELINE')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "PB_KPI1_Timeline_Twitter_user_FollowerInfo",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "PB_KPI1_Timeline_Twitter_user_FollowerInfo",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "Timeline": {},
                                    "PBKPI1TimelineUserFollower": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/PB_KPI1_Timeline_Twitter_user_FollowerInfo')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/REPORTING_RELATIVEDIFFERENCE')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "PB_KPI1_Timeline_Twitter_user_Fol_Relative_Difference",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "PB_KPI1_Timeline_Twitter_user_Fol_Relative_Difference",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "RelativeDifference": {},
                                    "PBKPI1TimelineTwitterUserFolRelativeDifference": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/PB_KPI1_Timeline_Twitter_user_Fol_Relative_Difference')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/REPORTING_AGGREGATED_RANKING')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "PB_KPI4_Tagged_Account_Ranking",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "PB_KPI4_Tagged_Account_Ranking",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "AggregateTaggedRanking": {},
                                    "PBKPI4TaggedAccountRanking": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "ENBRIDGE_DATAPIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-15T08:24:04Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/PB_KPI4_Tagged_Account_Ranking')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/QuestionTemplateLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "QuestionTemplate",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "QuestionTemplate",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "QuestionsInput": {},
                                    "AnswerType": {},
                                    "ChoiceListSupplier": {},
                                    "Subcategory": {},
                                    "ChoiceListAuditor": {},
                                    "OutputData": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2021-02-22T09:04:23Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/QuestionTemplate')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/QuestionDataLoadTemplate')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "QuestionTemplate",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "QuestionTemplate",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "QuestionsInput": {},
                                    "AnswerType": {},
                                    "ChoiceListSupplier": {},
                                    "Subcategory": {},
                                    "ChoiceListAuditor": {},
                                    "OutputData": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "AuditPF_QuestionsDataLoad"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-22T09:07:30Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/QuestionTemplate')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DeltaLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "IncrementalLoad",
                        "type": "DatabricksNotebook",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "notebookPath": "/Users/shibashish.tripathy@theermgroup.onmicrosoft.com/Changedata",
                            "libraries": [
                                {
                                    "jar": "dbfs:/FileStore/jars/25479688_bfc7_497d_b34b_30898cfaed5b-azure_cosmosdb_spark_2_4_0_2_11_2_1_2_uber-70b4a.jar"
                                }
                            ]
                        },
                        "linkedServiceName": {
                            "referenceName": "DeltaLoad",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "folder": {
                    "name": "Weather_DATALOAD"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-22T10:22:19Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/DeltaLoad')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Talkwalker Search Results API Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://api.talkwalker.com/api/v1/search/results?access_token=demo&q=dogs&sort_by=published&sort_order=desc",
                            "method": "GET",
                            "headers": {}
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET"
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings",
                                    "filePattern": "setOfObjects"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource3",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeurl": {
                                        "value": "@variables('relativeurl')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DSTALKWALKER",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": "Talkwalker"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Web1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "relativeurl",
                            "value": {
                                "value": "@concat('/api/v1/search/results?access_token=demo&q=dogs&sort_by=published&sort_order=desc')\n",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "variables": {
                    "relativeurl": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_SEARCH_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-25T11:24:53Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource3')]",
                "[concat(variables('factoryId'), '/datasets/DSTALKWALKER')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Histogram Published Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://api.talkwalker.com/api/v1/search/histogram/published?access_token=demo&q=cats&interval=6h",
                            "method": "GET",
                            "headers": {}
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET"
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings",
                                    "copyBehavior": "MergeFiles"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings",
                                    "filePattern": "setOfObjects"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource3",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeurl": {
                                        "value": "@variables('relativeurl')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_HISTOGRAM_PUBLISHED",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": "Histogram_Published"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Web1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "relativeurl",
                            "value": {
                                "value": "@concat('/api/v1/search/histogram/published?access_token=demo&q=cats&interval=6h')\n\n",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "variables": {
                    "relativeurl": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_SEARCH_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-26T10:46:14Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource3')]",
                "[concat(variables('factoryId'), '/datasets/DS_HISTOGRAM_PUBLISHED')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Histogram Engagment Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://api.talkwalker.com/api/v1/search/histogram/engagement?access_token=demo&q=cats",
                            "method": "GET",
                            "headers": {}
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET"
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings",
                                    "copyBehavior": "MergeFiles"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings",
                                    "filePattern": "setOfObjects"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource3",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeurl": {
                                        "value": "@variables('relativeurl')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_HISTOGRAM_ENGAGMENT",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": "HistogramEngagment"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Web1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "relativeurl",
                            "value": {
                                "value": "@concat('api/v1/search/histogram/engagement?access_token=demo&q=cats')\n\n",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "variables": {
                    "relativeurl": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_SEARCH_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-25T11:24:53Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource3')]",
                "[concat(variables('factoryId'), '/datasets/DS_HISTOGRAM_ENGAGMENT')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Histogram Theme Cloud Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "url": "https://api.talkwalker.com/api/v1/search/histogram/theme_cloud?access_token=demo&q=cats&top_n=3&pretty=true",
                            "method": "GET",
                            "headers": {}
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET"
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobFSWriteSettings",
                                    "copyBehavior": "MergeFiles"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings",
                                    "filePattern": "setOfObjects"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "RestResource3",
                                "type": "DatasetReference",
                                "parameters": {
                                    "relativeurl": {
                                        "value": "@variables('relativeurl')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "DS_HISTOGRAM_THEME_CLOUD",
                                "type": "DatasetReference",
                                "parameters": {
                                    "filename": "HistogramThemeCloud"
                                }
                            }
                        ]
                    },
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Web1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "relativeurl",
                            "value": {
                                "value": "@concat('api/v1/search/histogram/theme_cloud?access_token=demo&q=cats&top_n=3&pretty=true')\n\n",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "variables": {
                    "relativeurl": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_SEARCH_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-25T11:24:57Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource3')]",
                "[concat(variables('factoryId'), '/datasets/DS_HISTOGRAM_THEME_CLOUD')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLoadTalkwalker')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "TALKWALKER_DATAFLOW",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Talkwalker_API_DataFlow",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "TalkwalkerInputSource": {},
                                    "JSONDATA": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_DATALOAD_TALKWALKER"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-25T13:27:49Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Talkwalker_API_DataFlow')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/COPYING_TALKWALKER_TO_STG')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "STG_COPY",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "tableOption": "autoCreate"
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mapComplexValuesToString": true
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "DS_JSON_TALKWALKER",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "AZ_SQl_TALKWALKER_API",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_DATALOAD_TALKWALKER"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-25T11:42:07Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/DS_JSON_TALKWALKER')]",
                "[concat(variables('factoryId'), '/datasets/AZ_SQl_TALKWALKER_API')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DeltaLoad_API_TALKWALKER')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Upsert_Load",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "UPSERT_DATALOAD",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_DATALOAD_TALKWALKER"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-25T11:30:47Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/UPSERT_DATALOAD')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLoadPipleine_TALKWALKER')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "DataLoadTalkwalker",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Execute Pipeline2",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Pipeline1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "COPYING_TALKWALKER_TO_STG",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Execute Pipeline3",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Pipeline2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "DeltaLoad_API_TALKWALKER",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_DATALOAD_TALKWALKER"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-25T11:24:54Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/DataLoadTalkwalker')]",
                "[concat(variables('factoryId'), '/pipelines/COPYING_TALKWALKER_TO_STG')]",
                "[concat(variables('factoryId'), '/pipelines/DeltaLoad_API_TALKWALKER')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLoadHistogramEngagment')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Histogram_Engagment_DataFlow",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Histogram_Engagment_DataFlow",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {
                                        "filename": "HistogramEngagment"
                                    },
                                    "HistogramEngagment": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/HISTOGRAM_ENGAGMENT_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-26T06:10:19Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Histogram_Engagment_DataFlow')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLoadPipeline_HistogramEngagment')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "DataLoadHistogramEngagment",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/HISTOGRAM_ENGAGMENT_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-26T06:10:20Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/DataLoadHistogramEngagment')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLoadHistogramPublished')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Histogram_Published_Dataflow",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Histogram_Published_Dataflow",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {
                                        "filename": "Histogram_Published"
                                    },
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/HISTOGRAM_PUBLISHED_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-26T06:20:46Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Histogram_Published_Dataflow')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLoadPipeline_HistogramPublished')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "DataLoadHistogramPublished",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/HISTOGRAM_PUBLISHED_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-26T06:20:47Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/DataLoadHistogramPublished')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLOadHistogramThemeCloud')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Histogram_ThemeCloud",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Histogram_ThemeCloud",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "HistogramthemecloudInput": {
                                        "filename": "Histogram_ThemeCloud"
                                    },
                                    "HistogramThemecloudoutput": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/HISTOGRAM_THEME_CLOUD"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-26T06:20:46Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Histogram_ThemeCloud')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DataLoadPipeline_HistogramThemeCloud')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "DataLOadHistogramThemeCloud",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/HISTOGRAM_THEME_CLOUD"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-26T06:20:47Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/DataLOadHistogramThemeCloud')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/API_PIPELINE')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "TalkwalkerSearchAPI",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Talkwalker Search Results API Pipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": false,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "HistogramThemeCLoudAPI",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "HistogramPublishedAPI",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Histogram Theme Cloud Pipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": false,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "HistogramPublishedAPI",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "HistogramEngagmentAPI",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Histogram Published Pipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": false,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "HistogramEngagmentAPI",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "TalkwalkerSearchAPI",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "Histogram Engagment Pipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": false,
                            "parameters": {}
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/API_SEARCH_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-02-26T10:49:35Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/Talkwalker Search Results API Pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/Histogram Theme Cloud Pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/Histogram Published Pipeline')]",
                "[concat(variables('factoryId'), '/pipelines/Histogram Engagment Pipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/STG_TW_UI_Extract_DataPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "STG_TW_UI_Extract_DATALOAD",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "STG_TW_UI_Extract_DATALOAD",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "DSTWUIExtractStaging": {},
                                    "SQLDBTWUIEXTRACT": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/EXTRACT_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-03-03T08:49:53Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/STG_TW_UI_Extract_DATALOAD')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RAW_TW_UI_Extract_DataPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "RAW_TW_UI_EXTRACT",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "RAW_TW_UI_EXTRACT",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "STGTWUIEXTRACT": {},
                                    "RAWTWUIEXTRACTLOAD": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/EXTRACT_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-03-03T08:49:53Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/RAW_TW_UI_EXTRACT')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TW_Extract_DataLoad')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "STG_TW_UI_Extract_DataPipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Execute Pipeline1_copy1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Pipeline1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "RAW_TW_UI_Extract_DataPipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "folder": {
                    "name": "TALKWALKER_PIPELINE/EXTRACT_PIPELINE"
                },
                "annotations": [],
                "lastPublishTime": "2021-03-03T17:12:21Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/STG_TW_UI_Extract_DataPipeline')]",
                "[concat(variables('factoryId'), '/pipelines/RAW_TW_UI_Extract_DataPipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_TALKWALKER')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Raw/Talkwalker",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_TWITTER_USERINFOLOAD')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Extraction_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Id",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Screen_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Location",
                        "type": "varchar"
                    },
                    {
                        "name": "URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Description",
                        "type": "varchar"
                    },
                    {
                        "name": "Protected",
                        "type": "varchar"
                    },
                    {
                        "name": "Verified",
                        "type": "varchar"
                    },
                    {
                        "name": "Followers_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Friends_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Listed_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Favourites_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Status_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Created_At",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Enbridge_Twitter_Users_Info"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TwitterUser_Info')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Raw/Twitter/User_Info",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_TWITTERFOLLOWERINFO')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Raw/Twitter/Follower_Info",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "Extraction_Date",
                        "type": "String"
                    },
                    {
                        "name": "Target_User_Name",
                        "type": "String"
                    },
                    {
                        "name": "Follower_Id_Str",
                        "type": "String"
                    },
                    {
                        "name": "Screen_Name",
                        "type": "String"
                    },
                    {
                        "name": "Name",
                        "type": "String"
                    },
                    {
                        "name": "Location",
                        "type": "String"
                    },
                    {
                        "name": "URL",
                        "type": "String"
                    },
                    {
                        "name": "Description",
                        "type": "String"
                    },
                    {
                        "name": "Protected",
                        "type": "String"
                    },
                    {
                        "name": "Verified",
                        "type": "String"
                    },
                    {
                        "name": "Followers_Count",
                        "type": "String"
                    },
                    {
                        "name": "Friends_Count",
                        "type": "String"
                    },
                    {
                        "name": "Listed_Count",
                        "type": "String"
                    },
                    {
                        "name": "Favourites_Count",
                        "type": "String"
                    },
                    {
                        "name": "Status_Count",
                        "type": "String"
                    },
                    {
                        "name": "Created_At",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_TWITTERFOLLOWERSINFO')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Extraction_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Target_User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Follower_Id",
                        "type": "varchar"
                    },
                    {
                        "name": "Screen_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Location",
                        "type": "varchar"
                    },
                    {
                        "name": "URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Description",
                        "type": "varchar"
                    },
                    {
                        "name": "Protected",
                        "type": "varchar"
                    },
                    {
                        "name": "Verified",
                        "type": "varchar"
                    },
                    {
                        "name": "Followers_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Friends_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Listed_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Favourites_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Status_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Created_At",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Enbridge_Twitter_Followers_Info"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DBKPI4Processed_TW_TWITTER_DATA')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Insights_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Published_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Content",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Id",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Handle",
                        "type": "varchar"
                    },
                    {
                        "name": "Original_User_Id",
                        "type": "varchar"
                    },
                    {
                        "name": "Original_User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Original_User_Handle",
                        "type": "varchar"
                    },
                    {
                        "name": "Retweet_User_Id",
                        "type": "varchar"
                    },
                    {
                        "name": "Retweet_User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Retweet_User_Handle",
                        "type": "varchar"
                    },
                    {
                        "name": "Cleaned_Tweet",
                        "type": "varchar"
                    },
                    {
                        "name": "Retweet_YN",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "KPI4_Processed_TW_Twitter_Data"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PROCESSED_TW_TWITTER')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Transformed/KPI4/Processed_TW_Twitter",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_TAGGEDACCOUNT')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Transformed/KPI4/Tagged_Account",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_KPI4_Tagged_Account')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Extraction_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Published_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Influential_User_Handle",
                        "type": "varchar"
                    },
                    {
                        "name": "Influential_User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Original_User_Handle",
                        "type": "varchar"
                    },
                    {
                        "name": "Retweet_User_Handle",
                        "type": "varchar"
                    },
                    {
                        "name": "Actual_Content",
                        "type": "varchar"
                    },
                    {
                        "name": "Retweet_YN",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "KPI4_Tagged_Account"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_KPI1TimelineUser')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Reporting/KPI1/Timeline",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_PB_KPI1_TIMELINE_TWITTER_USER')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Extraction_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Only_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Only_Time",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Id",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Screen_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Location",
                        "type": "varchar"
                    },
                    {
                        "name": "URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Description",
                        "type": "varchar"
                    },
                    {
                        "name": "Protected",
                        "type": "varchar"
                    },
                    {
                        "name": "Verified",
                        "type": "varchar"
                    },
                    {
                        "name": "Followers_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Friends_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Listed_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Favourites_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Status_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Created_At",
                        "type": "varchar"
                    },
                    {
                        "name": "Followers_of_Followers",
                        "type": "varchar"
                    },
                    {
                        "name": "Influential_Followers",
                        "type": "varchar"
                    },
                    {
                        "name": "Influential_List",
                        "type": "varchar"
                    },
                    {
                        "name": "Total Influential Numbers",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "PB_KPI1_Timeline_Twitter_User_Follower_Info"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_Timeline')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Reporting/KPI1/Timeline",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_RELATIVEDIFFERENCE')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Reporting/KPI1/Relative Difference",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_AGGREGATED_TAGGED_RANKING')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ENBRDG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "Reporting/KPI4/Aggregate Tagged Ranking",
                        "fileSystem": "enbridge"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ENBRDG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_RELATIVEDIFFERENCE')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Extraction_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Only_Date",
                        "type": "varchar"
                    },
                    {
                        "name": "Only_Time",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Id",
                        "type": "varchar"
                    },
                    {
                        "name": "User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Screen_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Location",
                        "type": "varchar"
                    },
                    {
                        "name": "URL",
                        "type": "varchar"
                    },
                    {
                        "name": "Description",
                        "type": "varchar"
                    },
                    {
                        "name": "Protected",
                        "type": "varchar"
                    },
                    {
                        "name": "Verified",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Followers_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Friends_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Listed_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Favourites_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Status_Count",
                        "type": "varchar"
                    },
                    {
                        "name": "Created_At",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Followers_of_Followers",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Influential_Followers",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Influential_List",
                        "type": "varchar"
                    },
                    {
                        "name": "Relative_Total_Influential_Followers",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "PB_KPI1_Timeline_Fol_Relative_Differences"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_KP14TAGGEDACCTRANKING')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "ENBRIDGE_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "Extraction_Date",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "Published_Date",
                        "type": "date"
                    },
                    {
                        "name": "Influential_User_Handle",
                        "type": "varchar"
                    },
                    {
                        "name": "Influential_User_Name",
                        "type": "varchar"
                    },
                    {
                        "name": "Original_User_Handle",
                        "type": "varchar"
                    },
                    {
                        "name": "Tagged_Count",
                        "type": "int",
                        "precision": 10
                    },
                    {
                        "name": "Tagged_Ranking",
                        "type": "int",
                        "precision": 10
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "PB_KPI4_Tagged_Account_Ranking"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Choice_List')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "ChoicSupplier",
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Choice.xlsx",
                        "fileSystem": "test"
                    },
                    "firstRowAsHeader": true
                },
                "schema": [
                    {
                        "name": "ChoiceId",
                        "type": "String"
                    },
                    {
                        "name": "ChoiceListId",
                        "type": "String"
                    },
                    {
                        "name": "ChoiceName",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SUBCATEGORY')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "subcategoryid",
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Subcategory.xlsx",
                        "fileSystem": "test"
                    },
                    "firstRowAsHeader": true
                },
                "schema": [
                    {
                        "name": "SubCategoryId",
                        "type": "String"
                    },
                    {
                        "name": "SubCategoryName",
                        "type": "String"
                    },
                    {
                        "name": "CategoryId",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/QuestionOutput')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": "test"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ChoicelistAuditor')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "ChoiceAuditor",
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Choice_Auditor.xlsx",
                        "fileSystem": "test"
                    },
                    "firstRowAsHeader": true
                },
                "schema": [
                    {
                        "name": "ChoiceId",
                        "type": "String"
                    },
                    {
                        "name": "ChoiceListId",
                        "type": "String"
                    },
                    {
                        "name": "ChoiceName",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource2')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_TALKWALKER",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": ""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_TALKWALKER')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DSTALKWALKER')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": "OutputJson",
                        "fileSystem": "talkwalker"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource3')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_TALKWALKER",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "relativeurl": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().relativeurl",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_TALKWALKER')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_HISTOGRAM_PUBLISHED')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": "OutputJson",
                        "fileSystem": "talkwalker"
                    }
                },
                "schema": {
                    "type": "object",
                    "properties": {
                        "status_code": {
                            "type": "string"
                        },
                        "status_message": {
                            "type": "string"
                        },
                        "request": {
                            "type": "string"
                        },
                        "pagination": {
                            "type": "object",
                            "properties": {
                                "next": {
                                    "type": "string"
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        },
                        "result_content": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "object",
                                                "properties": {
                                                    "url": {
                                                        "type": "string"
                                                    },
                                                    "indexed": {
                                                        "type": "integer"
                                                    },
                                                    "search_indexed": {
                                                        "type": "integer"
                                                    },
                                                    "published": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "content": {
                                                        "type": "string"
                                                    },
                                                    "title_snippet": {
                                                        "type": "string"
                                                    },
                                                    "content_snippet": {
                                                        "type": "string"
                                                    },
                                                    "root_url": {
                                                        "type": "string"
                                                    },
                                                    "domain_url": {
                                                        "type": "string"
                                                    },
                                                    "host_url": {
                                                        "type": "string"
                                                    },
                                                    "parent_url": {
                                                        "type": "string"
                                                    },
                                                    "lang": {
                                                        "type": "string"
                                                    },
                                                    "porn_level": {
                                                        "type": "integer"
                                                    },
                                                    "fluency_level": {
                                                        "type": "integer"
                                                    },
                                                    "spam_level": {
                                                        "type": "integer"
                                                    },
                                                    "sentiment": {
                                                        "type": "integer"
                                                    },
                                                    "source_type": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "post_type": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tokens_title": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tokens_content": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tags_internal": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "source_extended_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "alexa_pageviews": {
                                                                "type": "integer"
                                                            },
                                                            "alexa_unique_visitors": {
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    "extra_author_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "gender": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "extra_source_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "world_data": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "continent": {
                                                                        "type": "string"
                                                                    },
                                                                    "country": {
                                                                        "type": "string"
                                                                    },
                                                                    "region": {
                                                                        "type": "string"
                                                                    },
                                                                    "city": {
                                                                        "type": "string"
                                                                    },
                                                                    "longitude": {
                                                                        "type": "number"
                                                                    },
                                                                    "latitude": {
                                                                        "type": "number"
                                                                    },
                                                                    "country_code": {
                                                                        "type": "string"
                                                                    },
                                                                    "resolution": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "engagement": {
                                                        "type": "integer"
                                                    },
                                                    "reach": {
                                                        "type": "integer"
                                                    },
                                                    "word_count": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_HISTOGRAM_ENGAGMENT')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": "OutputJson",
                        "fileSystem": "talkwalker"
                    }
                },
                "schema": {
                    "type": "object",
                    "properties": {
                        "status_code": {
                            "type": "string"
                        },
                        "status_message": {
                            "type": "string"
                        },
                        "request": {
                            "type": "string"
                        },
                        "pagination": {
                            "type": "object",
                            "properties": {
                                "next": {
                                    "type": "string"
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        },
                        "result_content": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "object",
                                                "properties": {
                                                    "url": {
                                                        "type": "string"
                                                    },
                                                    "indexed": {
                                                        "type": "integer"
                                                    },
                                                    "search_indexed": {
                                                        "type": "integer"
                                                    },
                                                    "published": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "content": {
                                                        "type": "string"
                                                    },
                                                    "title_snippet": {
                                                        "type": "string"
                                                    },
                                                    "content_snippet": {
                                                        "type": "string"
                                                    },
                                                    "root_url": {
                                                        "type": "string"
                                                    },
                                                    "domain_url": {
                                                        "type": "string"
                                                    },
                                                    "host_url": {
                                                        "type": "string"
                                                    },
                                                    "parent_url": {
                                                        "type": "string"
                                                    },
                                                    "lang": {
                                                        "type": "string"
                                                    },
                                                    "porn_level": {
                                                        "type": "integer"
                                                    },
                                                    "fluency_level": {
                                                        "type": "integer"
                                                    },
                                                    "spam_level": {
                                                        "type": "integer"
                                                    },
                                                    "sentiment": {
                                                        "type": "integer"
                                                    },
                                                    "source_type": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "post_type": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tokens_title": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tokens_content": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tags_internal": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "source_extended_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "alexa_pageviews": {
                                                                "type": "integer"
                                                            },
                                                            "alexa_unique_visitors": {
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    "extra_author_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "gender": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "extra_source_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "world_data": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "continent": {
                                                                        "type": "string"
                                                                    },
                                                                    "country": {
                                                                        "type": "string"
                                                                    },
                                                                    "region": {
                                                                        "type": "string"
                                                                    },
                                                                    "city": {
                                                                        "type": "string"
                                                                    },
                                                                    "longitude": {
                                                                        "type": "number"
                                                                    },
                                                                    "latitude": {
                                                                        "type": "number"
                                                                    },
                                                                    "country_code": {
                                                                        "type": "string"
                                                                    },
                                                                    "resolution": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "engagement": {
                                                        "type": "integer"
                                                    },
                                                    "reach": {
                                                        "type": "integer"
                                                    },
                                                    "entity_url": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "url": {
                                                                    "type": "string"
                                                                },
                                                                "resolved_url": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "word_count": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "result_histogram": {
                            "type": "object",
                            "properties": {
                                "header": {
                                    "type": "object",
                                    "properties": {
                                        "v": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "t": {
                                                "type": "integer"
                                            },
                                            "v": {
                                                "type": "array",
                                                "items": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_HISTOGRAM_THEME_CLOUD')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": "OutputJson",
                        "fileSystem": "talkwalker"
                    }
                },
                "schema": {
                    "type": "object",
                    "properties": {
                        "status_code": {
                            "type": "string"
                        },
                        "status_message": {
                            "type": "string"
                        },
                        "request": {
                            "type": "string"
                        },
                        "pagination": {
                            "type": "object",
                            "properties": {
                                "next": {
                                    "type": "string"
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        },
                        "result_content": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "object",
                                                "properties": {
                                                    "url": {
                                                        "type": "string"
                                                    },
                                                    "indexed": {
                                                        "type": "integer"
                                                    },
                                                    "search_indexed": {
                                                        "type": "integer"
                                                    },
                                                    "published": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "content": {
                                                        "type": "string"
                                                    },
                                                    "title_snippet": {
                                                        "type": "string"
                                                    },
                                                    "content_snippet": {
                                                        "type": "string"
                                                    },
                                                    "root_url": {
                                                        "type": "string"
                                                    },
                                                    "domain_url": {
                                                        "type": "string"
                                                    },
                                                    "host_url": {
                                                        "type": "string"
                                                    },
                                                    "parent_url": {
                                                        "type": "string"
                                                    },
                                                    "lang": {
                                                        "type": "string"
                                                    },
                                                    "porn_level": {
                                                        "type": "integer"
                                                    },
                                                    "fluency_level": {
                                                        "type": "integer"
                                                    },
                                                    "spam_level": {
                                                        "type": "integer"
                                                    },
                                                    "sentiment": {
                                                        "type": "integer"
                                                    },
                                                    "source_type": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "post_type": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tokens_title": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tokens_content": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tags_internal": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "source_extended_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "alexa_pageviews": {
                                                                "type": "integer"
                                                            },
                                                            "alexa_unique_visitors": {
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    "extra_author_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "gender": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "extra_source_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "world_data": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "continent": {
                                                                        "type": "string"
                                                                    },
                                                                    "country": {
                                                                        "type": "string"
                                                                    },
                                                                    "region": {
                                                                        "type": "string"
                                                                    },
                                                                    "city": {
                                                                        "type": "string"
                                                                    },
                                                                    "longitude": {
                                                                        "type": "number"
                                                                    },
                                                                    "latitude": {
                                                                        "type": "number"
                                                                    },
                                                                    "country_code": {
                                                                        "type": "string"
                                                                    },
                                                                    "resolution": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "engagement": {
                                                        "type": "integer"
                                                    },
                                                    "reach": {
                                                        "type": "integer"
                                                    },
                                                    "entity_url": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "url": {
                                                                    "type": "string"
                                                                },
                                                                "resolved_url": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "word_count": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "result_histogram": {
                            "type": "object",
                            "properties": {
                                "header": {
                                    "type": "object",
                                    "properties": {
                                        "v": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "t": {
                                                "type": "integer"
                                            },
                                            "v": {
                                                "type": "array",
                                                "items": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQl_TALKWALKER_API')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "TW_API_SEARCHRESULTS"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_JSON_TALKWALKER')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Talkwalker.json",
                        "folderPath": "TalkwalkerAPI",
                        "fileSystem": "talkwalker"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Talkwalkerflatten')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": "Talkwalker",
                        "folderPath": "OutputJson",
                        "fileSystem": "talkwalker"
                    }
                },
                "schema": {
                    "type": "object",
                    "properties": {
                        "status_code": {
                            "type": "string"
                        },
                        "status_message": {
                            "type": "string"
                        },
                        "request": {
                            "type": "string"
                        },
                        "pagination": {
                            "type": "object",
                            "properties": {
                                "next": {
                                    "type": "string"
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        },
                        "result_content": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "object",
                                                "properties": {
                                                    "url": {
                                                        "type": "string"
                                                    },
                                                    "indexed": {
                                                        "type": "integer"
                                                    },
                                                    "search_indexed": {
                                                        "type": "integer"
                                                    },
                                                    "published": {
                                                        "type": "integer"
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "content": {
                                                        "type": "string"
                                                    },
                                                    "title_snippet": {
                                                        "type": "string"
                                                    },
                                                    "content_snippet": {
                                                        "type": "string"
                                                    },
                                                    "root_url": {
                                                        "type": "string"
                                                    },
                                                    "domain_url": {
                                                        "type": "string"
                                                    },
                                                    "host_url": {
                                                        "type": "string"
                                                    },
                                                    "parent_url": {
                                                        "type": "string"
                                                    },
                                                    "lang": {
                                                        "type": "string"
                                                    },
                                                    "porn_level": {
                                                        "type": "integer"
                                                    },
                                                    "fluency_level": {
                                                        "type": "integer"
                                                    },
                                                    "spam_level": {
                                                        "type": "integer"
                                                    },
                                                    "sentiment": {
                                                        "type": "integer"
                                                    },
                                                    "source_type": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "post_type": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tokens_title": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tokens_content": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "tags_internal": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "source_extended_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "alexa_pageviews": {
                                                                "type": "integer"
                                                            },
                                                            "alexa_unique_visitors": {
                                                                "type": "integer"
                                                            }
                                                        }
                                                    },
                                                    "extra_author_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "gender": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "extra_source_attributes": {
                                                        "type": "object",
                                                        "properties": {
                                                            "world_data": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "continent": {
                                                                        "type": "string"
                                                                    },
                                                                    "country": {
                                                                        "type": "string"
                                                                    },
                                                                    "region": {
                                                                        "type": "string"
                                                                    },
                                                                    "city": {
                                                                        "type": "string"
                                                                    },
                                                                    "longitude": {
                                                                        "type": "number"
                                                                    },
                                                                    "latitude": {
                                                                        "type": "number"
                                                                    },
                                                                    "country_code": {
                                                                        "type": "string"
                                                                    },
                                                                    "resolution": {
                                                                        "type": "string"
                                                                    }
                                                                }
                                                            },
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    },
                                                    "engagement": {
                                                        "type": "integer"
                                                    },
                                                    "reach": {
                                                        "type": "integer"
                                                    },
                                                    "entity_url": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "url": {
                                                                    "type": "string"
                                                                },
                                                                "resolved_url": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "word_count": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_TALKWALKER_API_TEST')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "TW_API_SEARCHRESULTS_FINAL"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_HISTOGRAM_ENGAGMENT')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "TW_API_HISTOGRAM_ENGAGMENT"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_HISTOGRAM_PUBLISHED')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "TW_API_HISTOGRAM_PUBLISHED"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_HISTOGRAM_THEMECLOUD')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "TW_API_HISTOGRAM_THEMECLOUD"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DS_TW_UI_Extract')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_ADLS_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET/EXTRACT_DATASET"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "folderPath": "AutomatedExtract",
                        "fileSystem": "talkwalker"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "url",
                        "type": "String"
                    },
                    {
                        "name": "indexed",
                        "type": "String"
                    },
                    {
                        "name": "published",
                        "type": "String"
                    },
                    {
                        "name": "search_indexed",
                        "type": "String"
                    },
                    {
                        "name": "title_snippet",
                        "type": "String"
                    },
                    {
                        "name": "content_snippet",
                        "type": "String"
                    },
                    {
                        "name": "title",
                        "type": "String"
                    },
                    {
                        "name": "content",
                        "type": "String"
                    },
                    {
                        "name": "root_url",
                        "type": "String"
                    },
                    {
                        "name": "domain_url",
                        "type": "String"
                    },
                    {
                        "name": "host_url",
                        "type": "String"
                    },
                    {
                        "name": "parent_url",
                        "type": "String"
                    },
                    {
                        "name": "lang",
                        "type": "String"
                    },
                    {
                        "name": "porn_level",
                        "type": "String"
                    },
                    {
                        "name": "fluency_level",
                        "type": "String"
                    },
                    {
                        "name": "spam_level",
                        "type": "String"
                    },
                    {
                        "name": "sentiment",
                        "type": "String"
                    },
                    {
                        "name": "source_type",
                        "type": "String"
                    },
                    {
                        "name": "post_type",
                        "type": "String"
                    },
                    {
                        "name": "cluster_id",
                        "type": "String"
                    },
                    {
                        "name": "meta_cluster_id",
                        "type": "String"
                    },
                    {
                        "name": "tags_internal",
                        "type": "String"
                    },
                    {
                        "name": "tags_marking",
                        "type": "String"
                    },
                    {
                        "name": "tags_customer",
                        "type": "String"
                    },
                    {
                        "name": "entity_urls",
                        "type": "String"
                    },
                    {
                        "name": "images.url",
                        "type": "String"
                    },
                    {
                        "name": "images.width",
                        "type": "String"
                    },
                    {
                        "name": "images.height",
                        "type": "String"
                    },
                    {
                        "name": "images.legend",
                        "type": "String"
                    },
                    {
                        "name": "videos.url",
                        "type": "String"
                    },
                    {
                        "name": "videos.width",
                        "type": "String"
                    },
                    {
                        "name": "videos.height",
                        "type": "String"
                    },
                    {
                        "name": "videos.legend",
                        "type": "String"
                    },
                    {
                        "name": "pagemonitoring_sitemon_siteid",
                        "type": "String"
                    },
                    {
                        "name": "matched_profile",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.facebook_shares",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.facebook_likes",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.twitter_retweets",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.url_views",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.pinterest_likes",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.pinterest_pins",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.pinterest_repins",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.youtube_views",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.youtube_likes",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.youtube_dislikes",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.instagram_likes",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.twitter_shares",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.num_comments",
                        "type": "String"
                    },
                    {
                        "name": "source_extended_attributes.alexa_pageviews",
                        "type": "String"
                    },
                    {
                        "name": "source_extended_attributes.facebook_followers",
                        "type": "String"
                    },
                    {
                        "name": "source_extended_attributes.twitter_followers",
                        "type": "String"
                    },
                    {
                        "name": "source_extended_attributes.instagram_followers",
                        "type": "String"
                    },
                    {
                        "name": "source_extended_attributes.pinterest_followers",
                        "type": "String"
                    },
                    {
                        "name": "extra_article_attributes.world_data.continent",
                        "type": "String"
                    },
                    {
                        "name": "extra_article_attributes.world_data.country",
                        "type": "String"
                    },
                    {
                        "name": "extra_article_attributes.world_data.country_code",
                        "type": "String"
                    },
                    {
                        "name": "extra_article_attributes.world_data.region",
                        "type": "String"
                    },
                    {
                        "name": "extra_article_attributes.world_data.city",
                        "type": "String"
                    },
                    {
                        "name": "extra_article_attributes.world_data.longitude",
                        "type": "String"
                    },
                    {
                        "name": "extra_article_attributes.world_data.latitude",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.id",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.type",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.name",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.birthdate.date",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.birthdate.resolution",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.gender",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.image_url",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.short_name",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.url",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.world_data.continent",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.world_data.country",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.world_data.country_code",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.world_data.region",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.world_data.city",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.world_data.longitude",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.world_data.latitude",
                        "type": "String"
                    },
                    {
                        "name": "extra_source_attributes.world_data.continent",
                        "type": "String"
                    },
                    {
                        "name": "extra_source_attributes.world_data.country",
                        "type": "String"
                    },
                    {
                        "name": "extra_source_attributes.world_data.country_code",
                        "type": "String"
                    },
                    {
                        "name": "extra_source_attributes.world_data.region",
                        "type": "String"
                    },
                    {
                        "name": "extra_source_attributes.world_data.city",
                        "type": "String"
                    },
                    {
                        "name": "extra_source_attributes.world_data.longitude",
                        "type": "String"
                    },
                    {
                        "name": "extra_source_attributes.world_data.latitude",
                        "type": "String"
                    },
                    {
                        "name": "engagement",
                        "type": "String"
                    },
                    {
                        "name": "reach",
                        "type": "String"
                    },
                    {
                        "name": "provider",
                        "type": "String"
                    },
                    {
                        "name": "generator.type",
                        "type": "String"
                    },
                    {
                        "name": "source_extended_attributes.alexa_unique_visitors",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.twitter_likes",
                        "type": "String"
                    },
                    {
                        "name": "extra_author_attributes.description",
                        "type": "String"
                    },
                    {
                        "name": "article_extended_attributes.linkedin_shares",
                        "type": "String"
                    },
                    {
                        "name": "extra_source_attributes.name",
                        "type": "String"
                    },
                    {
                        "name": "word_count",
                        "type": "String"
                    },
                    {
                        "name": "rating",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_ADLS_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_TW_UIEXTRACT')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET/EXTRACT_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "STG_TW_UI_Extract "
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AZ_SQL_DB_RAW_TW_UI_Extract')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "LS_AZSQLDB_ESG",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "TALKWALKERDATASET/EXTRACT_DATASET"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "RAW_TW_UI_EXTRACT"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/LS_AZSQLDB_ESG')]"
            ]
        }
    ]
}